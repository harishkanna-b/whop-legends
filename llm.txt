# Add apps
Source: https://docs.whop.com/add-apps

Learn how to add apps to your whop

Apps are the building blocks for your business on Whop.

Here’s how it works: You create your own whop, then pick and choose which apps to include. Want a chat room for your community? Add the **Chat** app. Selling a course? Add the **Course** app.

There are hundreds of apps to choose from, and you can add any of them from the Whop App Store.

## How to add apps to your whop

<Steps>
  <Step title="Go to the Whop App Store" iconType="regular" titleSize="h3">
    You can find all the available apps in the Whop App Store.

    * Inside your whop, click **Add app**
    * Browse the different categories of apps to find the apps your members will find most valuable

    Learn more about what apps you should add to your whop [here](/apps/docs/whop-apps/what-are-whop-apps).
  </Step>

  <Step title="Add apps to your whop" iconType="regular" stepNumber={2} titleSize="h3">
    When you find an app you'd like to add, click **Add**.

    You will see the app has been added in the left-hand column of your whop.

    <Tip>
      You can add as many apps as you want, and add each app as many times as you'd like (for example, you can add the Chat app multiple times to create different chat groups for different topics).
    </Tip>
  </Step>
</Steps>

## Configure the app settings

Each app comes with its own settings that let you control the experience and functionality.

* **Chat app**: Choose who can post and react, ban links or images
* **Courses app**: Upload videos, add files, create quizzes
* **Events app**: Add upcoming events with details and links

To customize any app:

1. Click on the app in your Whop
2. Click the **Configure** settings

<Tip>
  Only you (and other team members) can see and edit the configuration settings of each app.
</Tip>

## Learn more about Whop apps

<CardGroup cols={2}>
  <Card title="What are Whop apps?" icon="block-brick" href="/whop-apps/what-are-whop-apps">
    Learn more about what Whop apps are and how to use them.
  </Card>

  <Card title="The Whop App Store" icon="store" href="/whop-apps/whop-app-store">
    Learn more about the Whop App Store.
  </Card>
</CardGroup>

## Next steps

To launch your internet business, make sure you’ve completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Set up pricing" icon="dollar-sign" href="/set-up-products-pricing">
    Choose your pricing model and what members get when they join.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Your store page is where visitors come to learn about your offer.
  </Card>
</CardGroup>


# Building Apps
Source: https://docs.whop.com/apps/building-apps

Learn how to build and structure apps on Whop with experience and discover views

Whop apps are composed of **views** - different pages you build into your app that users interact with. Understanding these views is essential for creating a complete app experience.

## App Views

Your app consists of three main types of views:

### Experience Views

An **experience** is an instance of your app when someone installs it into their Whop. Think of it as a unique deployment of your app for a specific community or business. The **experience view** is what users see when they install your app into their Whop and click into it. This is the core functionality of your app - where users interact with your features and services.

* **Route**: Typically `/experiences/[experienceId]`
* **Access**: Private, gated through the Whop SDK
* **Purpose**: Deliver the main app functionality to authorized users

### Discover Views

The **discover view** is a new public-facing view that helps potential users explore what your app offers. This view showcases your app's capabilities and highlights success stories from other communities.

* **Route**: Public page accessible to anyone
* **Access**: No authentication required
* **Purpose**: Marketing and discovery, showcasing app value and success stories

#### Linking to Whops & Showcasing Success

To further promote your app and earn affiliate fees, consider linking to other Whops that use your app and have seen success. You can do this by adding links on your discover view to the Whop's discover page at `/discover/{accessPassRoute}/`, appending your app's ID as a query parameter: `?app={yourAppId}`. For example:

```
/discover/{accessPassRoute}/?app={yourAppId}
```

This not only helps potential users see real-world examples of your app in action, but also allows you to earn affiliate commissions for any referrals.

> **How to get the access pass route:**
> You can use the [Whop SDK](/sdk/api/experiences/list-access-passes-for-experience) to find the `accessPass_route` by experience ID. This will return the access passes for that experience, including the route you can use for linking.

<Callout type="warning">
  When building discover views, include a **64px margin** on your top-level content to prevent it from being hidden by the iframe header.
</Callout>

### Dashboard Views

The **dashboard view** is a business-focused view that allows creators to access apps directly from their dashboard. This view is designed for apps that help businesses grow and manage operations.

* **Route**: Typically `/dashboard/[companyId]`
* **Access**: Private, gated through the Whop SDK
* **Purpose**: Provide creators direct access to apps from their dashboard

## Building Experience Views

Our template projects come preconfigured with Whop authentication logic, so you can guarantee users have proper access and retrieve the appropriate IDs and permissions before performing app logic.

If your app requires storing data in an external database,  can use these IDs to properly scope data to the correct experiences and user IDs:

* **Experience ID**: Scope data to specific app installations
* **User ID**: Associate data with individual users

## Monetization with Discover Views

You can collect affiliate fees by linking out to Whops from your discover page. Simply append the query parameter \`?app={yourAppId} to Whop links to track referrals and earn commissions.

## Testing Your App Locally

To test your app during development:

1. Go to [whop.com](https://whop.com) and install your app
2. Navigate to your app details page
3. Set your local paths and environment variables
4. Then click on your app in the sidebar
5. You should see a dev toggle option in the top right. Click on this set the environment to local to preview your local app as you develop,
6. You can switch between experience and discover views to test both interfaces
7. When you are ready to publish, make sure your app base url is set, and you are good to go.

This allows you to develop and test your app locally while maintaining the full Whop integration experience.

## Next Steps

<CardGroup cols={2}>
  <Card title="SDK Reference" href="/sdk" icon="code" color="#16a34a">
    Explore available SDK functions for your app
  </Card>

  <Card title="App Overview" href="/apps/overview" icon="circle-info" color="#16a34a">
    Learn more about how apps fit into the Whop ecosystem
  </Card>

  <Card title="Tutorials" href="/tutorials" icon="book-open" color="#16a34a">
    Step-by-step guides for common app patterns
  </Card>
</CardGroup>


# Login with Whop
Source: https://docs.whop.com/apps/features/oauth-guide

Learn how to implement Whop OAuth in a stand-alone application.

## Intro

Use Whop OAuth to authenticate users in your web or iOS app.

<Note>
  This guide only covers the basic steps to implement Whop OAuth and does not cover best practices regarding the OAuth2 protocol. It is recommended to use a library to handle the OAuth2 flow.

  We are going to release a guide on how to implement Whop OAuth with auth.js soon.
</Note>

### Step 1: Create a Whop App and obtain secrets

1. Go to the [Whop Dashboard](https://whop.com/dashboard/developer/) and create a new app or select an existing one.

2. Add a redirect uri in your apps OAuth settings

   To test your app locally you can add a redirect uri on `http://localhost:{PORT}` but it is recommended to use https for production.

3. Copy the app id and api key and set them in your environment variables.

   Keep in mind that the api key is a secret and should not be shared with anyone. The app id is public and can be shared with anyone.

   ```.env
   NEXT_PUBLIC_WHOP_APP_ID=your-app-id
   WHOP_API_KEY=your-api-key
   ```

### Step 2: Initiate the OAuth flow

#### Setup the OAuth flow

To follow this guide you will need to install the `@whop/api` package from npm:

<CodeGroup>
  ```bash pnpm
  pnpm i @whop/api
  ```

  ```bash npm
  npm i @whop/api
  ```

  ```bash yarn
  yarn add @whop/api
  ```
</CodeGroup>

Start off by creating a route that will be hit by the user when they click the `Login with Whop` button:

```ts /api/oauth/init/route.ts
import { WhopServerSdk } from "@whop/api";

const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY!,
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
});

export function GET(request: Request) {
  const url = new URL(request.url);
  const next = url.searchParams.get("next") ?? "/home";

  const { url, state } = whopApi.oauth.getAuthorizationUrl({
    // This has to be defined in the redirect uris outlined in step 1.2
    redirectUri: "http://localhost:3000/api/oauth/callback",
    // These are the authorization scopes you want to request from the user.
    scope: ["read_user"],
  });

  // The state is used to restore the `next` parameter after the user lands on the callback route.
  // Note: This is not a secure way to store the state and for demonstration purposes only.
  return Response.redirect(url, {
    headers: {
      "Set-Cookie": `oauth-state.${state}=${encodeURIComponent(
        next
      )}; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=3600`,
    },
  });
}
```

<Note>
  Read more about available scopes [here](/api-reference/graphql/scopes).
</Note>

#### Adding the `Login with Whop` button

Now continue by adding a link to your app that will initiate the `Login with Whop` flow:

```html
<a href="/api/oauth/init?next=/home">Login with Whop</a>
```

Upon clicking the link the user will be redirected to the Whop OAuth page and is prompted to authorize your app.

### Step 3: Exchange the code for a token

Upon successful authorization the user will be redirected to the redirect uri you specified in the query parameters with `code` and `state` query parameters:

```ts /api/oauth/callback/route.ts
import { WhopServerSdk } from "@whop/api";

const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY!,
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
});

export function GET(request: Request) {
  const url = new URL(request.url);
  const code = url.searchParams.get("code");
  const state = url.searchParams.get("state");

  if (!code) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=missing_code");
  }

  if (!state) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=missing_state");
  }

  const stateCookie = request.headers
    .get("Cookie")
    ?.split(";")
    .find((cookie) => cookie.trim().startsWith(`oauth-state.${state}=`));

  if (!stateCookie) {
    // redirect to error page
    return Response.redirect("/oauth/error?error=invalid_state");
  }

  // exchange the code for a token
  const authResponse = await whopApi.oauth.exchangeCode({
    code,
    redirectUri: "http://localhost:3000/api/oauth/callback",
  });

  if (!authResponse.ok) {
    return Response.redirect("/oauth/error?error=code_exchange_failed");
  }

  const { access_token } = authResponse.tokens;

  // Restore the `next` parameter from the state cookie set in the previous step.
  const next = decodeURIComponent(stateCookie.split("=")[1]);
  const nextUrl = new URL(next, "http://localhost:3000");

  // This is an example, you should not store the plain user auth token in a cookie in production.

  // After setting the cookie you can now identify the user by reading the cookie when the user visits your website.
  return Response.redirect(nextUrl.toString(), {
    headers: {
      "Set-Cookie": `whop_access_token=${access_token}; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=3600`,
    },
  });
}
```

## Implementing with authentication frameworks

### Auth.js

To implement Whop OAuth with auth.js you can use the `authJsProvider` method on the `WhopOAuth` class.

Get started by setting up the relevant auth.js distribution:

* Next.js ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Next.js)) ([Example](https://github.com/whopio/whop-sdk-ts/tree/main/examples/oauth-nextjs)) via `next-auth@beta`
* SvelteKit ([Installation Guide](https://authjs.dev/getting-started/installation?framework=SvelteKit)) via `@auth/sveltekit`
* Qwik ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Qwik)) via `@auth/qwik`
* Express ([Installation Guide](https://authjs.dev/getting-started/installation?framework=Express)) via `@auth/express`

Create a Whop OAuth provider and add it to your auth.js provider configuration:

```ts
const WhopProvider = whopApi.oauth.authJsProvider({
  scope: ["read_user"],
});

const authConfig = {
  providers: [WhopProvider],
  // ... rest of your auth.js configuration
};
```


# Payments and payouts
Source: https://docs.whop.com/apps/features/payments-and-payouts

Use the API to collect payment from users or payout users.

## Collecting Payments

First, create the charge on the server using the Whop API. Then you can either:

1. Open a modal in your app using the iframe SDK (recommended)
2. Redirect the user to Whop's checkout page

### 1. Create the charge on the server

> This step will create a charge on the server and return the inAppPurchase object required for the next step.

On the server, use the [chargeUser](/sdk/api/payments/charge-user) method to create a charge:

```typescript app/api/charge/route.ts
import { whopSdk } from "@/lib/whop-sdk";

export async function POST(request: Request) {
  try {
    const { userId, experienceId } = await request.json();

    const result = await whopSdk.payments.chargeUser({
      amount: 100,
      currency: "usd",
      userId: userId,
      // metadata is information that you'd like to receive later about the payment.
      metadata: {
        creditsToPurchase: 1,
        experienceId: experienceId,
      },
    });

    if (!result?.inAppPurchase) {
      throw new Error("Failed to create charge");
    }

    return Response.json(result.inAppPurchase);
  } catch (error) {
    console.error("Error creating charge:", error);
    return Response.json({ error: "Failed to create charge" }, { status: 500 });
  }
}
```

### 2. Confirm the payment on the client

> In this step the user will be prompted to confirm the previously created charge in a modal.

<Warning>
  This function requires the iFrame SDK to be initialized. See [**iFrame
  Overview**](/sdk/iframe-setup) for more information.
</Warning>

Use the iframe SDK to open a payment modal:

<CodeGroup>
  ```tsx React
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function PaymentButton({
    userId,
    experienceId,
  }: {
    userId: string;
    experienceId: string;
  }) {
    const iframeSdk = useIframeSdk();

    const [receiptId, setReceiptId] = useState<string>();
    const [error, setError] = useState<string>();

    async function handlePurchase() {
      try {
        // 1. Create charge on server
        const response = await fetch("/api/charge", {
          method: "POST",
          body: JSON.stringify({ userId, experienceId }),
        });

        if (response.ok) {
          const inAppPurchase = await response.json();
          // 2. Open payment modal
          const res = await iframeSdk.inAppPurchase(inAppPurchase);

          if (res.status === "ok") {
            setReceiptId(res.data.receipt_id);
            setError(undefined);
          } else {
            setReceiptId(undefined);
            setError(res.error);
          }
        } else {
          throw new Error("Failed to create charge");
        }
      } catch (error) {
        console.error("Purchase failed:", error);
        setError("Purchase failed");
      }
    }

    return <button onClick={handlePurchase}>Purchase Plan</button>;
  }
  ```

  ```tsx Vanilla JS
  import { iframeSdk } from "@/lib/iframe-sdk";

  const paymentButton = document.querySelector("button#payment-button");
  const receiptElement = document.querySelector("span#receiptContainer");
  const errorElement = document.querySelector("span#errorContainer");

  function setError(error?: string) {
    if (errorElement instanceof HTMLSpanElement) {
      errorElement.textContent = error ?? "";
    }
  }

  function setReceiptId(receiptId?: string) {
    if (receiptElement instanceof HTMLSpanElement) {
      receiptElement.textContent = receiptId ?? "";
    }
  }

  if (paymentButton instanceof HTMLButtonElement) {
    paymentButton.addEventListener(
      "click",
      async function onPaymentButtonClick() {
        const userId = this.dataset.userId;
        const experienceId = this.dataset.experienceId;
        if (!userId || !experienceId) {
          throw new Error("Missing userId or experienceId");
        }

        try {
          // 1. Create charge on server
          const response = await fetch("/api/charge", {
            method: "POST",
            body: JSON.stringify({ userId, experienceId }),
          });

          if (response.ok) {
            const inAppPurchase = await response.json();
            // 2. Open payment modal
            const res = await iframeSdk.inAppPurchase(inAppPurchase);

            if (res.status === "ok") {
              setReceiptId(res.data.receipt_id);
              setError(undefined);
            } else {
              setReceiptId(undefined);
              setError(res.error);
            }
          } else {
            throw new Error("Failed to create charge");
          }
        } catch (error) {
          console.error("Purchase failed:", error);
          setError("Purchase failed");
        }
      }
    );
  }
  ```
</CodeGroup>

### 3. Validate the payment

> After a payment is processed, you should validate it on your server using webhooks to ensure the payment was successful and update your application accordingly.

Set up a webhook route to handle payment events:

```typescript app/api/webhook/route.ts
import { makeWebhookValidator, type PaymentWebhookData } from "@whop/api";
import { after } from "next/server";

const validateWebhook = makeWebhookValidator({
  webhookSecret: process.env.WHOP_WEBHOOK_SECRET,
});

export async function POST(request: Request) {
  // Validate the webhook to ensure it's from Whop
  const webhook = await validateWebhook(request);

  // Handle the webhook event
  if (webhook.action === "payment.succeeded") {
    after(handlePaymentSucceededWebhook(webhook.data));
  }

  // Make sure to return a 2xx status code quickly. Otherwise the webhook will be retried.
  return new Response("OK", { status: 200 });
}

async function handlePaymentSucceededWebhook(data: PaymentWebhookData) {
  const { id, user_id, subtotal, amount_after_fees, metadata, ... } = data;

  // ...
}
```

See [**Webhooks**](/apps/features/webhooks) for more information.

<Warning>
  Make sure to create a webhook in your [dashboard](https://whop.com/dashboard/developer/) app settings and set your `WHOP_WEBHOOK_SECRET` environment variable.
</Warning>

<Frame>
    <img src="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=770322f79278e3ca244a4269a2cbb45f" alt="Webhook Configuration" width="2730" height="952" data-path="images/app-webhooks.png" srcset="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=280&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=d51177e6f01ab1df8a93c38b8680716b 280w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=560&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=71fbc37e8cc3da0331c0259b2dfce61d 560w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=840&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ca1f801b4c629469ef367b304661740 840w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1100&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=1cf8ebe1c0ce1ea74e164a7119a74518 1100w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1650&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=2c882bb8089d36a040b2ae7ac9ba8f50 1650w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=2500&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ffd9c4f4aabffc86293b8315b7da685 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Sending Payouts

You can send payouts to any user using their Whop username. The funds will be transferred from your company's ledger account.

### Transfer Funds

```typescript
import { whopSdk } from "@/lib/whop-sdk";

async function sendPayout(
  companyId: string,
  recipientUsername: string,
  amount: number
) {
  // 1. Get your company's ledger account
  const experience = await whopSdk.experiences.getExperience({ experienceId });
  const companyId = experience.company.id;
  const ledgerAccount = await whopSdk.companies.getCompanyLedgerAccount({
    companyId,
  });

  // 2. Pay the recipient
  await whopSdk.payments.payUser({
    amount: amount,
    currency: "usd",
    // Username or ID or ledger account ID of the recipient user
    destinationId: recipientUsername,
    // Your company's ledger account ID that can be retrieve from whopSdk.companies.getCompanyLedgerAccount()
    ledgerAccountId: ledgerAccount.company?.ledgerAccount.id!,
    // Optional transfer fee in percentage
    transferFee: ledgerAccount.company?.ledgerAccount.transferFee,
  });
}
```


# Create forum post
Source: https://docs.whop.com/apps/features/post-to-feed

Create a forum and a post using the API

## Overview

To post in a forum, you must:

1. Find or create a *Forum Experience*
2. Create a *Forum Post* inside the *Forum Experience*

<Info>
  If you already know what forum experience you want to post in, you can skip
  step 1, and use the experience ID directly in step 2.
</Info>

***

## Find or create a forum experience

A forum post must be created within a **Forum Experience**.
The `findOrCreateForum` method will find an existing forum experience with the specified name,
or create a new one with all the specified options

```typescript
const newForum = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.findOrCreateForum({
    experienceId: experienceId,
    name: "Dino game results",
    whoCanPost: "admins",
    // optional:
    // expiresAt: Date.now() + 24 * 60 * 60 * 1000,
    // price: {
    // baseCurrency: "usd",
    // initialPrice: 100,
    // }
  });
```

> This will create the forum in the same whop as the supplied experience.

***

## Create a forum post.

Once you have the `experienceId` from the above, use it to create a post.

### Basic Forum Post

```ts
const forumPost = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.createForumPost({
    forumExperienceId: newForum.createForum?.id,
    title: "Welcome!",
    content: "Excited to kick things off in our new forum 🎉",
  });
```

* `withUser()`: ID of the user posting
* `forumExperienceId`: The ID of the target forum
* `title` and `content`: Main post body. *(title is optional)*

### Forum post with advanced options

This demonstrates a rich post using all features:

```ts
const forumPost = await whopSdk
  .withUser("YOUR_AGENT_USER_ID")
  .forums.createForumPost({
    forumExperienceId: "exp_XXXXXX",
    // Visible even before purchase.
    title: "Big Launch + Community Poll!",
    // Visible only after purchase
    content: "Hidden content unless purchased. 🔒",
    // Add media to the post.
    // Learn how to upload in the upload-media section
    attachments: [
      {
        directUploadId: "XXXXXXXXXXXXXXXXXXXXXXXXXX",
      },
    ],

    // Do not send a notification to everyone about this post.
    isMention: false,

    // Lock the content and attachments behind a
    // one time purchase in the price + currency.
    paywallAmount: 9.99,
    paywallCurrency: "usd",

    // Add a poll to the post.
    poll: {
      options: [
        { id: "1", text: "New Product Features" },
        { id: "2", text: "Exclusive AMA" },
        { id: "3", text: "Member Giveaways" },
      ],
    },
  });
```


# Send push notification
Source: https://docs.whop.com/apps/features/send-push-notification

Send a push notification to a user or a group of users.

## Send a notification to everyone in an experience.

<Info>
  Make sure you have [setup your whop SDK client on the
  server](/sdk/whop-api-client)
</Info>

```typescript
import { whopSdk } from "@/lib/whop-sdk";

// This could be a server action / api route that create a
// piece of content in your app for this experience
export async function createSomeContentInExperience(
  experienceId: string,
  content: string, // this could be a more complex type depending on your specific app.
  createdByUserId: string
) {
  // Create the content in your app.
  // ... await some database call etc etc...

  // Send a push notification to everyone in the experience.
  await whopSdk.notifications.sendPushNotification({
    title: "New content is available" /* Required! */,
    content: content.slice(0, 100) + "...", // Format the content as you wish.
    experienceId, // send to all users with access to this experience.

    isMention: false, // Set this to true to make everyone immediately
    // get a mobile push notification.

    senderUserId: createdByUserId, // This will render this user's
    // profile picture as the notification image.
  });
}
```

See the full list of accepted parameters [here](/sdk/api/notifications/send-push-notification).

## Adding a deeplink to the notification.

When you send a notification, you will usually want to send the user to specific section in your app upon clicking the notification.
You can do this by using the `restPath` property.

1. Update your app path in the dashboard to handle the additional parameters.

   In the hosting section, set the "App path" field to something like: `/experiences/[experienceId]/[restPath]`

2. In your `sendPushNotification` call, add the `restPath` property.

   ```typescript
   await whopSdk.notifications.sendPushNotification({
     title: "New content is available",
     content: content.slice(0, 100) + "...",
     experienceId,
     restPath: `/posts/${somePostId}`, // The specific posts route is just an example
     // You could also just add a query param like this:
     // restPath: `?id=${specialId}`,
   });
   ```

3. Update you app to handle the following route:

   When clicking on a notification, the user will open this specific url on your app within the whop iframe.

   ```
   https://your-domain.com/experiences/exp_123/posts/post_123
   ```

   If using NextJS, you can add a `page.tsx` file with the path: `app/experiences/[experienceId]/posts/[postId]/page.tsx`

   <Info>
     Note: the exact path will depend on the pathname structure you set in the
     `restPath` property.
   </Info>

## Sending a notification to company admins

Your app may want to alert company admins only, not all members. Use the `companyTeamId` field instead of the `experienceId` when sending the notification.

```typescript
await whopSdk.notifications.sendPushNotification({
  title: "A member just posted a new listing. Review it now.",
  content: `${listingTitle}`,
  companyTeamId,
});
```

<Info>
  You must send either the `companyTeamId` or the `experienceId` when sending a
  notification. Setting both will result in an error.
</Info>

## Sending a notification to a specific subset of users.

Use the `userIds` field to filter the users who will receive the notification.

Whop will first apply either the `experienceId` or the `companyTeamId` filter and then apply the `userIds` filter

Ensure that the `userIds` array contains valid user IDs that are part of the specified experience or company team.

For example if you a building a bidding app you may want to alert the highest bidder if they were just outbid.

```typescript
await whopSdk.notifications.sendPushNotification({
  title: "You were just outbid",
  content: `${listingTitle}`,
  experienceId, // the experience ID that the current item is listed within.
  userIds: [oldHighestBidderUserId],
});
```


# Subscriptions
Source: https://docs.whop.com/apps/features/subscriptions

Gate your app behind a subscription or one-time purchase

## Setup your access pass on the dashboard.

1. Go to the your [app's dashboard](https://whop.com/dashboard/developer).
2. Select the access passes tab and create an access pass. Give it a name like "My App Premium"
3. Create a pricing plan for the access pass by clicking the "Add Pricing" button from the table row.
4. After creating the pricing plan, copy the plan id from the 3 dot menu in the pricing plan card.
5. Also copy the access pass id from the 3 dot menu in the access pass table row.

<Info>
  We recommend storing the access pass id and plan id in environment variables
  for your app. Eg:

  ```bash
  NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID="prod_XXXXXXXX"
  NEXT_PUBLIC_PREMIUM_PLAN_ID="plan_XXXXXXXX"
  ```
</Info>

## Check if users have access

When a user makes a request to your app, you can easily check if they have access using the whop api.

```typescript
const hasAccess = await whopSdk.access.checkIfUserHasAccessToAccessPass({
  accessPassId: process.env.NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID, // from step 5 above.
  userId: userId,
});
```

If a user does not have access, you can [prompt them to purchase](#collect-payment-from-users) or show a lite "free" version of the app to upsell them.

## Collect payment from users

<Warning>
  This function requires the iFrame SDK to be initialized. See [**iFrame
  Overview**](/sdk/iframe-setup) for more information.
</Warning>

Use the iframe sdk to collect payment from users. This will show a whop native payment modal in which the user can confirm their purchase.

<CodeGroup>
  ```tsx React
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function GetAccessButton() {
    const iframeSdk = useIframeSdk();

    const [receiptId, setReceiptId] = useState<string>();
    const [error, setError] = useState<string>();

    async function handlePurchase() {
      try {
  		const res = await iframeSdk.inAppPurchase({ planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID });

  		if (res.status === "ok") {
  			setReceiptId(res.data.receipt_id);
  			setError(undefined);
  		} else {
  			setReceiptId(undefined);
  			setError(res.error);
  		}
      } catch (error) {
        console.error("Purchase failed:", error);
        setError("Purchase failed");
      }
    }

    return <button onClick={handlePurchase}>Get Access</button>;
  }
  ```

  ```tsx Vanilla JS
  import { iframeSdk } from "@/lib/iframe-sdk";

  const getAccessButton = document.querySelector("button#get-access-button");
  const receiptElement = document.querySelector("span#receiptContainer");
  const errorElement = document.querySelector("span#errorContainer");

  function setError(error?: string) {
    if (errorElement instanceof HTMLSpanElement) {
      errorElement.textContent = error ?? "";
    }
  }

  function setReceiptId(receiptId?: string) {
    if (receiptElement instanceof HTMLSpanElement) {
      receiptElement.textContent = receiptId ?? "";
    }
  }

  if (getAccessButton instanceof HTMLButtonElement) {
    getAccessButton.addEventListener(
      "click",
      async function onGetAccessButtonClick() {
        try {
          const res = await iframeSdk.inAppPurchase({
            planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID,
          });

          if (res.status === "ok") {
            setReceiptId(res.data.receipt_id);
            setError(undefined);
          } else {
            setReceiptId(undefined);
            setError(res.error);
          }
        } catch (error) {
          console.error("Purchase failed:", error);
          setError("Purchase failed");
        }
      }
    );
  }
  ```
</CodeGroup>

# Attaching custom metadata to a subscription

You can attach custom metadata to a subscription by using the `createCheckoutSession` mutation.

For example, you can use this to associate a subscription with an experience or company that it was created for.
Using this you can attribute the source of the subscription and build powerful revenue sharing features into your app.

Before using the `iframeSdk.inAppPurchase` function, you need to create a checkout session, and pass it to the function.

### Create the checkout session in a server action.

Use the whopSdk to create a checkout session on your backend, pass the experienceId to this function.

```typescript
import { whopSdk } from "@/lib/whop-sdk";
import { headers } from "next/headers";

export async function createSubscription(experienceId: string) {
  const { userId } = await whopSdk.verifyUserToken(await headers());

  // Check to make sure the current user has access to the experience.
  const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });

  const checkoutSession = await whopSdk.payments.createCheckoutSession({
    planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID,
    metadata: {
      experienceId,
    },
  });

  return checkoutSession;
}
```

### Pass the checkout session to the iframeSdk.inAppPurchase function.

```tsx React
"use client";

import { useIframeSdk } from "@whop/react";
import { createSubscription } from "@/lib/actions/create-subscription";

export default function GetAccessButton({
  experienceId,
}: {
  experienceId: string;
}) {
  const iframeSdk = useIframeSdk();

  const [receiptId, setReceiptId] = useState<string>();
  const [error, setError] = useState<string>();

  async function handlePurchase() {
    try {
      const inAppPurchase = await createSubscription(experienceId);
      const res = await iframeSdk.inAppPurchase(inAppPurchase);

      if (res.status === "ok") {
        setReceiptId(res.data.receipt_id);
        setError(undefined);
      } else {
        setReceiptId(undefined);
        setError(res.error);
      }
    } catch (error) {
      console.error("Purchase failed:", error);
      setError("Purchase failed");
    }
  }

  return <button onClick={handlePurchase}>Get Access</button>;
}
```

This custom metadata will be available in the webhook payloads sent to your server (if enabled).

You can use the `payUser` mutation to share your subscription revenue with the creator of the experience.


# Upload media
Source: https://docs.whop.com/apps/features/upload-media

Use Whop to upload images, videos, audio, and other files.

### Client-Side: Set up the Image Upload Component

First, create a component to handle image uploads. This example uses `react-dropzone` for the file upload interface.

```typescript
import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";

function ImageUploader() {
  // Set up state for the image file and preview
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);

  // Clean up object URLs when component unmounts
  useEffect(() => {
    const objectUrl = image?.preview;
    if (objectUrl) {
      return () => {
        URL.revokeObjectURL(objectUrl);
      };
    }
  }, [image?.preview]);

  // Handle file drops
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  // Configure dropzone
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  return (
    <div {...getRootProps()} className="border-2 border-dashed rounded-lg p-8">
      <input {...getInputProps()} />
      {image?.preview ? (
        <img src={image.preview} alt="Preview" className="max-w-full h-auto" />
      ) : (
        <p>Drag & drop an image here, or click to select</p>
      )}
    </div>
  );
}
```

### Server-Side: Handle File Uploads

Create an API route to handle the file upload using the Whop SDK:

```typescript
import { whopSdk } from "@/lib/whop-sdk";
import { headers } from "next/headers";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    // Verify user authentication
    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Get the file from the request
    const file = await request.blob();

    // Upload to Whop
    const response = await whopSdk.attachments.uploadAttachment({
      file: new File([file], `upload-${Date.now()}.png`, {
        type: "image/png",
      }),
      record: "forum_post", // or other record types
    });

    // The response includes the directUploadId and URL
    return NextResponse.json({
      success: true,
      attachmentId: response.directUploadId,
      url: response.attachment.source.url,
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    return NextResponse.json(
      { error: "Failed to upload file" },
      { status: 500 }
    );
  }
}
```

### Using Uploaded Media

After uploading, you can use the attachment ID in various Whop features. For example, to create a forum post with the uploaded image (server-side):

```typescript
const createForumPost = async (attachmentId: string) => {
  const post = await whopSdk.forums.createForumPost({
    forumExperienceId: "your-forum-id",
    content: "Check out this image!",
    attachments: [{ directUploadId: attachmentId }],
  });

  return post;
};
```

### Supported File Types

The Whop API supports the following file types for upload:

* Images: `.jpg`, `.jpeg`, `.png`, `.gif`
* Videos: `.mp4`, `.mov`
* Documents: `.pdf`

### Best Practices

1. **File Size**: Keep uploads under 100MB for optimal performance
2. **Image Optimization**: Consider using libraries like `sharp` for image processing before upload
3. **Error Handling**: Implement proper error handling on both client and server
4. **Clean Up**: Remember to clean up any preview URLs to prevent memory leaks
5. **Security**: Always verify user authentication before handling uploads
6. **Progress Tracking**: Consider implementing upload progress tracking for better UX

### Complete Example

Here's a complete example showing both client and server integration:

```typescript
// app/components/MediaUploader.tsx (Client)
import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";

export default function MediaUploader() {
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  useEffect(() => {
    return () => {
      if (image?.preview) {
        URL.revokeObjectURL(image.preview);
      }
    };
  }, [image]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!image?.file) return;

    setIsUploading(true);
    try {
      // Send to your API route
      const formData = new FormData();
      formData.append("file", image.file);

      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error);
      }

      // Clear the form after successful upload
      setImage(null);
    } catch (error) {
      console.error("Upload failed:", error);
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="space-y-4">
      <div
        {...getRootProps()}
        className="border-2 border-dashed rounded-lg p-8"
      >
        <input {...getInputProps()} />
        {image?.preview ? (
          <img
            src={image.preview}
            alt="Preview"
            className="max-w-full h-auto"
          />
        ) : (
          <p>Drag & drop an image here, or click to select</p>
        )}
      </div>

      {image && (
        <button
          onClick={handleUpload}
          disabled={isUploading}
          className="px-4 py-2 bg-blue-500 text-white rounded"
        >
          {isUploading ? "Uploading..." : "Upload"}
        </button>
      )}
    </div>
  );
}
```

This implementation provides a complete media upload solution with:

* Drag and drop interface
* File preview
* Upload handling
* Progress states
* Error handling
* Automatic cleanup


# Webhooks
Source: https://docs.whop.com/apps/features/webhooks

Use webhooks to get notified when specific events happen relating to your app.

***

## Create a webhook

<Steps>
  <Step title="Go to your app's webhook settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Click on **Webhooks**

    <Frame>
            <img src="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=770322f79278e3ca244a4269a2cbb45f" alt="Webhook Settings" width="2730" height="952" data-path="images/app-webhooks.png" srcset="https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=280&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=d51177e6f01ab1df8a93c38b8680716b 280w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=560&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=71fbc37e8cc3da0331c0259b2dfce61d 560w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=840&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ca1f801b4c629469ef367b304661740 840w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1100&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=1cf8ebe1c0ce1ea74e164a7119a74518 1100w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=1650&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=2c882bb8089d36a040b2ae7ac9ba8f50 1650w, https://mintcdn.com/whop/Ck4TMcyCw4wzCcNW/images/app-webhooks.png?w=2500&fit=max&auto=format&n=Ck4TMcyCw4wzCcNW&q=85&s=8ffd9c4f4aabffc86293b8315b7da685 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Create a webhook">
    1. Click on **Create webhook**
    2. Set your endpoint URL

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=4016395a2563955dfb323d797b17409e" alt="Webhook URL" width="2048" height="1252" data-path="images/create-webhook-url.png" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=421ce287b9328f7c48f4311750036b66 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=361aaa2ff194e467a7d6abd3aeb275ad 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=cd5e9bff42de8bf63801b06f726ebba3 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=d2383ca93c40ccccc5a80829012f8920 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=dd3818cc939c82b08d25ad4dc79415ba 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-url.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=5909fd7b40a1fe8ab590e2117c4dbcac 2500w" data-optimize="true" data-opv="2" />
    </Frame>

    <Note>
      When testing locally, you'll need to tunnel your requests to your localhost endpoint. You can use [ngrok](https://ngrok.com/) to do this.
    </Note>

    3. Select the events you want to receive and click on **Save**

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=079887392e21e4680a82415244aeaea4" alt="Webhook Events" width="2048" height="1252" data-path="images/create-webhook-select-events.png" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=5b2f296400dc8da0d3a36eb82ce3487b 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=26ebb6c88bb75b7d53bb146e25d7a76f 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=ab4827eb60f4cd868a4a9f7aa9a88e3e 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=501525158f6eb2eec986fa3eeeec18d1 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=91db6e3c8004bd9ef8d8fb8b09d21c56 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/create-webhook-select-events.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=2e00be7fefd453c85f799885585d43d9 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Copy your webhook secret">
    Copy the webhook secret by clicking on it and safely store it in your environment variables.

    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=54e31ca7255fe7894229f7c422e67915" alt="Webhook Secret" width="1121" height="381" data-path="images/webhook-copy-secret.png" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=98774198f045958e76abb5f4fd55b9b0 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=09824e78d96ee2cc4d7e4977b0ef6155 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=bc852c8d02a83cb5e0bebc9e7780d10c 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=57a41517e1c53b49eeeb094a56b8443b 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b56406d946878efe0ebf41cd9107153b 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/webhook-copy-secret.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a13ef2f3c87bc252504e43d0396ced90 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>

## Handle webhook events

Set up a webhook route to handle the selected events:

```typescript app/api/webhook/whop/route.ts
import { makeWebhookValidator, type PaymentWebhookData } from "@whop/api";
import { after } from "next/server";

const validateWebhook = makeWebhookValidator({
  webhookSecret: process.env.WHOP_WEBHOOK_SECRET,
});

export async function POST(request: Request) {
  // Validate the webhook to ensure it's from Whop
  const webhook = await validateWebhook(request);

  // Handle the webhook event
  if (webhook.action === "payment.succeeded") {
    after(handlePaymentSucceededWebhook(webhook.data));
  }

  // Make sure to return a 2xx status code quickly. Otherwise the webhook will be retried.
  return new Response("OK", { status: 200 });
}

async function handlePaymentSucceededWebhook(data: PaymentWebhookData) {
  const { id, user_id, subtotal, amount_after_fees, metadata, ... } = data;

  // ...
}
```

## Test webhook events

You can send dummy webhook events to your endpoint for testing purposes.

<Steps>
  <Step title="Open the test webhook popup">
    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=40bd669d9a190db0eb78378aecdfeaad" alt="Test Webhook Popup" width="721" height="354" data-path="images/test-webhook-dropdown.png" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=e55ccc5f5360a332a686259ffe930332 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=56cf141db2f6a89db8e4eb7211322968 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a83b51f087126a932e1f0cceeb26eb77 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b387eecdaf12c91f87cf5cf40f7bdbb8 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=2820b61f9331a2a9db96971bc1fb3074 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-dropdown.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=294ed75af22049d847c6a8255ab8c56e 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Select and send the event you want to test">
    <Frame>
            <img src="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=6f023e619faa1a14557787c04f0091d8" alt="Test Webhook" width="697" height="353" data-path="images/test-webhook-send-event.png" srcset="https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=280&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=b5b04945716b0a3c18678af407c2c98f 280w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=560&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=a99be20f1d28f30b0ea60b68dfd2ed8f 560w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=840&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=43bfd49e82a5aa06a492152a559826ad 840w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=1100&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=feaec89c6b4b4b2c7c26aa33b0fe3c11 1100w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=1650&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=d1d0fcee4ec74675e2a520d5db9b6dd9 1650w, https://mintcdn.com/whop/RLIxcN4GVU-CLB5B/images/test-webhook-send-event.png?w=2500&fit=max&auto=format&n=RLIxcN4GVU-CLB5B&q=85&s=7ba34a40413317086fb602581548af21 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>


# Connect to websocket
Source: https://docs.whop.com/apps/features/websocket-guide

Learn how to implement real-time features using Whop's websocket API

You can connect to the websocket from your client side frontend code running in the iFrame.

## Client Setup

### React

When using react, it is recommended to use the `WhopWebsocketProvider` provider from the `@whop/react` package to connect to the websocket.

1. Mount the `WhopWebsocketProvider` provider:

   ```tsx app/layout.tsx
   import { WhopWebsocketProvider } from "@whop/react";
   import { handleAppMessage } from "@/lib/handle-websocket-message";

   export default function Layout({ children }: { children: React.ReactNode }) {
     return (
       <WhopWebsocketProvider
         // optional, you can join a specific experience channel (ie, the one you are currently viewing).
         joinExperience="exp_XXXX"
         // optional, you can join a custom channel.
         joinCustom="some_custom_channel"
         // optional, a callback that is called when an app message is received. you can also use the `useOnWebsocketMessage` hook to handle messages.
         onAppMessage={handleAppMessage}
       >
         {children}
       </WhopWebsocketProvider>
     );
   }
   ```

2. Handle app messages:

   ```tsx lib/handle-websocket-message.tsx
   export function handleAppMessage(message: proto.common.AppMessage) {
     console.log("Received app message:", message);

     // message.isTrusted is true if and only if the message was sent from your server with your private app API key.

     // message.json is the JSON string you sent from your server / client.

     // if you sent the message from the client using websocket.broadcast,
     // message.fromUserId will include the user id of the user who sent the message.
   }

   // You can also handle messages using the `useOnWebsocketMessage` hook.
   export function MyNestedReactComponent() {
     const [state, setState] = useState<string>("");
     useOnWebsocketMessage((message) => {
       setState(message.json);
     });
     return <div>{state}</div>;
   }
   ```

3. Handle connection status changes:

   ```tsx
   import { useWebsocketStatus } from "@whop/react";

   // inside of a component
   const connectionStatus = useWebsocketStatus();
   ```

### Other frameworks

Alternatively, you can create the websocket client using the `@whop/api` package in any framework.

1. Create the websocket client:

   ```typescript
   import { WhopClientSdk } from "@whop/api";

   const whopApi = WhopClientSdk();

   const websocket = whopApi.websockets.client({
     joinExperience: "exp_XXXX", // optional, you can join a specific experience channel (ie, the one you are currently viewing).
     joinCustom: "some_custom_channel", // optional, you can join a custom channel.
   });
   ```

2. Add event handlers for messages:

   ```typescript
   websocket.on("appMessage", (message) => {
     console.log("Received custom message:", message);

     // message.isTrusted is true if and only if the message was sent from your server with your private app API key.

     // message.json is the JSON string you sent from your server / client.

     // if you sent the message from the client using websocket.broadcast,
     // message.fromUserId will include the user id of the user who sent the message.
   });
   ```

3. Handle connection status changes:

   ```typescript
   websocket.on("connectionStatus", (status) => {
     console.log("Websocket Status Updated:", status);
   });

   websocket.on("connect", () => {
     console.log("Websocket Connected");
   });

   websocket.on("disconnect", () => {
     console.log("Websocket Disconnected");
   });
   ```

4. Connect to the websocket and start receiving events:

   ```typescript
   websocket.connect();
   ```

5. *Optional:* Disconnect from the websocket:

   ```typescript
   websocket.disconnect();
   ```

## Send messages from the client

You can send messages from the client to the server by using the `websocket.broadcast` or `useBroadcastWebsocketMessage` function.

1. Create a websocket client as above.

2. Send a custom message via websocket.

<CodeGroup>
  ```tsx React
  import { useBroadcastWebsocketMessage } from "@whop/react";

  export function SendMessageExample() {
    const broadcast = useBroadcastWebsocketMessage();

    function sendMessage () {
       broadcast({
          message: JSON.stringify({ hello: "world" }),
          target: "everyone",
       });
    }

    return <button onClick={sendMessage}>Send Message</button>
  }

  ```

  ```typescript Other frameworks
  // make sure you are connected by calling `websocket.connect()`

  websocket.broadcast({
    message: JSON.stringify({ hello: "world" }),
    target: "everyone",
  });
  ```
</CodeGroup>

<Note>
  The target field is the same as the one you would pass to
  `whopApi.websockets.sendMessage` on the server.
</Note>

## Send messages from your server

You can broadcast trusted websocket messages from your server to connected clients by using the `whopApi.websockets.sendMessage` function.

1. Construct an instance of the whop server sdk and pass your API key:

   ```typescript
   import { WhopServerSdk } from "@whop/api";

   const whopApi = WhopServerSdk({
     appApiKey: process.env.WHOP_API_KEY,
     appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
   });
   ```

2. Send a custom string message via websocket.

   ```typescript
   // Send to all users currently on your app across all experiences / views.
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: "everyone",
   });

   // send to all users currently on this experience
   // (only works if the experience belongs to your app)
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { experience: "exp_XXXX" },
   });

   // create a custom channel that your websocket client can subscribe to.
   // Only works if when connecting on the client, you pass the same custom channel name.
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { custom: "some_custom_channel" },
   });

   // send to a specific user on your app
   whopApi.websockets.sendMessage({
     message: JSON.stringify({ hello: "world" }),
     target: { user: "user_XXXX" },
   });
   ```

## Receive messages on your server

<Info>
  Before you start, make sure you are using NodeJS 22.4 or higher, or Bun to run
  your server.
</Info>

Use the server websocket API to receive events such as chat messages as forum posts for a particular user on your server.
You can use these events to build real-time apps such as chat bots and AI-agents that react to events on the platform.

1. Construct (or reuse) an instance of the whop server sdk and pass your API key:

   ```typescript
   import { WhopServerSdk } from "@whop/api";

   const whopApi = WhopServerSdk({
     appApiKey: process.env.WHOP_API_KEY,
     appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
   });
   ```

2. Create your websocket client and add handlers for messages / status changes:

   ```typescript
   const websocket = whopApi
     // Pass the user id of the user you want to receive events for
     .withUser("user_v9KUoZvTGp6ID")
     // Construct the websocket client
     .websockets.client();
   ```

3. Add event handlers for messages:

   ```typescript
   websocket.on("message", (message) => {
     console.log("Received Message:", message);

     const chatMessage = message.feedEntity?.dmsPost;
     if (chatMessage) {
       // handle the chat message
     }

     const forumPost = message.feedEntity?.forumPost;
     if (forumPost) {
       // handle the forum post
     }
   });
   ```

4. Add event handlers for status changes (same as client API):

   ```typescript
   websocket.on("connectionStatus", (status) => {
     console.log("Websocket Status Updated:", status);
   });

   // Or you can also listen to the connect and disconnect events:
   websocket.on("connect", () => {
     console.log("Websocket Connected");
   });

   websocket.on("disconnect", () => {
     console.log("Websocket Disconnected");
   });
   ```

5. Connect to the websocket and start receiving events:

   ```typescript
   websocket.connect();
   ```

6. *Optional:* Disconnect from the websocket:

   ```typescript
   websocket.disconnect();
   ```


# Get an API key
Source: https://docs.whop.com/apps/get-api-key

All requests to Whop APIs are managed using a secure API key.

1. Go to [https://whop.com/dashboard/developer/](https://whop.com/dashboard/developer/).
2. Click the Create App button.
3. Give your app a name and click the Create button.
4. Copy the API key from the `Environment variables` section and use it in your code.

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=652f227e2281a16d6fcd4acd00f12b47" alt="How to create an app and get API keys" width="800" height="450" data-path="how-to-videos/how-to-make-app-and-get-keys.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=687e6a288354ba774ae76564ebbcacca 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f8ebb854e56e266fcd9e4b7693ab5094 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=00e70c919b6cbd341a946f3605b6de2b 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f998db8b438d98f21bf7d47df0958e2e 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=63ff97198a4aaefa51240cc19f2bc448 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/how-to-make-app-and-get-keys.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=1f7fb274acad4b6ce2543ce17ec50eaa 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Company API (deprecated) -- V2 and V5

Legacy. Old system for when you want to automate your own creator account or sync payments/crm data to your internal systems.


# Getting started
Source: https://docs.whop.com/apps/getting-started



1. Clone our Next.js app template:

   <CodeGroup>
     ```bash Next.js
     npx create-next-app@latest whop-app -e https://github.com/whopio/whop-nextjs-app-template
     ```
   </CodeGroup>

2. Install packages:

   <CodeGroup>
     ```bash pnpm
     pnpm i
     ```

     ```bash npm
     npm i
     ```

     ```bash yarn
     yarn i
     ```
   </CodeGroup>

3. Run the app locally:

   <CodeGroup>
     ```bash pnpm
     pnpm dev
     ```

     ```bash npm
     npm run dev
     ```

     ```bash yarn
     yarn dev
     ```
   </CodeGroup>

Now open [http://localhost:3000](http://localhost:3000) and follow the directions on the page.

<CardGroup cols={2}>
  <Card title="View our tutorials" href="/tutorials" icon="book-open" color="#16a34a">
    Step-by-step guides to help you get started building with Whop.
  </Card>

  <Card title="SDK Reference" href="/sdk" icon="code" color="#16a34a">
    View available functions from our API to make calls in your app.
  </Card>
</CardGroup>


# Introduction
Source: https://docs.whop.com/apps/introduction

Build Whop apps and sell them into Whop communities with thousands of members.

# What are Whop Apps?

A Whop app is a web app that can be embedded into a whop community. These apps can be installed by any Whop creator through our [app store](https://whop.com/discover/app-store/). As the developer, you can charge for the app using several options offered by our Whop SDK. Our Whop SDK makes it easy to leverage the infrastructure of whop, to build full-blown apps in hours, not weeks.

# Examples of apps

* [AI image generator](https://whop.com/apps/app_KHqcozSfEGNyhl/install/)
* [Pay-to-play game](https://whop.com/apps/app_scKdeUGhiBtYPr/install/)
* [Chat bot](https://whop.com/apps/app_3rqpGo1tsmPDHg/install/)
* [AI car customizer](https://whop.com/apps/app_S42iB0COVVUVwO/install/)

# Why build Whop apps?

## Distribution

You will be placed in the Whop App Store. The app store is visited by tens of thousands of creators who are looking to offer more value to their communities. You focus on building the best app you can, and we will handle getting you customers.

## Authentication

Zero authentication required. Since your app is embedded into a whop, we handle all user authentication for you. You have access to a load of user information via the Whop SDK.

## Payments

Tap into the power of Whop's payment system. Accept payment with extremely low effort.

### Explore how to collect payments

<AccordionGroup>
  <Accordion title="Transaction fees">
    Enable in-app purchases and take a transaction fee on each sale. For example, selling game credits, running a watch marketplace, or letting creators sell custom t-shirts.
  </Accordion>

  <Accordion title="Installation fee">
    Charge a one-time installation fee of \$5000 and let Whop creators offer your app as a free benefit for joining their community.
  </Accordion>

  <Accordion title="Per seat">
    Charge \$1 per member inside of a whop and let creators offer your app as a free benefit for joining their community
  </Accordion>

  <Accordion title="Monthly subscription">
    Charge Whop creators \$300 per month to let their members use your app freely.
  </Accordion>

  <Accordion title="Affiliate commission">
    Let whop creators sell your app inside their community for \$29/month and earn a referral fee for every customer they bring you.
  </Accordion>
</AccordionGroup>

## Get started

<CardGroup cols={2}>
  {" "}

  <Card title="View our tutorials" href="/apps/tutorials" icon="book-open" color="#16a34a">
    Step-by-step guides to help you get started building with Whop.
  </Card>

  <Card title="Clone our starter template" href="/apps/getting-started" icon="code" color="#16a34a">
    Clone our starter template to get started building your app.
  </Card>

  <Card title="Watch a tutorial" href="https://www.youtube.com/watch?v=-zKMt3a8GJ4" icon="video" color="#16a34a" img="https://i.ytimg.com/vi/-zKMt3a8GJ4/maxresdefault.jpg">
    Watch an end to end tutorial on how to build a Whop app with Next.js.
  </Card>
</CardGroup>


# Permissions
Source: https://docs.whop.com/apps/permissions

Permissions allow you to read and write data that isn't publicly available

## Request permissions

<Steps>
  <Step title="Go to your app's permissions settings">
    1. Go to the [developer dashboard](https://whop.com/dashboard/developer)
    2. Create a new app or select an existing one
    3. Click on **Permissions**

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=514a98987e714d5a2542b3d7665020f7" alt="Permissions Settings" width="2120" height="722" data-path="images/app-permissions-settings.png" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9e74894609d45a0bbe2857c76cc00399 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=04be81b598e282fd0359d8c8793e90bc 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=201f0eac41e07e07a10f98217abf7b70 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2d20bb743be0fc48d2795ea8cb3ed381 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=9c90e5c4b1aab454c458ecf223c1aaad 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=45a5a4120e250288d1fedfbaa93b652d 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Add permissions">
    1. Click on **Add permissions**
    2. Select the permissions you want to add
    3. Confirm by clicking **Add**
  </Step>

  <Step title="Configure each permission">
    1. Write a short explanation for why your app needs the permission
    2. Choose whether the permission is required or optional

    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=93ec46a13be088ad236a7fe69f6f6ad2" alt="Permissions Justification" width="2120" height="722" data-path="images/app-permissions-settings-justification.png" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=23d4c43d6b0499fa1692f76e629dfe2d 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=1e5cec827e75f1c00dc52ff62a3a1bcf 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0425ca1719e908d865eea461537c9010 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=274d43548eb5280cb041102819a6e519 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=00b419d2d18a78ccc91b4094da7c20e0 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-justification.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=2fa42ef6af92e7ea478efa883f5ca5b5 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>

  <Step title="Save your permissions">
    <Frame>
            <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=683b42f4dcfed0eeee535d82dcce3e5f" alt="Save Permissions Settings" width="1074" height="178" data-path="images/app-permissions-settings-save.png" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=6d7cb244e974db55fb45234cfe1a8691 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=34c1a0de915a5fffd8fb13098cd7a971 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=cedf493c408909e1d3f6559c68960e68 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=f37453116023135eccdf0f4967bdebbf 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=bf281812d1cbb00d2d86cdbeee713375 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-settings-save.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=863e87616324663b894a9b698b7f22da 2500w" data-optimize="true" data-opv="2" />
    </Frame>
  </Step>
</Steps>

Creators will now need to approve the permissions you requested before installing your app:

<Frame>
    <img src="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=4b427b52f269ee6b92fcf7434069ad43" alt="Permissions Prompt" width="2176" height="2222" data-path="images/app-permissions-oauth.png" srcset="https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=280&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=97b15c6bd8a902fa6e011055cb91dfed 280w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=560&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=0849255863e79ab329fcaa466ad5b6f8 560w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=840&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=b530aea102e7985b79d2bbc689e4a45b 840w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1100&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=66504f1c4a3bde37c7689f2a49b5943b 1100w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=1650&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=478aa77dd200041800559d440e773989 1650w, https://mintcdn.com/whop/CTin6M1qeROeLXJs/images/app-permissions-oauth.png?w=2500&fit=max&auto=format&n=CTin6M1qeROeLXJs&q=85&s=24f929bb0528f88df4b5c063e7e5d737 2500w" data-optimize="true" data-opv="2" />
</Frame>

## Examples

### Get a member's email address

```ts
  const member = await whopSdk.companies.getMember({
    companyId: "biz_***",
    companyMemberId: "mber_***",
  });

  // Without member:basic:read
  // ^? null

  // With member:basic:read
  // ^? { user: { id: "user_***", email: null, ... }, ... }

  // With member:basic:read & member:email:read
  // ^? { user: { id: "user_***", email: "***@gmail.com", ... }, ... }
```

## FAQ

<AccordionGroup>
  <Accordion title="How many permissions can I request?">
    You can request as many permissions as you want.
  </Accordion>

  <Accordion title="Can I request additional permissions afterwards?">
    Yes. You can request additional permissions and the creator will be asked to re-approve them.

    <Note>
      Keep in mind that until the permissions are re-approved, API requests requiring the **newly requested** permissions will fail. Make sure to handle these errors gracefully in your code.
    </Note>
  </Accordion>
</AccordionGroup>


# Advanced
Source: https://docs.whop.com/apps/react-native/advanced



***

## Secret internal features

We are still working on polishing our api's but if you wanna build something cool RIGHT NOW, you can use some internal api's to communicate with the whop app.

<Warning>
  These function may throw. Use within a `try {} catch (e) {}` block.
</Warning>

```tsx
import { __internal_execSync, __internal_execAsync } from "@whop/react-native";

// Example usage:
__internal_execSync("routerPush", {
  path: ["some", "second", "page"],
  params: { query: "hello" },
});
// Pro tip: the `path` and `query` is passed as a prop to the `ExperienceView`
// component. This is how multi level routing works for courses currently.

// Full list of calls and types available here:

export interface PathParams {
  path: string[];
  params: Record<string, string>;
}

export interface ExecSyncApi {
  getAppApiOrigin(params: EmptyObject): { apiOrigin: string };
  cacheGet(params: { key?: string | null }): { data?: string | null };
  cacheSet(params: { key?: string | null; data?: string | null }): EmptyObject;
  routerPush(params: PathParams): EmptyObject;
  routerPop(params: EmptyObject): EmptyObject;
  routerGetCurrent(params: EmptyObject): PathParams;
  setNavigationBarData(params: {
    title?: string | null;
    description?: string | null;
  }): EmptyObject;
  routerPresentSheet(params: PathParams): EmptyObject;
  routerDismissSheet(params: EmptyObject): EmptyObject;
  routerGetCurrentSheet(params: EmptyObject): PathParams | null | undefined;
  downgradeToWebView(params: EmptyObject): EmptyObject;
  getHostAppDetails(params: EmptyObject): {
    build: string;
    version: string;
    platform: "ios" | "android" | "web";
    buildType: "appstore" | "testflight" | "debug";
  };
}

export interface ExecAsyncApi extends ExecSyncApi {
  inAppPurchase(params: { id?: string | null; planId: string }): {
    sessionId: string;
    receiptId: string;
  };
}
```


# Deploying
Source: https://docs.whop.com/apps/react-native/deploying



***

## Deploy a development build

Use the `ship` command to build and upload a development build of your app:

```bash
pnpm ship
```

* `--ios` Build for iOS
* `--android` Build for Android
* `--web` Build for web

<Info>
  Only owners and admins of the the app can see development builds.
</Info>

If you prefer to separate the build and upload steps, you can use the following commands:

```bash
pnpm build
pnpm upload
```

## Promote to production

Once you're happy with your app go to your [developer dashboard](https://whop.com/dashboard/developer) and click "Promote to production" on your latest development build.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=9e428a92b24390c4b8db785a55b59b57" alt="Promote to production" width="1614" height="538" data-path="images/promote-build.png" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=83feeeed1fbd4f0750530a247ece62ad 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=242a1b7dcdb2ad60466a8932d0c9ea91 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=0f05c5bcf54b39938c3f2d8c603bc280 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=91e775c2a85cda0b5dddb83052a41b63 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=ce5dc663214b60bf558156ea59472fe1 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/promote-build.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=f5551b1af248a39a5f9b79082e85a79d 2500w" data-optimize="true" data-opv="2" />
</Frame>

After going through an automated review, the app will be pushed instantly to all users of your app on iOS, Android, and web.

<Info>
  ProTip: the `pnpm ship` command prints out a link you can use to promote your
  app to production.
</Info>

## Rollback

From the builds screen you can also instant rollback to a previous production build which will be pushed live to all users across whop.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=c406c17b97bad3f4241749c45741b33e" alt="Rollback" width="1614" height="538" data-path="images/rollback-build.png" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=3593a5c2bcd5fbc83926ea425e655d3f 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=1349c9331cdaa319b812abeea332b769 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=2930e144d9c4a0490c7c60c36e84ef40 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=b0b2b2f0d2b70bafe4201ae9529fde2b 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=cf5001ea16c1e794a5af403b247215a1 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/rollback-build.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=6f8d9b907f47ef08ac59839e98c2a2cd 2500w" data-optimize="true" data-opv="2" />
</Frame>


# Fetching Data
Source: https://docs.whop.com/apps/react-native/fetching-data



***

## Whop SDK

The whop sdk is available for use in the react native app out of the box. Using this you can fetch data within the scope of the current user.

<Info>
  We recommend using the [useQuery](https://tanstack.com/query/latest/docs/framework/react/reference/useQuery) hook from [@tanstack/react-query](https://tanstack.com/query/latest) to fetch
  data.
</Info>

```tsx
import { whopSdk } from "@whop/react-native";
import { useQuery } from "@tanstack/react-query";

export function MyComponent() {
  const { data: user } = useQuery({
    queryKey: ["user"],
    queryFn: () => whopSdk.users.getCurrentUser(),
  });

  return <Text>{user?.name}</Text>;
}
```

<Warning>
  Some operations are only available on the server, so make sure you call those from your api. Check out the [SDK reference](/sdk/installation) to see which ones have the "server only" flag.
</Warning>

## Making authenticated requests

You can make authenticated requests to your API by using the same proxy infrastructure used for existing web apps.

1. Set your API origin as the `Base URL` in the [developer dashboard](https://whop.com/dashboard/developer)

<Frame>
    <img src="https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=67da3bca3f3a091176ced262b083b3ae" alt="Base URL" width="1346" height="264" data-path="images/app-settings-base-url.png" srcset="https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=280&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=ccf4f95fc76df44738b3053e97a9300f 280w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=560&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=a45e8bc88a009107388904541aeac3bc 560w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=840&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=e550fe7b605d2675d4a73cb032888669 840w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=1100&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=d236a5e9edfa7753cb53e5955c15da30 1100w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=1650&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=564087d3e273528fed7d59e0bc5f47ae 1650w, https://mintcdn.com/whop/UNSo2mxrx93nOcNt/images/app-settings-base-url.png?w=2500&fit=max&auto=format&n=UNSo2mxrx93nOcNt&q=85&s=a507e6bcd85c907f69cf35f5c3c8352f 2500w" data-optimize="true" data-opv="2" />
</Frame>

2. Create your API endpoint

```ts app/api/user/route.ts
import { whopSdk } from "@/lib/whop";

export async function GET(request: Request) {
  const { userId } = await whopSdk.verifyUserToken(request.headers);

  const user = await whopSdk.users.getUser({ userId });

  return Response.json(user, { status: 200 });
}
```

See the [Set up the API client](/sdk/whop-api-client) page for how to configure the SDK.

3. Make a fetch request to your API endpoint from your react native app using the returned `apiOrigin` from `__internal_execSync("getAppApiOrigin", {})`

<Note>
  It's important to use the `apiOrigin` to make authenticated requests to your API endpoints.
</Note>

<CodeGroup>
  ```tsx TanStack Query
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function User() {
    const { data: user, isPending } = useQuery({
      queryKey: ["user"],
      queryFn: () => fetch(`${apiOrigin}/api/user`).then((res) => res.json()),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    return <Text>{user?.name}</Text>;
  }
  ```

  ```tsx SWR
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";
  import useSWR from "swr";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  const fetcher = (url: string) => fetch(url).then((r) => r.json());

  export function User() {
    const { data: user, isLoading } = useSWR(`${apiOrigin}/api/user`, fetcher);

    if (isLoading) {
      return <Text>Loading...</Text>;
    }

    return <Text>{user?.name}</Text>;
  }
  ```
</CodeGroup>

## Examples

### Check for access to an experience

<CodeGroup>
  ```tsx protected-component.tsx
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function ProtectedComponent({ experienceId }: { experienceId: string }) {
    const { data: access, isPending } = useQuery({
      queryKey: ["access", experienceId],
      queryFn: () =>
        fetch(
          `${apiOrigin}/api/access/experience?experienceId=${experienceId}`,
        ).then((res) => res.json()),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    if (!access?.hasAccess) {
      return <Text>Forbidden</Text>;
    }

    return <Text>{JSON.stringify(access)}</Text>;
  }
  ```

  ```tsx route.ts
  // app/api/access/experience/route.ts

  import { whopSdk } from "@/lib/whop";
  import { NextRequest } from "next/server";

  export async function GET(request: NextRequest) {
    const searchParams = request.nextUrl.searchParams;

    const experienceId = searchParams.get("experienceId");
    if (!experienceId) {
      return new Response("Experience ID is required", { status: 400 });
    }

    const { userId } = await whopSdk.verifyUserToken(request.headers);

    const access = await whopSdk.access.checkIfUserHasAccessToExperience({
      experienceId,
      userId,
    });

    return Response.json(access, { status: 200 });
  }
  ```
</CodeGroup>

### Check for access to a company

<CodeGroup>
  ```tsx protected-component.tsx
  import { useQuery } from "@tanstack/react-query";
  import { __internal_execSync } from "@whop/react-native";
  import { Text } from "react-native";

  const { apiOrigin } = __internal_execSync("getAppApiOrigin", {});

  export function ProtectedComponent({ companyId }: { companyId: string }) {
    const { data: access, isPending } = useQuery({
      queryKey: ["access", companyId],
      queryFn: () =>
        fetch(`${apiOrigin}/api/access/company?companyId=${companyId}`).then(
          (res) => res.json(),
        ),
    });

    if (isPending) {
      return <Text>Loading...</Text>;
    }

    if (access?.accessLevel !== "admin") {
      return <Text>Forbidden</Text>;
    }

    return <Text>{JSON.stringify(access)}</Text>;
  }
  ```

  ```tsx route.ts
  // app/api/access/company/route.ts

  import { whopSdk } from "@/lib/whop";
  import { NextRequest } from "next/server";

  export async function GET(request: NextRequest) {
    const searchParams = request.nextUrl.searchParams;

    const companyId = searchParams.get("companyId");
    if (!companyId) {
      return new Response("Company ID is required", { status: 400 });
    }

    const { userId } = await whopSdk.verifyUserToken(request.headers);

    const access = await whopSdk.access.checkIfUserHasAccessToCompany({
      companyId,
      userId,
    });

    return Response.json(access, { status: 200 });
  }
  ```
</CodeGroup>


# Installation
Source: https://docs.whop.com/apps/react-native/installation

Create a new Whop React Native app.

***

## System requirements

Before you begin, make sure your system meets the following requirements:

* [Node.js 22](https://nodejs.org/) or later.
* [pnpm 9.15](https://pnpm.io/) or later.

To check run `node -v` and `pnpm -v`.

***

## Create your app

The easiest way to create a new Whop React Native app is by using `create @whop/react-native`, which will set up a new project for you.

```bash
pnpm create @whop/react-native@latest
```

## Preview your app

To preview your app you will need to deploy a [development build](/apps/react-native/deploying#deploy-a-development-build) and install your app into your whop.

<Note>
  Every time you want to preview new changes, you will need to deploy a new development build.
</Note>

### 1. Configure environment variables

Create a `.env.local` file in the root directory and fill in your values:

```
WHOP_API_KEY=your_api_key
NEXT_PUBLIC_WHOP_APP_ID=your_app_id
NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_agent_user_id
NEXT_PUBLIC_WHOP_COMPANY_ID=your_company_id
```

Get these credentials from the [Whop Developer Dashboard](https://whop.com/dashboard/developer):

1. Go to the Whop Developer Dashboard
2. Create a new app or select an existing one
3. Copy the environment variables from the app settings

### 2. Deploy a development build

Use the `ship` command to build and upload a development build of your app:

```bash
pnpm ship
```

<Info>
  The `ship` command will NOT push the app to existing users of your app. It is
  safe to run on existing web apps too, meaning you can progressively migrate
  your app to react native.
</Info>

See the [Deploying](/apps/react-native/deploying) page for more information.

### 3. Preview on your phone

Use the `preview` command to install your app into your whop and preview it on your phone:

```bash
pnpm preview
```

<Warning>
  To preview your app, you must **SHAKE YOUR PHONE**. This enables "dev mode" and allows you to see the latest "non production" react native builds.
</Warning>

See the [Troubleshooting](/apps/react-native/troubleshooting) page if you're having issues.


# Project Structure
Source: https://docs.whop.com/apps/react-native/project-structure



***

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=2252ed3982bb73023b2ccc70204071a0" alt="Project Structure" width="2080" height="1152" data-path="images/react-native-project-structure.png" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=896706681cc48e47c731089dbe383d2a 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=61419ab654081eee737b8ee4474fec82 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=cc78e724ac38561f5ae39913449646c4 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=c62a4ad6ebd739addb8421e0b9244e18 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=4e66efeea98ab6ae0b9062494a2c03b3 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-project-structure.png?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=e13f8dc08819a46e2e94fb54edadffeb 2500w" data-optimize="true" data-opv="2" />
</Frame>

* `src/views` contains the different views that make up your app.
* `src/views/experience-view.tsx` is the entry point for your app's experience view.
* `src/views/dashboard-view.tsx` is the entry point for your app's dashboard view.
* `src/views/discover-view.tsx` is the entry point for your app's discover view.


# Styling
Source: https://docs.whop.com/apps/react-native/styling



***

## Color themes

React native by default exposes a `useColorScheme` hook that you can use to get the current color scheme of the device. This works correctly out of the box on whop react native apps too!.

While we are still building our UI kit, you can use the following `useColors` hook as inspiration to build your own dynamic color scheme:

```bash
# Install the radix ui colors package
pnpm i @radix-ui/colors
```

```tsx Usage
function MyComponent() {
  const colors = useColors();

  return <View style={{ backgroundColor: colors.gray1 }} />;
}
```

Hook implementation to copy:

```tsx use-colors.ts expandable
import {
  amber,
  amberA,
  amberDark,
  amberDarkA,
  blue,
  blueA,
  blueDark,
  blueDarkA,
  gray,
  grayA,
  grayDark,
  grayDarkA,
  green,
  greenA,
  greenDark,
  greenDarkA,
  red,
  redA,
  redDark,
  redDarkA,
} from "@radix-ui/colors";
import { useColorScheme } from "react-native";

export function useColors() {
  const colorScheme = useColorScheme();
  const isDark = colorScheme === "dark";

  // Create all the color groups
  const _grayA = isDark ? grayDarkA : grayA;
  const _gray = isDark ? grayDark : gray;
  const _blueA = isDark ? blueDarkA : blueA;
  const _blue = isDark ? blueDark : blue;
  const _redA = isDark ? redDarkA : redA;
  const _red = isDark ? redDark : red;
  const _amberA = isDark ? amberDarkA : amberA;
  const _amber = isDark ? amberDark : amber;
  const _greenA = isDark ? greenDarkA : greenA;
  const _green = isDark ? greenDark : green;

  // Merge them
  return {
    transparent: "transparent" as const,
    ..._grayA,
    ..._gray,
    ..._blueA,
    ..._blue,
    ..._redA,
    ..._red,
    ..._amberA,
    ..._amber,
    ..._greenA,
    ..._green,
  };
}
```


# Troubleshooting
Source: https://docs.whop.com/apps/react-native/troubleshooting



***

### I can't preview my app

Make sure you installed the app into your whop and enabled dev mode by **shaking your phone**.

<Frame>
    <img src="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=f240d70ac15b40dc48c0723a70401fb9" alt="Dev mode" width="586" height="313" data-path="images/react-native-dev-mode.jpg" srcset="https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=280&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=61c0cbb8afc95f83fc1fabff9c6d9f3a 280w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=560&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=9a1467e3f549da360c23438d6b61817d 560w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=840&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=66148c0f31051ba567d70afc60a13bd5 840w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=1100&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=3ecb7fab1baaca1661c87edd454da7f6 1100w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=1650&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=64ef377e732085bdf0d522132a0e6c85 1650w, https://mintcdn.com/whop/qLWy5VwqPyIy4SPF/images/react-native-dev-mode.jpg?w=2500&fit=max&auto=format&n=qLWy5VwqPyIy4SPF&q=85&s=09f220b9d26c7d08055682cc2de661b4 2500w" data-optimize="true" data-opv="2" />
</Frame>

### Command "preview" not found

If you're missing the `preview` command, you can instead use:

```bash
whop-react-native install
```


# Using Libraries
Source: https://docs.whop.com/apps/react-native/using-libraries



***

## Native Integration

The beauty of react native is its rich integration with native platform features and APIs.

The Whop app exposes a set of common powerful native building blocks your can directly use in your react native app.

Features like video playback, camera access, native gestures and animations are available already on mobile platforms.
Web support provides access to browser APIs and web-specific features.
We plan on expanding the capabilities to allow many different kinds of apps to be built!

You can use these libraries pinned to these version:

* `react-native-nitro-modules@0.26.3`
* `react-native-video@6.10.2`
* `@d11/react-native-fast-image@8.10.0`
* `react-native-svg@15.12.0`
* `react-native-webview@13.15.0`
* `react-native-reanimated@3.18.0`
* `react-native-gesture-handler@2.27.2`
* `react-native-haptic-feedback@2.3.3`
* `react-native-vision-camera@4.7.1`
* `react-native-safe-area-context@5.5.2`
* `lottie-react-native@7.3.2`
* `react-native-image-picker@8.2.1`


# null
Source: https://docs.whop.com/apps/tutorials



Welcome to Whop's tutorials section! Here you'll find detailed, step-by-step guides to help you build various types of applications using Whop's API.

## Getting Started

More tutorials coming soon! Check back regularly for new content.

<CardGroup cols={2}>
  <Card title="Sell an AI image generator to creators" href="/apps/tutorials/ai-image-generator" icon="webhook" color="#8b5cf6">
    Build a ChatGPT-powered image generator and creators will be able to install it to their whops.
  </Card>

  <Card title="Build a chat bot agent" href="/apps/tutorials/chat-bot" icon="robot" color="#0ea5e9">
    Learn how to build an AI chatbot that can respond to DMs using Whop's API.
  </Card>

  <Card title="Sell an AI car customizer" icon="car" color="#16a34a" href="/apps/tutorials/ai-car-customizer">
    Build an app to customize cars with AI. Charge users to customize their cars.
  </Card>

  <Card title="Build a creator led betting game" href="https://www.youtube.com/watch?v=-zKMt3a8GJ4" icon="video" color="#16a34a" img="https://i.ytimg.com/vi/-zKMt3a8GJ4/maxresdefault.jpg">
    Watch an end to end tutorial on how to build a creator led betting game with Next.js and Whop APIs.
  </Card>
</CardGroup>


# AI car customizer
Source: https://docs.whop.com/apps/tutorials/ai-car-customizer

Build a GPT-powered car modification app and creators will be able to install it to their whops

<Tip>
  This tutorial was submitted by
  [@AbdullahZHD](https://whop.com/@abdullahzahid), a member of the Whop
  Developers community. [Submit your own tutorial](https://whop.com/developers)
  and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a car modification AI app using Next.js, Shadcn UI, and OpenAI.

View the final product [here](https://whop.com/apps/app_S42iB0COVVUVwO/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone the Car Modification AI repository:

```bash
git clone https://github.com/AbdullahZHD/car-modification-ai-whop
cd car-modification-ai-whop
```

Install dependencies:

<CodeGroup>
  ```bash pnpm
  pnpm i
  ```

  ```bash npm
  npm i
  ```

  ```bash yarn
  yarn i
  ```
</CodeGroup>

## 2. Get your Whop API credentials

<Steps>
  <Step title="Create a Whop App">
    1. Go to [https://whop.com/dashboard](https://whop.com/dashboard)
    2. Navigate to **Developer**
    3. Click the **Create App** button
    4. Give your app a name like "Car Modification AI"
    5. Click **Create**
  </Step>

  <Step title="Get your API Key, Agent User ID, and App ID">
    After creating your app:

    1. Copy the **App API Key** - you'll need this for `WHOP_API_KEY`
    2. Copy the **Agent User ID** - you'll need this for `WHOP_AGENT_USER_ID`
    3. Copy the **App ID** - you'll need this for `WHOP_APP_ID`

    <Note>
      The Agent User ID is what allows your app's agent to send post the results in forum.
    </Note>
  </Step>
</Steps>

## 3. Get OpenAI API Key

<Steps>
  <Step title="Create OpenAI Account">
    1. Go to [platform.openai.com](https://platform.openai.com/)
    2. Click **Sign In** or **Sign Up**
    3. Complete the registration process
  </Step>

  <Step title="Get API Key">
    1. Go to **API Keys** in the dashboard
    2. Click **Create Key**
    3. Give it a name like **"Car Modification AI"**
    4. Copy the API key - you'll need this for `OPENAI_API_KEY` (ensure you have balance/payment method)
  </Step>
</Steps>

## 5. Configure Environment Variables

<Steps>
  <Step title="Create local environment file">
    ```bash
    touch .env.local
    ```
  </Step>

  <Step title="Fill in Required Variables">
    Open `.env` in your text editor and fill in these required fields:

    ```env
    # AI Service Configuration (Required)
    OPENAI_API_KEY=your_openai_api_key

    # Whop Integration (Required)
    WHOP_API_KEY=your_whop_api_key_here
    NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_whop_agent_user_id_here
    NEXT_PUBLIC_WHOP_APP_ID=your_whop_app_id_here
    ```
  </Step>
</Steps>

## 7. Install Whop Dev Proxy

For Whop integration to work in development, you need to install the Whop dev proxy globally:

```bash
npm install @whop-apps/dev-proxy -g
```

<Note>
  The Whop dev proxy is required for the iframe integration to work properly
  during development.
</Note>

## 8. Run the Application

**Lets start the Web Server with Whop Proxy**.
Run this command to start both the Whop proxy and Next.js development server:

```bash
whop-proxy --command 'npx next dev --turbopack'
```

You should see output indicating both the proxy and Next.js are running. The web app will be available at [http://localhost:3000](http://localhost:3000)

{" "}

<Warning>
  Do NOT use `npm run dev` alone - it won't include the Whop proxy and the
  iframe integration won't work!
</Warning>

## 9. Configure App Settings in Whop

**Important**: You must configure these settings BEFORE installing the app to your community.

<Steps>
  <Step title="Set Base URL and App Path">
    1. Go to your Whop app dashboard → **Developer** → Your App
    2. In the **Hosting** section, configure:
       * **Base URL**: `http://localhost:3000/`
       * **App path**: `/experiences/[experienceId]`
    3. Click **Save** to update the settings

    <Warning>
      If you skip this step, the app installation and iframe integration won't work properly!
    </Warning>
  </Step>
</Steps>

## 10. Accessing the app (locally)

<Steps>
  <Step title="Access the application via Whop iframe">
    1. After installing the app, click **Open Whop** in the top right 2. When
       redirected to Whop, click the **Settings** button 3. Change the dropdown
       from **Production** to **Localhost** 4. Choose your port (usually **3000**)
    2. You'll now see the app running in Localhost.
  </Step>
</Steps>

## 11. Deploy to Vercel

Now let's deploy your car modification AI app to production so users can access it from anywhere.

**Push your code to GitHub**

First, commit all your changes and push to GitHub:

```bash
git add .
git commit -m "Complete car modification AI app"
git remote add origin https://github.com/your-username/your-repo.git
git branch -M main
git push -u origin main
```

**Create and deploy on Vercel**

<Steps>
  <Step title="Create a new project on Vercel">
    Go to [vercel.com](https://vercel.com) and click "New Project"
  </Step>

  <Step title="Import your GitHub repository">
    Connect your GitHub account and import the repository containing your car
    modification app
  </Step>

  <Step title="Add environment variables">
    In the Vercel deployment settings, add all your environment variables:

    ```env
    # AI Service Configuration (Required)
    OPENAI_API_KEY=your_openai_api_key

    # Whop Integration (Required)
    WHOP_API_KEY=your_whop_api_key_here
    NEXT_PUBLIC_WHOP_AGENT_USER_ID=your_whop_agent_user_id_here
    NEXT_PUBLIC_WHOP_APP_ID=your_whop_app_id_here
    ```
  </Step>

  <Step title="Deploy">Click "Deploy" and wait for the build to complete</Step>

  <Step title="Copy your Vercel URL">
    Once deployed, copy your production URL (e.g., `https://your-app.vercel.app`)
  </Step>
</Steps>

**Update your Whop app settings**

<Steps>
  <Step title="Open Whop Developer Settings">
    Go to Whop dashboard and navigate to your app's settings in the developer panel
  </Step>

  <Step title="Update Base URL">
    In the "App Settings" section, change the Base URL from
    `http://localhost:3000` to your Vercel URL: `https://your-app.vercel.app`
  </Step>

  <Step title="Save and test">
    Save the changes and test your app installation to ensure production mode is working (by switching to **Production** in the iframe)
  </Step>
</Steps>

<Warning>
  **Vercel Timeout Limitation**: Vercel functions automatically timeout after 60
  seconds on a hobby account. AI image generation might take longer than 60
  seconds, which may cause errors. You can upgrade to a paid Vercel account to
  extend timeout limits.
</Warning>

## 12. Install to Your Whop Community

<Steps>
  <Step title="Install the App">
    1. Go to your Whop company dashboard 2. Navigate to **Settings** → **API
       keys** 3. Click on your Car Modification AI app (or whatever name you gave
       it) 4. Find and copy the **Installation Link** 5. Visit the installation
       link and grant the necessary permissions
  </Step>
</Steps>

## Troubleshooting

<AccordionGroup>
  <Accordion title="AI responses not working">
    1. Verify your OpenAI API key is correct
    2. Verify you have balance in the OpenAI Developer account
  </Accordion>

  {" "}

  <Accordion title="Expected car modification not happening">
    1. Ensure you use a high quality image with a car in it 2. Use a clear prompt,
       such as "add a spoiler to this car"
  </Accordion>

  <Accordion title="Can't access in Localhost">
    1. Make sure you're using the Whop iframe method
    2. Ensure you've set the environment to localhost with correct port
    3. Check that your Whop App API key is correct, and all other environment variables as well
  </Accordion>
</AccordionGroup>

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/AbdullahZHD/car-modification-ai-whop)
* DM [@AbdullahZHD on Whop](https://whop.com/@abdullahzahid)

***


# AI image generator
Source: https://docs.whop.com/apps/tutorials/ai-image-generator

Build a ChatGPT-powered image generator and creators will be able to install it to their whops.

<Tip>
  This tutorial was submitted by [@s](https://whop.com/@s), a member of the Whop
  Developers community. [Submit your own tutorial](https://whop.com/developers)
  and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a ChatGPT-powered image generator using Next.js, Shadcn UI, and OpenAI.

View the final product [here](https://whop.com/apps/app_KHqcozSfEGNyhl/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone our Next.js app template:

```bash
npx create-next-app@latest ai-image-generator -e https://github.com/whopio/whop-nextjs-app-template
```

Enter the project directory:

```bash
cd ai-image-generator
```

Install dependencies:

<CodeGroup>
  ```bash pnpm
  pnpm i
  ```

  ```bash npm
  npm i
  ```

  ```bash yarn
  yarn i
  ```
</CodeGroup>

Run the app locally:

<CodeGroup>
  ```bash pnpm
  pnpm dev
  ```

  ```bash npm
  npm run dev
  ```

  ```bash yarn
  yarn dev
  ```
</CodeGroup>

Now open [http://localhost:3000](http://localhost:3000) and follow the directions on the page.

## 2. Start developing your app

After following the instructions on the page, you'll be able to start developing your app. You should have:

* Created your app
* Set up your `.env.local` file
* Installed your app into your whop

Ensure you're developing in `localhost` mode. See example:

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7fd92f9085dd801ae8380a3e8b97ee1b" alt="How to change to localhost mode" width="800" height="538" data-path="how-to-videos/change-to-localhost-mode.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7c98ac44fb14babe8a8f4d881f5f37b3 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=5353e841b7154274d19e40a8e6b5a67e 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6a2a173df7e56843266724630f3b5e66 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=69a6b998270ad9d01e0a86d79d5db13b 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=38b4d9c28a47e7f41fa8966d9d4b9fba 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/change-to-localhost-mode.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=773b6c4b09431596688dae5d5bf7c17b 2500w" data-optimize="true" data-opv="2" />
</Frame>

## 3. Set up your database

### Create a Supabase database

Go to [Supabase](https://supabase.com) and create a new account if you don't have one

Create a new project and copy your database password

### Set up Prisma

Now, let's set up Prisma in your project:

<CodeGroup>
  ```bash pnpm
  pnpm add prisma @prisma/client
  pnpm prisma init
  ```

  ```bash npm
  npm install prisma @prisma/client
  npx prisma init
  ```

  ```bash yarn
  yarn add prisma @prisma/client
  yarn prisma init
  ```
</CodeGroup>

The `prisma init` command will create a new `prisma` directory with a `schema.prisma` file

Now, go copy your database connection strings from Supabase for Prisma to use. Then paste the values in your `.env.local` file.

Replace your password with `[YOUR-PASSWORD]`

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ff7122b8350b2f3f234a30705c3f2d71" alt="How to setup Prisma with Supabase" width="800" height="504" data-path="how-to-videos/prisma-setup.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6b0b3f859ff0a728f9378a2fcaff26ce 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=026e1420c2f4bbf5313f141a9612572f 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7914d1dbc4d60a7092824fe7212024ea 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8d1d5c327d9cc956b0a2a9cdcca363e9 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d4e2b62292fdf478ce7c038a24bee0d4 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/prisma-setup.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c503321cf5ce53ea950e6f0b40ed87de 2500w" data-optimize="true" data-opv="2" />
</Frame>

Replace the contents of `prisma/schema.prisma` with:

```prisma prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Experience {
  id           String @unique
  prompt       String
}
```

Now generate your database and Prisma client:

> These are custom scripts we defined in the package.json file to load your env from .env.local and run the prisma commands. If you want to use the native prisma CLI, you'll need to move your `.env.local` to `.env` and run the commands manually.

<CodeGroup>
  ```bash pnpm
  pnpm prisma:generate
  pnpm prisma:db:push
  ```

  ```bash npm
  npm run prisma:generate
  npm run prisma:db push
  ```

  ```bash yarn
  yarn prisma:generate
  yarn prisma:db:push
  ```
</CodeGroup>

## 4. Install additional dependencies

### Add the required packages

<CodeGroup>
  ```bash pnpm
  pnpm add openai sharp react-dropzone @radix-ui/react-slot gsap
  ```

  ```bash npm
  npm install openai sharp react-dropzone @radix-ui/react-slot gsap
  ```

  ```bash yarn
  yarn add openai sharp react-dropzone @radix-ui/react-slot gsap
  ```
</CodeGroup>

### Install a Shadcn button

<CodeGroup>
  ```bash pnpm
  pnpm dlx shadcn@latest add button
  ```

  ```bash npm
  npx shadcn@latest add button
  ```

  ```bash yarn
  yarn shadcn@latest add button
  ```
</CodeGroup>

### Add your OpenAI API key

Add to your `.env.local`:

```env .env.local
# OpenAI API Key for image generation
OPENAI_API_KEY=your_openai_api_key_here
```

## 5. Create components

### `<ImageUploader>`

This component handles image upload and generation.

```typescript app/components/image-uploader.tsx [expandable]
"use client";

import { Button } from "@/components/ui/button";
import gsap from "gsap";
import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";
import Image from "next/image";
import { useCallback, useEffect, useRef, useState } from "react";
import { useDropzone } from "react-dropzone";

gsap.registerPlugin(DrawSVGPlugin);

function Loader() {
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    if (!svgRef.current) return;

    const mid = gsap.utils.toArray("#mid *").reverse();

    const fatTl = gsap.timeline();
    fatTl.fromTo(
      "#fat *",
      {
        drawSVG: "0% 20%",
      },
      {
        drawSVG: "40% 69%",
        stagger: {
          each: 0.05,
          repeat: -1,
          yoyo: true,
        },
        duration: 0.75,
        ease: "sine.inOut",
      }
    );

    const midTl = gsap.timeline();
    midTl.fromTo(
      mid,
      {
        drawSVG: "0% 20%",
      },
      {
        drawSVG: "56% 86%",
        stagger: {
          each: 0.08,
          repeat: -1,
          yoyo: true,
        },
        duration: 0.81,
        ease: "sine.inOut",
      }
    );

    const thinTl = gsap.timeline();
    thinTl.fromTo(
      "#thin *",
      {
        drawSVG: "20% 51%",
      },
      {
        drawSVG: "40% 80%",
        stagger: {
          each: 0.092,
          repeat: -1,
          yoyo: true,
        },
        duration: 1.4,
        ease: "sine.inOut",
      }
    );

    const mainTl = gsap.timeline();
    mainTl.add([fatTl, midTl, thinTl], 0);

    return () => {
      mainTl.kill();
    };
  }, []);

  return (
    <div className="w-full h-full flex items-center justify-center">
      <svg
        ref={svgRef}
        id="mainSVG"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 800 600"
        className="w-100 h-100"
        role="img"
        aria-label="Loading animation"
      >
        <title>Loading animation</title>

        <linearGradient
          id="grad1"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="200"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#3D28F7" />

          <stop offset="1" stopColor="#FF3C20" />
        </linearGradient>

        <linearGradient
          id="grad2"
          x1="393.05"
          y1="391.01"
          x2="393.05"
          y2="247.71"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#F72785" />

          <stop offset="1" stopColor="#FFEE2A" />
        </linearGradient>

        <linearGradient
          id="grad3"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="200"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#FF6820" />

          <stop offset="1" stopColor="#D1FE21" />
        </linearGradient>

        <linearGradient
          id="grad4"
          x1="393.05"
          y1="400"
          x2="393.05"
          y2="250"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0" stopColor="#35AAF9" />

          <stop offset="1" stopColor="#993BDC" />
        </linearGradient>

        <g>
          <g
            id="bg"
            stroke="url(#grad3)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
          >
            <path d="M594.5,250v-.29L594.6,350" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 250 204.5 350.29 204.5 350" />
          </g>

          <g
            id="thin"
            stroke="url(#grad1)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="2"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>

          <g
            id="mid"
            stroke="url(#grad2)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="4"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>

          <g
            id="fat"
            stroke="url(#grad4)"
            fill="none"
            strokeLinecap="round"
            strokeMiterlimit="10"
            strokeWidth="7"
          >
            <path d="M594.6,350l-.1-100.29V250" />

            <line x1="580.5" y1="390" x2="580.32" y2="210" />

            <line x1="565.5" y1="415" x2="565.28" y2="185" />

            <line x1="550.5" y1="434" x2="550.24" y2="166" />

            <line x1="535.5" y1="449" x2="535.22" y2="151" />

            <line x1="520.5" y1="462" x2="520.2" y2="138" />

            <line x1="505.5" y1="472" x2="505.18" y2="128" />

            <line x1="490.5" y1="480" x2="490.16" y2="120" />

            <line x1="475.5" y1="487" x2="475.14" y2="113" />

            <line x1="460.5" y1="492" x2="460.14" y2="108" />

            <line x1="445.5" y1="496" x2="445.12" y2="104" />

            <line x1="430.5" y1="499" x2="430.12" y2="101" />

            <line x1="415.5" y1="501" x2="415.12" y2="99" />

            <line x1="400.5" y1="501" x2="400.12" y2="99" />

            <line x1="385.5" y1="501" x2="385.12" y2="99" />

            <line x1="370.5" y1="499" x2="370.12" y2="101" />

            <line x1="355.5" y1="496" x2="355.12" y2="104" />

            <line x1="340.5" y1="492" x2="340.14" y2="108" />

            <line x1="325.5" y1="487" x2="325.14" y2="113" />

            <line x1="310.5" y1="480" x2="310.16" y2="120" />

            <line x1="295.5" y1="472" x2="295.18" y2="128" />

            <line x1="280.5" y1="462" x2="280.2" y2="138" />

            <line x1="265.5" y1="449" x2="265.22" y2="151" />

            <line x1="250.5" y1="434" x2="250.24" y2="166" />

            <line x1="235.5" y1="415" x2="235.28" y2="185" />

            <line x1="220.5" y1="390" x2="220.32" y2="210" />

            <polyline points="204.5 350 204.5 350.29 204.5 250" />
          </g>
        </g>
      </svg>
    </div>
  );
}

export default function ImageUploader({
  experienceId,
}: {
  experienceId: string;
}) {
  const [image, setImage] = useState<{
    file: File;
    preview: string;
  } | null>(null);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Clean up the object URL when the image is changed
  useEffect(() => {
    const objectUrl = image?.preview;
    if (objectUrl) {
      return () => {
        URL.revokeObjectURL(objectUrl);
      };
    }
  }, [image?.preview]);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      setImage({
        file,
        preview: URL.createObjectURL(file),
      });
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!image) return;
    try {
      const response = await fetch(
        `/api/experiences/${experienceId}/generate`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: image.file,
        }
      );

      if (!response.ok) {
        throw new Error("Failed to get upload URL");
      }

      const data = await response.json();
      setGeneratedImage(data.imageUrl);
    } catch (error) {
      console.error("Error uploading image:", error);
      throw error;
    }
  };

  const handleGenerate = async () => {
    if (!image) return;
    setIsGenerating(true);
    setUploadProgress(0);
    try {
      await handleUpload();
    } catch (error) {
      console.error("Error generating image:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleReset = () => {
    setImage(null);
    setGeneratedImage(null);
    setUploadProgress(0);
  };

  if (isGenerating) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4 space-y-8">
        <div className="w-full aspect-square flex items-center justify-center">
          <Loader />
        </div>
        <div className="flex gap-4">
          <Button onClick={handleReset} variant="outline" className="flex-1">
            Cancel
          </Button>
          <Button disabled className="flex-1">
            Generating...
          </Button>
        </div>
      </div>
    );
  }

  const displayImage = generatedImage || image?.preview;

  return (
    <div className="w-full max-w-2xl mx-auto p-4 space-y-8">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
            ${
              isDragActive
                ? "border-blue-500 bg-blue-50"
                : "border-gray-300 hover:border-blue-400"
            }`}
      >
        <input {...getInputProps()} capture="environment" />
        {displayImage ? (
          <div className="relative w-full aspect-square">
            <Image
              src={displayImage}
              alt="Uploaded image"
              fill
              className="object-contain rounded-lg"
            />
          </div>
        ) : (
          <div className="space-y-4">
            <div className="text-4xl">📸</div>
            <p className="text-gray-600">
              {isDragActive
                ? "Drop the image here..."
                : "Drag & drop an image here, or click to select"}
            </p>
            <p className="text-sm text-gray-500">Supports JPG, PNG, GIF</p>
          </div>
        )}
      </div>

      {image && (
        <div className="flex flex-col gap-4">
          {uploadProgress > 0 && uploadProgress < 100 && (
            <div className="w-full bg-gray-200 rounded-full h-2.5">
              <div
                className="bg-blue-600 h-2.5 rounded-full"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
          )}
          <div className="flex gap-4">
            <Button onClick={handleReset} variant="outline" className="flex-1">
              Reset
            </Button>
            <Button onClick={handleGenerate} className="flex-1">
              Generate Image
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
```

### `<ExperiencePrompt>`

This component displays the experience prompt and image uploader.

```typescript app/components/experience-prompt.tsx [expandable]
import type { AccessLevel } from "@whop/api";
import Link from "next/link";
import ImageUploader from "./image-uploader";
import { Button } from "./ui/button";

export default function ExperiencePrompt({
  prompt,
  accessLevel,
  experienceId,
}: {
  prompt: string;
  accessLevel: AccessLevel;
  experienceId: string;
}) {
  return (
    <div>
      <div className="flex justify-center items-center">
        <div className="text-4xl font-bold text-center">
          {prompt ? `"${prompt}"` : "Creator has not set a prompt yet."}
        </div>
      </div>
      {accessLevel === "admin" && (
        <div className="flex justify-center items-center">
          <Link href={`/experiences/${experienceId}/edit`}>
            <Button variant={"link"}>Edit prompt</Button>
          </Link>
        </div>
      )}
      {prompt ? <ImageUploader experienceId={experienceId} /> : null}
    </div>
  );
}
```

### `<EditExperiencePrompt>`

This component allows admins to edit the experience prompt.

```typescript app/components/edit-experience-prompt.tsx [expandable]
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";

export default function EditExperiencePage({
  experienceId,
}: {
  experienceId: string;
}) {
  const router = useRouter();
  const [prompt, setPrompt] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await fetch(`/api/experiences/${experienceId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        throw new Error("Failed to update experience");
      }

      router.push(`/experiences/${experienceId}`);
      router.refresh();
    } catch (error) {
      console.error("Error updating experience:", error);
      // You might want to show an error message to the user here
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Edit Prompt</h1>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="prompt"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Prompt
          </label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="w-full min-h-[200px] p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter a new prompt here..."
            required
          />
        </div>

        <div className="flex gap-4">
          <Button
            type="submit"
            disabled={isLoading}
            className="bg-blue-500 hover:bg-blue-600 text-white"
          >
            {isLoading ? "Saving..." : "Save Changes"}
          </Button>

          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}
```

## 6. Create pages

### `app/experiences/[experienceId]/page.tsx`

This page displays the experience prompt and the image uploader. If the user is an admin, they can edit the prompt.

```typescript app/experiences/[experienceId]/page.tsx [expandable]
import ExperiencePrompt from "@/components/experience-prompt";
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";

const prisma = new PrismaClient();

async function findOrCreateExperience(experienceId: string) {
  let experience = await prisma.experience.findUnique({
    where: { id: experienceId },
  });

  if (!experience) {
    experience = await prisma.experience.create({
      data: {
        id: experienceId,
        prompt: "",
      },
    });
  }

  return experience;
}

export default async function ExperiencePage({
  params,
}: {
  params: Promise<{ experienceId: string }>;
}) {
  const headersList = await headers();
  const { userId } = await whopSdk.verifyUserToken(headersList);

  const { experienceId } = await params;
  const experience = await findOrCreateExperience(experienceId);

  const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });

  return (
    <div className="flex flex-col gap-4 p-4 h-screen items-center justify-center">
      <ExperiencePrompt
        prompt={experience.prompt}
        accessLevel={hasAccess.accessLevel}
        experienceId={experienceId}
      />
    </div>
  );
}
```

### `app/experiences/[experienceId]/edit/page.tsx`

This page allows admins to edit the experience prompt.

```typescript app/experiences/[experienceId]/edit/page.tsx [expandable]
import EditExperiencePrompt from "@/components/edit-experience-prompt";

export default async function Page({
  params,
}: {
  params: Promise<{ experienceId: string }>;
}) {
  const { experienceId } = await params;
  return <EditExperiencePrompt experienceId={experienceId} />;
}
```

## 7. Create the API routes

### `app/api/experiences/[experienceId]/generate/route.ts`

This API route generates images using OpenAI's DALL-E API.

```typescript app/api/experiences/[experienceId]/generate/route.ts [expandable]
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import OpenAI from "openai";
import sharp from "sharp";

const prisma = new PrismaClient();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(
  request: Request,
  { params }: { params: Promise<{ experienceId: string }> }
) {
  try {
    const { experienceId } = await params;

    if (!experienceId) {
      return NextResponse.json(
        { error: "Missing experienceId" },
        { status: 400 }
      );
    }

    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
      userId: userToken.userId,
      experienceId,
    });

    if (!hasAccess.hasAccess) {
      return NextResponse.json(
        { error: "Unauthorized, no access" },
        { status: 401 }
      );
    }

    const [publicUser, experience] = await Promise.all([
      whopSdk.users.getUser({
        userId: userToken.userId,
      }),
      prisma.experience.findUnique({
        where: {
          id: experienceId,
        },
      }),
    ]);

    if (!request.body || !experience?.prompt) {
      return NextResponse.json(
        { error: "Image and prompt are required" },
        { status: 400 }
      );
    }

    const originalFile = new File(
      [
        await sharp(await request.clone().arrayBuffer())
          .png()
          .toBuffer(),
      ],
      `${Date.now()}-original.png`,
      {
        type: "image/png",
      }
    );

    // Generate image using DALL-E with prompt
    const response = await openai.images.edit({
      model: "gpt-image-1",
      image: originalFile,
      prompt: experience.prompt,
      n: 1,
      size: "auto",
      quality: "low",
    });

    console.log("Response:", response);

    // Get the base64 image data from the response
    const base64Image = response.data?.[0]?.b64_json;
    if (!base64Image) {
      throw new Error("No image data returned from OpenAI");
    }
    const generatedImageBuffer = Buffer.from(base64Image, "base64");

    const generationId = crypto.randomUUID();

    const [originalFileUploadResponse, uploadResponse] = await Promise.all([
      whopSdk.attachments.uploadAttachment({
        file: originalFile,
        record: "forum_post",
      }),
      whopSdk.attachments.uploadAttachment({
        file: new File(
          [generatedImageBuffer],
          `${generationId}-generated.png`,
          {
            type: "image/png",
          }
        ),
        record: "forum_post",
      }),
    ]);

    const whopExperience = await whopSdk.experiences.getExperience({
      experienceId,
    });
    const companyId = whopExperience.experience.company.id;

    const generatedAttachmentId = uploadResponse.directUploadId;
    const originalAttachmentId = originalFileUploadResponse.directUploadId;

    const forum = await whopSdk.forums.findOrCreateForum({
      experienceId: experience.id,
      name: "AI Uploads",
    });

    const forumId = forum.createForum?.id;

    const post = await whopSdk.forums.createForumPost({
      forumExperienceId: forumId,
      content: `@${publicUser.publicUser?.username} generated this image with the prompt: "${experience.prompt}"\n\nTry it yourself here: https://whop.com/hub/${companyId}/${experience.id}/app\n\nBefore vs After ⬇️`,
      attachments: [
        { directUploadId: originalAttachmentId },
        { directUploadId: generatedAttachmentId },
      ],
    });

    return NextResponse.json({
      success: true,
      imageUrl: uploadResponse.attachment.source.url,
      postId: post?.id,
    });
  } catch (error) {
    console.error("Error generating image:", error);
    return NextResponse.json(
      { error: "Failed to generate image" },
      { status: 500 }
    );
  }
}
```

### `app/api/experiences/[experienceId]/route.ts`

This API route is a PUT operation to an experience in the database.

```typescript app/api/experiences/[experienceId]/route.ts [expandable]
import { whopSdk } from "@/lib/whop-sdk";
import { PrismaClient } from "@prisma/client";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function PUT(request: Request) {
  try {
    const { prompt } = await request.json();
    const headersList = await headers();
    const userToken = await whopSdk.verifyUserToken(headersList);
    if (!userToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    const url = new URL(request.url);
    const match = url.pathname.match(/experiences\/([^/]+)/);
    const experienceId = match ? match[1] : null;

    if (!experienceId) {
      return NextResponse.json(
        { error: "Missing experienceId" },
        { status: 400 }
      );
    }

    const hasAccess = await whopSdk.access.checkIfUserHasAccessToExperience({
      userId: userToken.userId,
      experienceId,
    });
    if (hasAccess.accessLevel !== "admin") {
      return NextResponse.json(
        { error: "Unauthorized, not admin" },
        { status: 401 }
      );
    }

    const updatedExperience = await prisma.experience.update({
      where: {
        id: experienceId,
      },
      data: {
        prompt,
      },
    });

    await whopSdk.notifications.sendNotification({
      content: prompt,
      experienceId,
      title: "Prompt updated ✨",
    });

    return NextResponse.json(updatedExperience);
  } catch (error) {
    console.error("Error updating experience:", error);
    return NextResponse.json(
      { error: "Failed to update experience" },
      { status: 500 }
    );
  }
}
```

## 8. Deploy to Vercel

1. Add this script to the `scripts` section of your `package.json` to generate the Prisma client:

```json package.json
  "scripts": {
    "postinstall": "prisma generate"
  }
```

2. Push your code to GitHub
3. Create a new project on [Vercel](https://vercel.com)
4. Import your GitHub repository
5. Add all environment variables
6. Deploy and copy your Vercel URL
7. Update your Whop app settings with the new URL in the "Base URL" field

> Vercel functions automatically timeout after 60 seconds on a hobby account. Images might take longer than 60 seconds. This will cause errors. You can upgrade to a paid account to avoid this or swap out the image generator to a different API.

Your AI image generation app is now ready! Users can upload images, apply AI transformations based on prompts, and share their creations in the community forum.

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/whopio/whop-sdk-ts/tree/main/examples/ai-image-generator)
* DM [@s on Whop](https://whop.com/@s)

***


# Chat bot
Source: https://docs.whop.com/apps/tutorials/chat-bot

Build a production-ready AI support bot that intelligently answers questions in whop communities.

<Tip>
  This tutorial was submitted by [@script](https://whop.com/@script), a member
  of the Whop Developers community. [Submit your own
  tutorial](https://whop.com/developers) and get paid real \$!
</Tip>

## Summary

This tutorial will guide you through building a chat bot that can answer questions in whop communities. View the final product
[here](https://whop.com/apps/app_3rqpGo1tsmPDHg/install/) by installing the app to your whop.

## 1. Set up your Next.js project

Clone the AI Support Bot repository:

```bash
git clone https://github.com/VortexxJS/whop-ai-support (not available yet)
cd whop-ai-bot
```

Install dependencies:

<CodeGroup>
  ```bash npm
   npm install
  ```

  ```bash pnpm
  pnpm install
  ```

  ```bash yarn
  yarn instal
  ```
</CodeGroup>

## 2. Get your Whop API credentials

<Steps>
  <Step title="Create a Whop App">
    1. Go to [https://whop.com/dashboard/developer](https://whop.com/dashboard/developer)
    2. Navigate to **Developer**
    3. Click the **Create App** button
    4. Give your app a name like "AI Support Bot"
    5. Click **Create**
  </Step>

  <Step title="Get your API Key, Agent User ID, and App ID">
    After creating your app:

    1. Copy the **App API Key** - you'll need this for `WHOP_API_KEY`
    2. Copy the **Agent User ID** - you'll need this for `NEXT_PUBLIC_WHOP_AGENT_USER_ID`
    3. Copy the **App ID** - you'll need this for `NEXT_PUBLIC_WHOP_APP_ID`

    {" "}

    <Note>
      The Agent User ID is what allows your bot to send messages on behalf of your
      app.
    </Note>
  </Step>
</Steps>

## 3. Set up Supabase Database

<Steps>
  <Step title="Create a Supabase Project">
    1. Go to [https://supabase.com](https://supabase.com)
    2. Click **Start your project**
    3. Sign in or create an account
    4. Click **New project**
    5. Choose your organization
    6. Enter a **Database Name** (e.g., "ai-support-bot")
    7. Enter a **Database Password** (save this!)
    8. Select a **Region** close to your users
    9. Click **Create new project**
  </Step>

  <Step title="Get Database Connection Strings">
    Once your project is created:

    1. Go to **Settings** → **Database**
    2. Scroll down to **Connection string**
    3. Copy the **URI** format for `DATABASE_URL`
    4. Copy the **Direct connection** for `DIRECT_URL`

    {" "}

    <Warning>
      Replace `[YOUR-PASSWORD]` in both URLs with the database password you created.
    </Warning>
  </Step>
</Steps>

## 4. Get OpenRouter AI API Key

<Steps>
  <Step title="Create OpenRouter Account">
    1. Go to [https://openrouter.ai](https://openrouter.ai)
    2. Click **Sign In** or **Sign Up**
    3. Complete the registration process
  </Step>

  <Step title="Get API Key">
    1. Go to **Keys** in the dashboard
    2. Click **Create Key**
    3. Give it a name like "AI Support Bot"
    4. Copy the API key - you'll need this for `OPENROUTER_API_KEY`

    {" "}

    <Info>
      OpenRouter gives you \$1 free credit when you sign up, which is more than
      enough for testing with Gemini 2.0 Flash!
    </Info>
  </Step>
</Steps>

## 5. Configure Environment Variables

<Steps>
  <Step title="Copy Environment Template">
    ```bash
    cp env.example .env
    ```
  </Step>

  <Step title="Fill in Required Variables">
    Open `.env` in your text editor and fill in these required fields:

    ```env
    # Database Configuration (Required)
    DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@[HOST]:6543/postgres?pgbouncer=true"
    DIRECT_URL="postgresql://postgres:[YOUR-PASSWORD]@[HOST]:5432/postgres"

    # AI Service Configuration (Required)
    OPENROUTER_API_KEY="your_openrouter_api_key_here"
    OPENROUTER_MODEL="google/gemini-2.0-flash-001"

    # Whop Integration (Required)
    WHOP_API_KEY="your_whop_app_api_key_here"
    NEXT_PUBLIC_WHOP_AGENT_USER_ID="your_bot_user_id_here"
    NEXT_PUBLIC_WHOP_APP_ID="your_whop_app_id_here"
    ```

    {" "}

    <Info>All other variables are optional and have sensible defaults.</Info>
  </Step>
</Steps>

## 6. Set up the Database

Push the database schema to Supabase:

```bash
npm run db:push
```

This will create the necessary tables:

* `companies` - Store bot settings for each Whop company
* `experience_mappings` - Map Whop experiences to companies

## 7. Install Whop Dev Proxy

For Whop integration to work in development, you need to install the Whop dev proxy globally:

```bash
npm install @whop-apps/dev-proxy -g
```

<Note>
  The Whop dev proxy is required for the iframe integration to work properly
  during development.
</Note>

## 8. Run the Application

<Steps>
  <Step title="Start the Web Server with Whop Proxy">
    Run this command to start both the Whop proxy and Next.js development server:

    ```bash
    whop-proxy --command 'npx next dev --turbopack'
    ```

    You should see output indicating both the proxy and Next.js are running. The web app will be available at [http://localhost:3000](http://localhost:3000)

    <Warning>
      Do NOT use `npm run dev` alone - it won't include the Whop proxy and the iframe integration won't work!
    </Warning>
  </Step>

  <Step title="Start the AI Bot (New Terminal)">
    In a new terminal window:

    ```bash
    npm run bot
    ```

    You should see:

    ```
    🚀 Starting Whop AI Bot...

    Features:
      • Smart AI question detection
      • Admin-only configuration
      • Real-time responses
      • Rate limiting & caching

    ✅ Bot connected to Whop
    🤖 Listening for messages and commands...
    ```
  </Step>
</Steps>

## 9. Configure App Settings in Whop

**Important**: You must configure these settings BEFORE installing the app to your community.

<Steps>
  <Step title="Set Base URL and App Path">
    1. Go to your Whop app dashboard → **Developer** → Your App
    2. In the **Hosting** section, configure:
       * **Base URL**: `http://localhost:3000/`
       * **App path**: `/company/[companyId]`
    3. Click **Save** to update the settings

    <Warning>
      If you skip this step, the app installation and iframe integration won't work properly!
    </Warning>
  </Step>
</Steps>

## 10. Install to Your Whop Community

1. Go to your Whop company dashboard
2. Navigate to **Settings** → **API
   keys**
3. Click on your AI Support Bot app
4. Find and copy the **Installation Link**
5. Visit the installation link and grant the necessary
   permissions

## 11. Configure Your Bot

<Steps>
  <Step title="Access Bot Settings via Whop iframe">
    1. After installing the app, click **Open Whop** in the top right
    2. When redirected to Whop, click the **Settings** button
    3. Change the dropdown from **Production** to **Localhost**
    4. Choose your port (usually **3000**)
    5. You'll now see the bot configuration dashboard

    <Note>
      Only company admins can access the bot settings page.
    </Note>
  </Step>

  <Step title="Set Up Your Bot">
    Configure these settings:

    * **Enable Bot**: Turn on the AI responses
    * **Knowledge Base**: Add information about your community
    * **Response Style**: Choose professional, friendly, casual, or technical
    * **Preset Q\&A**: Add common questions with instant answers
    * **Custom Instructions**: Fine-tune the AI's behavior
  </Step>
</Steps>

## 12. Test Your Bot

1. Go to your Whop community chat
2. Ask a question like "How do I join?"
3. The bot should respond within a few seconds

## Troubleshooting

<AccordionGroup>
  <Accordion title="Bot not responding to messages">
    1. Check that both the web server and bot are running
    2. Verify your environment variables are correct
    3. Look for errors in the bot console output
    4. Make sure the bot is enabled in the settings dashboard
  </Accordion>

  <Accordion title="Database connection errors">
    1. Verify your Supabase database URLs are correct
    2. Make sure you replaced
       `[YOUR-PASSWORD]` with your actual password
    3. Check that your Supabase
       project is active
    4. Try running `npm run db:push` again
  </Accordion>

  <Accordion title="AI responses not working">
    1. Verify your OpenRouter API key is correct
    2. Make sure the bot is enabled
    3. Verify the knowledge base is not empty
    4. Check the bot console for any
       AI-related errors
  </Accordion>

  <Accordion title="Can't access bot settings">
    1. Make sure you're using the Whop iframe method
    2. Ensure you've set the environment to localhost with correct port
    3. Verify you're a company admin in Whop
    4. Check that your Whop App API key is correct
  </Accordion>
</AccordionGroup>

## What's Next?

Your AI Support Bot is now ready! Here are some next steps:

* **Customize responses**: Add more preset Q\&A pairs for instant answers
* **Train the AI**: Update the knowledge base with community-specific information
* **Monitor usage**: Check the bot console for statistics and performance
* **Scale up**: Deploy to production using Vercel, Railway, or your preferred platform

<Note>
  The bot saves 80-90% on AI costs through smart question detection and caching.
  Perfect for high-volume communities!
</Note>

## Need Help?

* Join the [Developer Whop](https://whop.com/developers)
* View the source code of this app [here](https://github.com/AbdullahZHD/car-modification-ai-whop)
* DM [@script on Whop](https://whop.com/@script)

***


# Dashboard Apps (Beta)
Source: https://docs.whop.com/apps/tutorials/dashboard-apps

Build whop apps for a company's dashboard.

This process is still in beta and will get smoother over time.

## How to make a dashboard app

1. Create an app on whop (go to your company dashboard -> developer -> apps -> create)

2. Then in the app-details -> hosting section:

   * Base URL: `https://your-domain.com`
   * App Path: (Remove default value, make it empty)
   * Discover Path: (Leave empty)
   * Dashboard Path: `/dashboard/[companyId]` \<- set this

3. Then click SAVE (top of page)

4. Then click on the little icon on the right of the dashboard path input field. This will open your dashboard view within whop.

5. Then create a nextjs app:

```bash
pnpm create next-app@latest example-dashboard-app -e https://github.com/whopio/whop-nextjs-app-template
```

6. Then add in a new file under: `app/dashboard/[companyId]/page.tsx`. Start with this template:

```tsx
import { whopSdk } from "@/lib/whop-sdk";
import { headers } from "next/headers";
import { notFound } from "next/navigation";

export default async function DashboardPage({
  params,
}: {
  params: Promise<{ companyId: string }>;
}) {
  const { companyId } = await params;

  const { userId } = await whopSdk.verifyUserToken(await headers());
  const result = await whopSdk.access.checkIfUserHasAccessToCompany({
    userId,
    companyId,
  });
  if (result.accessLevel !== "admin") notFound();

  return (
    <div className="flex flex-col max-w-3xl mx-auto gap-2 text-gray-11 py-16 px-8">
      <h1 className="text-xl">
        Hi <strong>{userId}</strong>, welcome to your dashboard view
      </h1>
    </div>
  );
}
```

7. Run `pnpm dev`

8. In your dashboard app preview click on the settings icon in the top right and select localhost. You should now see this page.

## How to fetch company data with your app api keys.

1. Change your `lib/whop-sdk.ts` file to look like this (remove the default companyId and agentUserId)

```ts
import { WhopServerSdk } from "@whop/api";

export const whopSdk = WhopServerSdk({
  // Add your app id here - this is required.
  // You can get this from the Whop dashboard after creating an app section.
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID ?? "fallback",

  // Add your app api key here - this is required.
  // You can get this from the Whop dashboard after creating an app section.
  appApiKey: process.env.WHOP_API_KEY ?? "fallback",
});
```

2. Go to your app developer dashboard. Next to the `App Details` tab there is a `Permissions` tab. Open it.

3. Request the permissions that your app needs to function. For example to list company payments / receipts, you need to request the `payment:basic:read` scope. Select the ones you want and click "Add"

4. For each permission, provide a justification of why your app needs it. Then also choose whether it is required (or optional). You can toggle the little switch at the top of each card. When complete, *CLICK SAVE*

5. Now go back to your dashboard app view and refresh. You will see a red "Approve Permissions" banner next to your app name. Click it and approve the requested permissions.

<Info>
  When another company owner installs your app, they will be prompted with the
  same permissions request modal. (Directly after installing from app store) If
  you then update your requested permissions, they will see the same prompt to
  re-grant them again when using your app.
</Info>

6. Now you can start making API requests for data on the companies that you have authorized. (We are adding more endpoints) But right now you can list the receipts (payments) for a company:

```ts
const companyReceipts = await whopSdk.payments.listReceiptsForCompany({
  companyId,
  first: 10, // If you have "complexity limits" issues, lower the amount here
});
```

Currently the full list of permissions required for the above query is this:

```
payment:basic:read
access_pass:basic:read
member:basic:read
plan:basic:read
promo_code:basic:read
```

We are working on making this less restrictive and instead making certain permissions optional when making these requests.

## Coming soon

* [ ] Add more endpoints for different company data.
* [ ] For some endpoints, make permissions optional (but if you have them, you get extra data)
* [ ] For each SDK method, document the required permissions.
* [ ] For each permission, add nice descriptions / text and examples.


# Fees
Source: https://docs.whop.com/fees

We want to be the cheapest, most resilient place to accept pure payments.

import { Button } from "@/components/ui/button";

<Frame>
  <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=41fbd05847b7505584c1d6605b943396" alt="Fees" width="1728" height="1080" data-path="how-to-videos/fees.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b4ea6282d9de8335080ad055ac7f85db 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4da58960bc60f30f989c17e82d602567 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=55164efb801d3c36c9ed8656fb7b04c2 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a0c963c40051fc769c17f358718915ac 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f5e4493d827f828527645063e1a61d5f 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/fees.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=97f406834d6f939117e217c6cb037bb0 2500w" data-optimize="true" data-opv="2" />
</Frame>

<CardGroup cols={3}>
  <Card style={{ border: "none" }} title="Global access" icon="globe">
    195 countries, 135+ currencies, 100+ payment methods.
  </Card>

  <Card style={{ border: "none" }} title="Fraud prevention" icon="shield-check">
    Powerful machine learning that adapts to new fraud patterns.
  </Card>

  <Card title="Optimized checkout" icon="cart-shopping">
    Flexible UI components and accelerated checkout.
  </Card>

  <Card title="Payment optimizations" icon="chart-line">
    Real-time retries & auto-updated cards to boost revenue.
  </Card>

  <Card title="Financing options" icon="chart-line">
    Let your customers pay over time with Klarna, Afterpay, and more.
  </Card>

  <Card title="Embedded payments" icon="building-columns">
    Instant onboarding and platform management tools.
  </Card>

  <Card title="Fast, predictable payouts" icon="check">
    Flexible payout options with like-for-like settlement.
  </Card>

  <Card title="24×7 support" icon="headset">
    Phone, chat, and email assistance whenever you need.
  </Card>

  <Card title="Security & compliance" icon="shield">
    99.999% uptime and PCI-compliant infrastructure.
  </Card>
</CardGroup>

<Update label="Global payments" description="100+ payment methods" collapse>
  <div className="bg-white dark:bg-[#0f0f13] rounded-2xl border border-gray-200 dark:border-gray-800  p-6 pb-0 space-y-4">
    <div className="flex justify-between items-baseline">
      <div className="flex gap-3 items-start">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6955c07c9b75d157afd4ae12a6c3407f" className="mt-0 mb-0" alt="Fees" width="88" height="88" data-path="images/payments.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a73367878dc7003913024a63b0647d8f 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0a2a32f01b055759a5d1fdb0f6c19938 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a3734bc241504a3038983e5e518342d3 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0fb7e73550029a929201ce9ee01adb91 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=42d571499c27d04a15796dff2cfda757 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payments.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ce276486edbf5bfb13c74b2debe7c5ea 2500w" data-optimize="true" data-opv="2" />
        </div>

        <div className="flex flex-col">
          <h2 className="p-0 mx-0 my-0">Payments</h2>
          <p className="m-0 p-0">An online payments platform engineered for growth.</p>
        </div>
      </div>

      <div>
        [Start today →](/apps/docs/payments/taxes)
      </div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Increase customer acquisition with 100+ payment methods.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Improve conversion with Whop's accelerated checkout.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Save engineering time with prebuilt UIs.
      </div>
    </div>

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>Cards and wallets</h3>

          <p className="mb-4">
            Accept widely used credit and debit cards, prepaid cards, and digital
            wallets for online payments.
          </p>

          <div className="flex flex-wrap items-center gap-2">
            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#1434CB" />

              <path d="m16.4161 7.21719-1.9594 9.41161h-2.3794l1.9595-9.41161h2.3793Zm9.8674 6.08131 1.2597-3.54741.6998 3.54741h-1.9595Zm2.6593 3.3303h2.1694l-1.8895-9.41161h-2.0294c-.4199 0-.8398.28959-.9798.72397l-3.499 8.68764h2.4493l.4899-1.3755h3.0092l.2799 1.3755Zm-6.1584-3.1131c0-2.4615-3.2891-2.6063-3.2891-3.69222.07-.50678.4899-.79636.9798-.79636.7697-.0724 1.6095.07239 2.3093.43438l.4199-2.02712C22.5045 7.14479 21.7347 7 21.0349 7c-2.3094 0-3.9889 1.30315-3.9889 3.1131 0 1.3755 1.1897 2.0995 2.0294 2.5339.9098.4343 1.2597.7239 1.1897 1.1583 0 .6516-.6998.9412-1.3996.9412-.8398 0-1.6796-.2172-2.4494-.5792l-.4198 2.0271c.8397.362 1.7495.5068 2.5893.5068 2.5893.0724 4.1988-1.2308 4.1988-3.1855ZM13.057 7.21719 9.27805 16.6288H6.75873l-1.8895-7.52929c0-.36198-.27992-.65157-.55985-.79636C3.60957 7.94116 2.83978 7.65157 2 7.50678l.06998-.28959h3.98893c.55985 0 .97974.43438 1.04972.94116l.97974 5.42975 2.51933-6.37091h2.4493Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#000" />

              <path d="M21.8342 19.4082c4.0195 0 7.278-3.2585 7.278-7.2781 0-4.01955-3.2585-7.27805-7.278-7.27805-4.0196 0-7.2781 3.2585-7.2781 7.27805 0 4.0196 3.2585 7.2781 7.2781 7.2781Z" fill="#F9A000" />

              <path d="M12.1301 19.4082c4.0195 0 7.278-3.2585 7.278-7.2781 0-4.01955-3.2585-7.27805-7.278-7.27805-4.01957 0-7.27806 3.2585-7.27806 7.27805 0 4.0196 3.25849 7.2781 7.27806 7.2781Z" fill="#ED0006" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9833 6.7063c1.4883 1.33263 2.4248 3.26885 2.4248 5.4238 0 2.155-.9365 4.0912-2.4248 5.4238-1.4902-1.3317-2.4272-3.2683-2.4272-5.4238 0-2.0902.8811-3.97453 2.2921-5.30196l.1351-.12184Z" fill="#FF5D00" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#000" />

              <path d="M21.9821 19.3061c4.0196 0 7.2781-3.2585 7.2781-7.278 0-4.01961-3.2585-7.2781-7.2781-7.2781-4.0195 0-7.278 3.25849-7.278 7.2781 0 4.0195 3.2585 7.278 7.278 7.278Z" fill="#00A1DF" />

              <path d="M12.2781 19.3061c4.0195 0 7.278-3.2585 7.278-7.278 0-4.01961-3.2585-7.2781-7.278-7.2781C8.25849 4.75 5 8.00849 5 12.0281c0 4.0195 3.25849 7.278 7.2781 7.278Z" fill="#EB001B" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M17.1312 6.60425c1.4883 1.33263 2.4249 3.26885 2.4249 5.42385 0 2.1549-.9366 4.0912-2.4249 5.4238-1.4901-1.3318-2.4271-3.2684-2.4271-5.4238 0-2.0902.8811-3.97458 2.2921-5.30201l.135-.12184Z" fill="#7673C0" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30.1184 0H3.88163C1.73786 0 0 1.73786 0 3.88163V20.1184C0 22.2621 1.73786 24 3.88163 24H30.1184C32.2621 24 34 22.2621 34 20.1184V3.88163C34 1.73786 32.2621 0 30.1184 0Z" fill="#016FD0" />

              <path d="M3.56625 8.1438 2 11.893h1.01971l.28899-.7507h1.68005l.2875.7507h1.04217L4.75367 8.1438H3.56625Zm.57948.87256.5121 1.31194h-1.0257l.5136-1.31194ZM6.42631 11.8921V8.14282l1.44906.00554.84282 2.41724.82264-2.42278h1.43747v3.74928h-.9104V9.12947l-.96504 2.76263h-.79842l-.96773-2.76263v2.76263h-.9104ZM11.6011 11.8921V8.14282h2.9708v.83865h-2.0508v.64131h2.0029v.78932h-2.0029v.666h2.0508v.814h-2.9708ZM15.099 8.14331v3.74919h.9104v-1.3319h.3834l1.0915 1.3319h1.1126l-1.1979-1.3812c.4916-.0428.9988-.4772.9988-1.15164 0-.78897-.6015-1.21635-1.2728-1.21635h-2.026Zm.9104.83864h1.0407c.2497 0 .4313.20106.4313.39466 0 .24908-.2353.39466-.4178.39466h-1.0542v-.78932ZM19.699 11.8921h-.9296V8.14282h.9296v3.74928ZM21.9031 11.8921h-.2007c-.9708 0-1.5602-.7875-1.5602-1.8592 0-1.09826.5828-1.89008 1.8088-1.89008h1.0062v.88798h-1.043c-.4977 0-.8497.39987-.8497 1.0113 0 .7261.4025 1.0311.9823 1.0311h.2396l-.3833.8189ZM23.8841 8.14331l-1.5662 3.74919h1.0197l.289-.7507h1.68l.2875.7507h1.0422l-1.5648-3.74919h-1.1874Zm.5795.87256.5121 1.31193H23.95l.5136-1.31193ZM26.7426 11.8921V8.14282H27.9l1.4779 2.35558V8.14282h.9104v3.74928h-1.12L27.653 9.47479v2.41731h-.9104ZM7.582 16.7133v-3.7492h2.9708v.8386H8.50198v.6414h2.00282v.7893H8.50198v.6659h2.05082v.814H7.582ZM22.1387 16.7133v-3.7492h2.9707v.8386h-2.0507v.6414h1.9932v.7893h-1.9932v.6659h2.0507v.814h-2.9707ZM10.668 16.7133l1.4465-1.8515-1.4809-1.8977h1.1469l.882 1.1732.8849-1.1732h1.1021l-1.4614 1.8746 1.4491 1.8746h-1.1468l-.8564-1.1547-.8355 1.1547H10.668ZM14.7452 12.9648v3.7492h.9344v-1.1839h.9583c.8109 0 1.4255-.4429 1.4255-1.3042 0-.7135-.4821-1.2611-1.3072-1.2611h-2.011Zm.9344.8479h1.0092c.262 0 .4492.1653.4492.4317 0 .2502-.1863.4316-.4522.4316h-1.0062v-.8633ZM18.4587 12.9641v3.7492h.9104v-1.3319h.3833l1.0916 1.3319h1.1125l-1.1979-1.3813c.4916-.0427.9987-.4771.9987-1.1516 0-.7889-.6014-1.2163-1.2727-1.2163h-2.0259Zm.9104.8386h1.0406c.2497 0 .4313.2011.4313.3947 0 .2491-.2353.3947-.4178.3947h-1.0541v-.7894ZM25.531 16.7133v-.814h1.822c.2695 0 .3863-.1499.3863-.3144 0-.1577-.1164-.317-.3863-.317h-.8234c-.7156 0-1.1142-.4489-1.1142-1.1229 0-.6012.365-1.1809 1.4285-1.1809h1.7728l-.3833.8436h-1.5333c-.2931 0-.3833.1583-.3833.3095 0 .1555.1115.3269.3354.3269h.8625c.7978 0 1.144.4659 1.144 1.076 0 .656-.3858 1.1932-1.1875 1.1932H25.531ZM28.8723 16.7133v-.814h1.822c.2696 0 .3863-.1499.3863-.3144 0-.1577-.1164-.317-.3863-.317h-.8234c-.7156 0-1.1142-.4489-1.1142-1.1229 0-.6012.365-1.1809 1.4285-1.1809h1.7728l-.3833.8436h-1.5333c-.2931 0-.3833.1583-.3833.3095 0 .1555.1115.3269.3354.3269h.8625c.7978 0 1.144.4659 1.144 1.076 0 .656-.3858 1.1932-1.1874 1.1932h-1.9403Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#FFA201" />

              <path d="m14.1089 9.79783.1561.00638c.3396 0 .7278.04852 1.0189.24259v.9704c-.2426-.2911-.6308-.4852-1.0189-.4852-.7763.0485-1.4071.7278-1.3586 1.5041v.0971c0 .7763.6308 1.3586 1.4071 1.3586.3882 0 .7278-.1941.9704-.4853v.9705c-.3396.1455-.6793.2426-1.0674.2426-1.213 0-2.1835-1.019-2.1835-2.232 0-1.2615.9705-2.28043 2.232-2.18339l-.1561-.00638Zm6.6578.00638 1.116 2.91119 1.1645-2.91119h.8733l-1.7952 4.41539h-.4367l-1.7953-4.41539h.8734Zm-10.5095-.09942.1262.00238c.4366 0 .8733.19408 1.213.48523l-.4367.5822c-.1941-.1941-.4367-.3396-.6793-.3396-.2911-.0485-.53373.1941-.58225.4852 0 .2426.14555.3396.63075.5337.9704.3882 1.213.6793 1.2615 1.2615v.1456c-.0485.7763-.6792 1.3586-1.4556 1.31-.58221 0-1.16446-.2911-1.45558-.8248l.53373-.5337c.14556.3396.4852.5822.87335.5822h.0485c.2912 0 .5823-.2911.5823-.6308 0-.194-.0971-.3396-.2426-.4366-.1941-.0971-.3882-.1941-.5823-.2426-.7763-.2426-1.0189-.5823-1.0189-1.1645v-.0485c.04852-.6793.63077-1.21305 1.3101-1.16453l-.1262-.00238Zm-4.91996.09942c1.16448.04852 2.08637 1.01889 2.03785 2.18339 0 .6308-.29112 1.213-.77632 1.6497-.43669.3397-.97041.5337-1.50413.4852H3.88163V9.80421h1.45561Zm3.20234 0v4.31829h-.82485V9.80421h.82485Zm18.09812 0v.72779h-1.5042v.9704h1.4556v.7278h-1.4556v1.1645h1.5042v.7278h-2.329V9.80421h2.329Zm1.7467 0c.9704 0 1.5041.43669 1.5041 1.26149.0486.6308-.3881 1.1645-.9704 1.2616l1.3101 1.7952h-1.019l-1.1159-1.7467h-.0971v1.7467h-.8248V9.80421h1.213Zm-23.28787.71849-.14746.0093h-.2426v2.8627h.2426c.38817.0485.82485-.097 1.11597-.3396.29112-.2912.43668-.6793.43668-1.116 0-.3882-.14556-.7763-.43668-1.0674-.29112-.2426-.7278-.3882-1.11597-.3397l.14746-.0093Zm23.14227-.0392h-.2426v1.31h.2426c.5338 0 .7764-.2426.7764-.6792 0-.3882-.2426-.6308-.7764-.6308Z" fill="#fff" />

              <path opacity=".8" d="M17.807 9.75562c-1.213 0-2.232.97038-2.232 2.23198 0 1.213.9704 2.2319 2.232 2.2804 1.2615.0485 2.2319-.9704 2.2804-2.2319-.0485-1.2616-1.0189-2.28048-2.2804-2.28048Z" fill="#fff" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#fff" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M30 1H4C2.34315 1 1 2.34315 1 4v16c0 1.6569 1.34315 3 3 3h26c1.6569 0 3-1.3431 3-3V4c0-1.65685-1.3431-3-3-3ZM4 0C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4H4Z" fill="#C4CCD8" />

              <path d="M4.85204 6.01643v7.76327c.77632.4852 1.64969.7763 2.62009.7763.87337 0 1.55266-.6793 1.6497-1.5526V8.73357h2.62007v4.07573c0 1.5526-.8733 2.9112-3.68752 2.9112-1.06745 0-2.1349-.1941-3.1053-.3882v6.0166h4.65795c1.74677 0 3.10527-1.3586 3.10527-3.1053V2.91113H7.95734c-1.74674 0-3.1053 1.35857-3.1053 3.1053Z" fill="#1B6BAF" />

              <path d="M16.691 2.91113c-1.7467 0-3.1053 1.35857-3.1053 3.1053v3.68755c.7763-.77632 2.1349-1.26153 4.3668-1.16449.8734.09704 1.6497.19408 2.426.38817v1.45564c-.6792-.3882-1.5526-.67932-2.3289-.77636-1.3586-.09704-2.5231.87336-2.7172 2.13486-.097 1.3586.8734 2.5231 2.1349 2.7172h.4852c.8734-.0971 1.6497-.3882 2.329-.7764v1.4557c-.7763.194-1.6497.3881-2.426.3881-2.2319.0971-3.5905-.3881-4.3668-1.1645v6.7929h4.6579c1.7467 0 3.1053-1.3586 3.1053-3.1053V2.91113H16.691Z" fill="#D02644" />

              <path d="M25.4247 2.91113c-1.7468 0-3.1053 1.35857-3.1053 3.1053v2.71714h4.755c.8733-.09704 1.6496.67929 1.7467 1.55263v.0971c0 .8733-.5823 1.5526-1.4556 1.6497.9704 0 1.7467.7763 1.8437 1.7467 0 .9704-.8733 1.7467-1.8437 1.7467h-5.0461v5.8225h4.5609c1.7467 0 3.1053-1.3586 3.1053-3.1053V2.91113h-4.5609ZM24.2602 14.459h2.2319c.4852-.1941.7763-.6793.6793-1.2616-.097-.2911-.3882-.5822-.6793-.6792h-2.2319v1.9408Zm2.7171-3.8817c0-.3881-.2911-.77628-.6793-.87332h-2.0378v1.74672h2.0378c.3882-.097.6793-.4852.6793-.8734Z" fill="#46A548" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#0079BE" />

              <path d="M18.8314 19.9999c4.3729.0209 8.3644-3.5664 8.3644-7.9304 0-4.77238-3.9915-8.07109-8.3644-8.0695h-3.7635C10.6425 3.99841 7 7.29811 7 12.0695c0 4.365 3.6425 7.9514 8.0679 7.9304h3.7635Z" fill="#fff" />

              <path d="M15.0857 4.66138c-4.0438.00127-7.32056 3.27902-7.32151 7.32442.00095 4.0447 3.27771 7.3222 7.32151 7.3234 4.0448-.0012 7.3222-3.2787 7.3228-7.3234-.0006-4.0454-3.278-7.32315-7.3228-7.32442Zm-4.6409 7.32442c.0038-1.9768 1.2384-3.66251 2.9794-4.33238v8.66378c-1.741-.6695-2.9756-2.3543-2.9794-4.3314Zm6.3019 4.3333V7.65314c1.7416.66825 2.9781 2.35486 2.9812 4.33266-.0031 1.9784-1.2396 3.6638-2.9812 4.3333Z" fill="#0079BE" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M15.0712 0c.0253.281017.0081.581568-.0565.894128L10.2242 23.3075c-.0512.239-.1277.4709-.22551.6925H4.12121C1.84513 24 0 22.1313 0 19.8261V4.17391C0 1.86872 1.84513 0 4.12121 0H15.0712Z" fill="#E21836" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M7.31804 24c-.00296-.2216.01997-.4536.0712-.6926L12.1797.894032c.067-.312524.1771-.613042.3219-.894032h15.3851c-.0043.0171633-.0087.0343995-.0131.0517068-.0677.2660402-.1396.5488902-.2002.8423252L22.8829 23.3074c-.0512.239-.0925.471-.1306.6926H7.31804Z" fill="#00447C" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M19.8819 24c-.003-.2216.02-.4536.0712-.6926L24.7436.894032c.067-.312524.1771-.613042.3218-.894032h4.8134C32.1549 0 34 1.86872 34 4.17391V19.8261C34 22.1313 32.1549 24 29.8788 24h-9.9969Z" fill="#007B84" />

              <path d="M8.01382 6.98846c-.84752.0089-1.09782 0-1.17777-.01945-.03073.15046-.60265 2.86844-.60425 2.87072-.12314.54987-.21274.94187-.51707 1.19497-.17276.1472-.37445.2181-.60828.2181-.37585 0-.59481-.1922-.63157-.5569l-.00703-.1252s.1145-.73656.1145-.7407c0 0 .60024-2.47688.70771-2.80428.00562-.01863.00723-.02836.00864-.03726-1.16833.01056-1.37544 0-1.38971-.01945-.00783.0267-.03676.18026-.03676.18026l-.61289 2.79166-.05263.23677-.10185.7744c0 .2298.04379.4173.13098.5758.27922.5027 1.07572.578 1.5263.578.58055 0 1.12514-.1271 1.49316-.3591.6388-.3888.80594-.9967.95499-1.5368l.06911-.27714s.61831-2.57249.72337-2.90714c.00402-.01863.00563-.02836.01105-.03726Zm2.10378 2.07526c-.14905 0-.42145.03725-.66612.1608-.08879.04698-.17276.10121-.26135.15522l.07995-.2974-.04379-.05008c-.51888.10824-.63499.12273-1.1143.19226l-.04017.02753c-.05565.47538-.10506.83275-.31137 1.76725-.07854.3443-.1601.692-.24186 1.0356l.02209.0437c.49116-.0267.64022-.0267 1.06709-.0195l.03455-.0387c.05424-.2862.06127-.3533.1814-.933.05645-.2748.17416-.8787.23222-1.0937.10667-.05096.21193-.10104.31237-.10104.23925 0 .21013.21504.20088.30074-.01024.1438-.09742.6136-.18682 1.017l-.05966.2603c-.04158.1923-.08718.3792-.12876.5698l.01808.0381c.48412-.0267.63177-.0267 1.04517-.0195l.0486-.0387c.0748-.447.0967-.5667.2292-1.2175l.0667-.2991c.1296-.58527.1947-.88205.0967-1.12378-.1037-.2709-.3524-.3363-.5808-.3363Zm2.3502.61278c-.2574.05091-.4215.08485-.5846.10679-.1617.0267-.3194.05091-.5681.08651l-.0197.01842-.0181.01469c-.0259.19079-.044.35579-.0783.54969-.0291.2005-.0739.4284-.1469.7558-.0564.2506-.0855.338-.1177.4261-.0313.0882-.0659.1739-.1293.4204l.0148.0227.0125.0209c.2324-.0113.3845-.0194.5408-.0209.156-.0058.3178 0 .5681.0015l.0218-.0184.0236-.0203c.0361-.2223.0415-.2821.0636-.3906.0219-.1163.0597-.2773.1523-.7073.0438-.202.0926-.4034.138-.6095.0472-.2053.0966-.40753.1436-.60952l-.007-.02442-.0094-.02256Zm.0054-.82622c-.2338-.14218-.6442-.09706-.9204.09934-.2754.19247-.3067.46566-.0737.6097.2298.13825.6418.09706.9156-.10099.2748-.19662.3092-.46732.0785-.60805Zm1.4142 3.29282c.473 0 .958-.1343 1.323-.5329.2808-.3233.4096-.8043.4542-1.0023.1452-.6565.0321-.963-.1099-1.14968-.2158-.28457-.597-.37583-.9926-.37583-.2378 0-.8043.02421-1.2469.44454-.3177.3032-.4646.71467-.5532 1.10907-.0894.4019-.1922 1.1255.4536 1.3947.1993.0882.4865.1124.6718.1124Zm-.037-1.4771c.1091-.4971.2378-.91431.5665-.91431.2575 0 .2762.31041.1617.80921-.0205.1107-.1145.5224-.2417.6977-.0888.1293-.1938.2077-.3099.2077-.0346 0-.2401 0-.2433-.3143-.0016-.1553.0291-.3138.0667-.486Zm2.9968 1.4132.0369-.0387c.0525-.2863.0611-.3535.1772-.933.0581-.2748.1782-.8788.2346-1.0938.1069-.0511.2104-.10118.314-.10118.2377 0 .2087.21498.1993.30068-.0087.1441-.0958.6137-.1868 1.017l-.0565.2604c-.0432.1924-.0902.3791-.1318.5699l.0181.0381c.4858-.0267.6278-.0267 1.0436-.0194l.0502-.0387c.0729-.4473.0926-.5669.2292-1.2176l.0651-.2992c.1302-.58531.1961-.88189.0997-1.12361-.1067-.27091-.357-.33631-.5822-.33631-.1493 0-.4231.03705-.6663.16081-.087.04698-.1742.10099-.2598.15522l.0746-.2974-.04-.05029c-.5187.10844-.6372.12293-1.1159.19247l-.0368.02752c-.058.47539-.1052.83259-.3116 1.76719-.0785.3444-.1601.6921-.2416 1.0356l.0219.0437c.4919-.0267.6388-.0267 1.0649-.0194Zm3.5687.0193c.0306-.1535.212-1.0638.2136-1.0638 0 0 .1545-.6678.1639-.692 0 0 .0486-.0696.0972-.0971h.0715c.6748 0 1.4367 0 2.034-.4526.4064-.31044.6842-.76885.8081-1.32598.0322-.1366.0559-.29906.0559-.46152 0-.21338-.0416-.42447-.1617-.58942-.3046-.43896-.9111-.44703-1.6111-.45034-.0022 0-.3451.00331-.3451.00331-.8962.01138-1.2556.00807-1.4032-.01055-.0125.06726-.036.18688-.036.18688s-.321 1.53273-.321 1.53522c0 0-.7681 3.2588-.8043 3.4123.7824-.0097 1.1032-.0097 1.2382.0056Zm.5948-2.72273s.3413-1.52963.3397-1.52383l.0111-.07844.0048-.05981.1364.01448s.7039.0623.7204.06395c.2778.11073.3923.39612.3123.76865-.0729.34044-.2872.62667-.5626.76492-.2268.11713-.5046.12686-.7909.12686h-.1852l.014-.07678Zm2.1251 1.31863c-.0902.3961-.1939 1.1196.4487 1.3775.2049.0898.3885.1165.5752.1068.197-.011.3796-.1128.5488-.2594-.0153.0603-.0306.1205-.0458.1809l.0291.0387c.4622-.02.6057-.02 1.1065-.0161l.0454-.0356c.0731-.4429.142-.873.332-1.7202.0926-.40589.185-.8078.28-1.21199l-.0148-.0445c-.5171.09872-.6553.11983-1.1527.19247l-.0378.03167c-.005.04118-.0102.08071-.015.12024-.0774-.12873-.1895-.23862-.3624-.30713-.2212-.08961-.7407.02587-1.1872.44476-.3138.29905-.4645.70878-.55 1.10188Zm1.0859.0242c.1107-.4882.2379-.90133.5673-.90133.2083 0 .318.19803.2957.53583-.0177.0842-.0367.173-.0594.2734-.033.1451-.0687.2889-.1035.4329-.0354.0985-.0765.1915-.1217.2534-.0848.1237-.2865.2005-.4026.2005-.0329 0-.2362 0-.2433-.3088-.0016-.1538.0292-.3121.0675-.4859Zm5.671-1.61204-.0399-.04698c-.5117.10679-.6043.12376-1.0744.18916l-.0345.0356c-.0016.00579-.003.01469-.0054.02276l-.0016-.00807c-.35.83177-.3397.65233-.6246 1.30717-.0016-.0298-.0016-.0485-.0032-.0801l-.0713-1.41954-.0448-.04698c-.536.10679-.5486.12376-1.0436.18916l-.0386.0356c-.0054.01697-.0054.03559-.0086.05587l.0032.00725c.0619.32575.047.25311.1091.76724.0289.2522.0675.506.0964.7551.0488.4171.0762.6224.1358 1.2588-.3343.5683-.4134.7833-.7352 1.2821l.0022.0049-.2266.3693c-.0259.0389-.0494.0656-.0824.0769-.0361.0185-.0831.0218-.1484.0218h-.1256l-.1866.6395.6402.0114c.3759-.0017.6121-.1828.7393-.4262l.4025-.7107h-.0064l.0424-.0501c.2708-.6005 2.3306-4.24094 2.3306-4.24094Zm-6.757 8.39884h-.2716l1.0053-3.4253h.3334l.1059-.3529.0102.3924c-.0124.2426.1728.4576.6593.422h.5627l.1937-.6596h-.2118c-.1217 0-.1782-.0316-.1711-.0995l-.0103-.3993h-1.0419v.0021c-.3369.0073-1.3429.0333-1.5466.0892-.2465.0654-.5063.2579-.5063.2579l.1021-.3533h-.9747l-.2031.701-1.0187 3.4777h-.1976l-.1939.6548h1.9413l-.065.2184h.9566l.0634-.2184h.2684l.2103-.7072Zm-.7965-2.7293c-.156.0445-.4465.1794-.4465.1794l.2583-.8754h.7744l-.1868.6378s-.2393.0145-.3994.0582Zm.0149 1.2506s-.2433.0315-.4034.0687c-.1577.0493-.4534.2045-.4534.2045l.2668-.911h.7784l-.1884.6378Zm-.4339 1.4868h-.7768l.2252-.7688h.7744l-.2228.7688Zm1.8707-2.1246h1.1198l-.161.5368h-1.1345l-.1704.587h.9928l-.7517 1.0904c-.0527.0801-.0999.1085-.1523.131-.0526.0276-.1217.0598-.2017.0598h-.2754l-.1892.6429h.7203c.3745 0 .5957-.1755.759-.4059l.5154-.7268.1107.738c.0235.1382.12.2192.1852.2506.0722.0373.1467.1012.2519.1107.1129.005.1945.0089.2487.0089h.354l.2125-.7194h-.1396c-.0801 0-.2181-.0138-.2416-.0397-.0235-.0314-.0236-.0799-.0362-.1536l-.1123-.7396h-.4598l.2017-.2473h1.1323l.1742-.587h-1.0484l.1633-.5368h1.0452l.1939-.6621h-3.1161l-.1907.6621Zm-9.4571 2.2741.2613-.8957h1.0741l.1963-.6662h-1.0751l.1641-.5514h1.0506l.1947-.645H13.571l-.1906.645h.5972l-.1593.5514h-.5988l-.1985.6776h.597l-.3483 1.185c-.047.1569.0221.2167.0659.2895.0448.071.0902.118.1922.1447.1053.0242.1774.0387.2754.0387h1.2109l.2158-.738-.5368.076c-.1036 0-.3907-.0129-.3593-.1116Zm.1232-4.2879-.2722.5068c-.0583.1107-.1107.1794-.1579.2111-.0416.0267-.124.0379-.2433.0379h-.142l-.1899.6484h.4717c.2268 0 .401-.0857.4841-.1285.0894-.0493.1129-.0211.182-.0899l.1593-.1421h1.4729l.1955-.6751H15.339l.1883-.3686H14.457Zm2.1744 4.3009c-.0251-.0372-.007-.1028.0313-.2394l.4026-1.3728h1.4321c.2087-.0031.3594-.0056.4574-.0128.1053-.0114.2198-.0501.3445-.1196.1288-.0729.1947-.1497.2503-.2378.0621-.088.1617-.2805.2473-.5772l.506-1.7372-1.4861.0089s-.4576.0695-.6591.1463c-.2033.0856-.4938.3249-.4938.3249l.1342-.4762h-.918l-1.2853 4.3914c-.0456.1706-.0761.2943-.0832.3686-.0023.0801.0981.1594.1632.2192.0769.0598.1906.0501.2997.0598.1147.0089.2778.0145.503.0145h.7055l.2166-.7533-.6316.0614c-.0675 0-.1163-.0372-.1366-.0687Zm.6936-2.5394h1.5042l-.0956.3088c-.0134.0073-.0456-.0153-.1986.0033h-1.3026l.0926-.3121Zm.3014-1.0356h1.5168l-.1091.3719s-.7149-.0072-.8294.0145c-.5038.0898-.7981.3672-.7981.3672l.2198-.7536Zm1.1409 2.3784c-.0125.0462-.0321.0743-.0597.0955-.0305.0202-.0799.0275-.1536.0275h-.2144l.0127-.3761h-.8915l-.0362 1.8384c-.0014.1327.011.2095.1053.271.0942.0767.3844.0865.7752.0865h.5586l.2017-.6882-.4863.0276-.1617.0097c-.0221-.0097-.0432-.0186-.0667-.0429-.0205-.0209-.0551-.008-.0495-.1407l.0039-.4712.51-.0218c.2754 0 .3931-.0923.4936-.1802.0958-.0843.1271-.1811.1633-.3121l.0856-.4172h-.7009l-.0894.2942Z" fill="#FEFEFE" />
            </svg>

            <svg width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M30 0H4C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#fff" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M30 1H4C2.34315 1 1 2.34315 1 4v16c0 1.6569 1.34315 3 3 3h26c1.6569 0 3-1.3431 3-3V4c0-1.65685-1.3431-3-3-3ZM4 0C1.79086 0 0 1.79086 0 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4H4Z" fill="#000" />

              <path d="M9.00201 8.55144c.3061-.38287.51383-.89696.45904-1.42229-.4481.02228-.99491.29563-1.31149.6788-.28426.32813-.53585.86374-.47026 1.36705.50302.04363 1.00556-.25143 1.32271-.62356ZM9.45529 9.27318c-.73049-.04351-1.35159.41459-1.70044.41459-.34904 0-.88324-.39266-1.46102-.38208-.75202.01104-1.44981.43624-1.83143 1.11251-.78492 1.3529-.20714 3.3596.55616 4.4615.37067.5451.8174 1.1453 1.40603 1.1237.55615-.0218.77414-.3601 1.45017-.3601.67554 0 .8719.3601 1.46063.3492.61052-.0109.99221-.5454 1.36291-1.091.4252-.6214.5993-1.2214.6102-1.2544-.0109-.0109-1.1772-.4583-1.1881-1.7999-.011-1.1234.9157-1.6577.9593-1.6908-.5233-.77402-1.34094-.86129-1.62441-.88322ZM15.8159 7.75293c1.5877 0 2.6933 1.09443 2.6933 2.68787 0 1.5991-1.1284 2.6992-2.7331 2.6992h-1.758v2.7955h-1.27V7.75293h3.0678Zm-1.7978 4.32097h1.4574c1.1058 0 1.7351-.5954 1.7351-1.6274 0-1.03202-.6293-1.62178-1.7294-1.62178h-1.4631v3.24918ZM18.841 14.24c0-1.0434.7995-1.6842 2.2173-1.7636l1.633-.0963v-.4593c0-.6635-.448-1.0604-1.1964-1.0604-.709 0-1.1513.3401-1.2589.8732h-1.1568c.068-1.0774.9866-1.8713 2.461-1.8713 1.446 0 2.3702.7655 2.3702 1.962v4.1112h-1.1738v-.981h-.0283c-.3458.6634-1.1001 1.083-1.8826 1.083-1.1681 0-1.9847-.7258-1.9847-1.7975Zm3.8503-.5387v-.4706l-1.4687.0907c-.7316.051-1.1454.3742-1.1454.8846 0 .5216.4309.8619 1.0887.8619.8562 0 1.5254-.5898 1.5254-1.3666ZM25.0187 18.1299v-.9923c.0905.0226.2946.0226.3968.0226.567 0 .8732-.2381 1.0603-.8505 0-.0114.1078-.3629.1078-.3686l-2.1547-5.97113h1.3267l1.5086 4.85403h.0225l1.5085-4.85403h1.2929l-2.2344 6.27723c-.5101 1.4461-1.0999 1.9111-2.3361 1.9111-.1021 0-.4084-.0114-.4989-.0284Z" fill="#000" />
            </svg>
          </div>
        </div>

        <div className="text-sm ">
          <h3>2.7% + \$0.30</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful transaction for domestic cards<br /><br />
            <span className="text-gray-500">+ 1.5% for international cards</span><br />
            <span className="text-gray-500">+ 1% if </span><span className="text-[#6366f1]">currency conversion</span><span className="text-gray-500"> is required</span>
          </div>
        </div>
      </div>
    </div>

    <br />

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>Financing</h3>

          <p className="mb-4">
            Give your customers the flexibility to split their purchases into monthly installments while you get paid upfront.
          </p>

          <div className="flex flex-wrap items-center gap-2">
            <svg class="PaymentLogo variant--Card " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#00D64F" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M17.5573 8.29028c1.1141 0 2.1819.43275 2.8797 1.02677.1763.15028.4405.14935.6062-.01163l.8301-.80765c.1753-.17046.1688-.44958-.0203-.60534-.5571-.45938-1.305-.9111-2.2255-1.20032l.2605-1.18928C19.9444 5.24362 19.7386 5 19.4623 5h-1.6041c-.2052 0-.3827.13772-.4254.33023l-.2345 1.05768c-2.1325.10221-3.9399 1.12287-3.9399 3.21713 0 1.81296 1.4954 2.59006 3.0737 3.12776 1.4954.5377 2.2844.7373 2.2844 1.4942 0 .777-.789 1.2351-1.9522 1.2351-1.0606 0-2.1715-.3357-3.0336-1.151-.1691-.1601-.4396-.1613-.6087-.0013l-.8921.8441c-.1745.1649-.1729.4361.0029.5995.6955.6476 1.5761 1.1166 2.5812 1.3792l-.2449 1.1016c-.057.2584.1469.502.4225.5041l1.6067.0117c.2068.0015.3864-.1371.4286-.3315l.2319-1.0592c2.5533-.1512 4.116-1.4825 4.116-3.4311 0-1.7928-1.5573-2.5499-3.4473-3.1675-1.08-.3789-2.0148-.6375-2.0148-1.41427 0-.75684.8726-1.05615 1.7446-1.05615Z" fill="#fff" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091-1.7909 4-4 4H4c-2.20914 0-4-1.7909-4-4V4Z" fill="#FFB3C7" />

              <path d="M24.7288 15.4746c-.869 0-1.5735.7041-1.5735 1.5727 0 .8684.7045 1.5725 1.5735 1.5725.869 0 1.5736-.7041 1.5736-1.5725 0-.8686-.7046-1.5727-1.5736-1.5727ZM21.2924 6.3418h-2.7198c0 2.22778-1.0248 4.2725-2.8117 5.6103l-1.0776.8064 4.175 5.6896h3.4327l-3.8416-5.2353c1.821-1.8122 2.843-4.25019 2.843-6.871ZM11.5718 18.4476h2.7792V6.3418h-2.7792v12.1058Z" fill="#17120F" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4c0-2.20914 1.79086-4 4-4h26c2.2091 0 4 1.79086 4 4v16c0 2.2091 1.79086 4 4 4h26c2.2091 0 4-1.7909 4-4V4c0-2.20914-1.7909-4-4-4Z" fill="#4A4AF4" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M8.9788 14.7853c0 1.5817.47151 3.0531 1.2808 4.2859H8.06811c-.65622-1.3334-.99681-2.7998-.99541-4.2859 0-5.37168 4.3707-9.74233 9.7423-9.74233s9.7423 4.36954 9.7423 9.74233c.0014 1.4861-.3392 2.9525-.9954 4.2859h-2.1937c.8081-1.2328 1.2808-2.7053 1.2808-4.2859 0-4.3205-3.5146-7.83512-7.8351-7.83512-4.3205 0-7.8351 3.51462-7.8351 7.83512Zm4.0061-3.2457c.8918-.7112 2.5337-1.3834 3.9605-1.3834 2.1101 0 3.7297.9464 3.7286 3.275v5.6391h-2.3141v-1.3454c-.5261.9107-1.5015 1.6007-2.7432 1.6007-1.856 0-2.984-.9452-2.984-2.5103 0-1.9729 1.9975-2.7755 4.568-3.0118.6844-.0624 1.0478-.3155 1.0478-.7647 0-.6677-.5462-.9987-1.5372-.9987-1.0422 0-2.1981.5584-2.9127 1.2127l-.8137-1.7132Zm2.1235 5.1297c0 .5273.4113.8483 1.1615.8483 1.1604 0 1.9306-1.0623 1.9306-2.2126-1.7489 0-3.0921.2652-3.0921 1.3643Z" fill="#fff" />
            </svg>

            <svg class="PaymentLogo " width="34" height="24" viewBox="0 0 34 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 4C0 1.79086 1.79086 0 4 0H30C32.2091 0 34 1.79086 34 4V20C34 22.2091 32.2091 24 30 24H4C1.79086 24 0 22.2091 0 20V4Z" fill="#1A0826" />

              <path d="M12.8687 8.89868L13.682 15.5161H21.6355L20.822 8.89868H12.8687Z" fill="#AA8FFF" />

              <path d="M15.1376 6.37334C15.6448 6.85023 15.7144 7.60027 15.293 8.04864C14.8715 8.49701 14.1186 8.47388 13.6114 7.997C13.1041 7.52013 13.0345 6.77009 13.4559 6.32172C13.8774 5.87336 14.6303 5.89646 15.1376 6.37334Z" fill="#FFFFFA" />

              <path fill-rule="evenodd" clip-rule="evenodd" d="M29.9706 11.2815C29.7875 9.79323 28.6185 8.89348 27.0309 8.8987H21.7427L22.556 15.5161H24.936L24.7739 14.1926H27.2925C29.2723 14.1926 30.1798 12.9581 29.9706 11.2815ZM27.0335 12.3382L24.5437 12.3408L24.3475 10.7532L26.8505 10.7558C27.4389 10.7636 27.7397 11.0932 27.7894 11.5483C27.8207 11.8386 27.6873 12.3382 27.0335 12.3382Z" fill="#FFFFFA" />

              <path d="M4.58584 13.6669L4.81337 15.5161H12.7588L12.4973 13.4001H8.79396L8.75996 13.1359L12.173 10.7531L11.9455 8.89868H4L4.25892 11.0173H7.97013L8.00413 11.2815L4.58584 13.6669Z" fill="#FFFFFA" />
            </svg>
          </div>
        </div>

        <div className="text-sm ">
          <h3>15%</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful transaction through our financing partners<br /><br />
          </div>
        </div>
      </div>
    </div>

    <br />

    <div className="-mx-6 border-t mb-6 border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div>
          <h3>ACH</h3>

          <p className="mb-4">
            Accept ACH direct debit payments from US bank accounts.
          </p>

          <div className="flex flex-wrap items-center gap-2" />
        </div>

        <div className="text-sm ">
          <h3>1.5%</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful ACH debit transaction
          </div>
        </div>
      </div>
    </div>

    <br />
  </div>
</Update>

<Update label="Global payouts" description="200+ countries">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8f0f8fd4a00941062a09cee28a318f39" className="mt-0 mb-0" alt="Fees" width="88" height="88" data-path="images/payouts.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d37cac1aaaf56d35bc528d1328e7b455 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=fb629a87212d86c895e3ec2caa61f0f7 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a21b7afc8da424de2cc7c5e4d55e7518 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f76cd2d282fb06e2ae9b5bc51f67c8ca 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=99242af9f0456679c90d73c69de0456a 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payouts.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=09e743185aace947595f0109ec998729 2500w" data-optimize="true" data-opv="2" />
        </div>

        <div className="flex flex-col mx-0 my-0">
          <h2 className="m-0 p-0 mx-0 my-0">Payouts</h2>
          <p className="m-0 p-0">Accept money and get paid out as fast as you want.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Get paid anywhere in the world with global payout options.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Flexible payout methods including crypto, Venmo, and wire transfers.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Same-day payouts available for immediate cash flow.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Next day ACH</h3>

          <p className="mb-4">
            Accelerated ACH transfer to U.S. bank accounts, delivered by the next business day (faster settlement speed).
          </p>
        </div>

        <div className="text-sm">
          <h3>\$2.50</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Instant Bank Deposit (RTP)</h3>

          <p className="mb-4">
            Real-time bank transfer to supported accounts with funds available instantly (where supported).
          </p>
        </div>

        <div className="text-sm">
          <h3>4% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Crypto</h3>

          <p className="mb-4">
            Cryptocurrency payout (e.g. Bitcoin, Ethereum) with global reach.
          </p>
        </div>

        <div className="text-sm">
          <h3>5% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Venmo</h3>

          <p className="mb-4">
            Instant payout to a recipient's Venmo wallet (available for U.S. recipients only).
          </p>
        </div>

        <div className="text-sm">
          <h3>5% + \$1.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Bank wire</h3>

          <p className="mb-4">
            Traditional bank wire transfer (will typically take 1–2 business days to process in the US).
          </p>
        </div>

        <div className="text-sm">
          <h3>\$23.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>International local banks</h3>

          <p className="mb-4">
            Local bank transfer in your country and currency (timing varies by country).
          </p>
        </div>

        <div className="text-sm">
          <h3>Varies by country</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per successful payout
          </div>
        </div>
      </div>
    </div>
  </div>
</Update>

<Update label="Fraud and security">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6ba6d3ace3fa3f59ae62842ec034eb05" className="mt-0 mb-0" alt="Fees" width="88" height="88" data-path="images/fraud.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a26c1c7e477a260335a3f38cff20c49e 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=eba14e1b129e54e8069674c1e93e9de8 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=df04024ed713619ad221d909fffb2e20 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=11ec290eaa88878f22a7ade09fb13ec0 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=3d133c804a8f903fbb4e7ffe21422521 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/fraud.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=81599082788b8b3dff28dee1c529f563 2500w" data-optimize="true" data-opv="2" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Fraud and security</h2>
          <p className="m-0 p-0">Protect your business against fraud and disputes.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> 0% of transaction amount.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Transparent flat-rate pricing per event.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> No hidden fees. No guessing.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>3DS</h3>

          <p className="mb-4">
            Fee for authenticating cards using 3D Secure to reduce fraud.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$0.03</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per transaction
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-4 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Radar</h3>

          <p className="mb-4">
            ML-based fraud detection fee.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$0.07</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per transaction
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Dispute</h3>

          <p className="mb-4">
            Flat fee applied when a chargeback or dispute occurs.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$15.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per dispute
          </div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Early dispute alert (RDR)</h3>

          <p className="mb-4">
            Proactive chargeback notification fee.
          </p>
        </div>

        <div className="text-sm">
          <h3>\$29.00</h3>

          <div className="text-gray-700 dark:text-gray-300">
            per alert
          </div>
        </div>
      </div>
    </div>

    <br />

    <br />
  </div>
</Update>

<Update label="Revenue optimization">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=928aeafa6fb3ec779a7f2732cff16632" className="mt-0 mb-0" alt="Fees" width="88" height="88" data-path="images/revenue.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=cd582a3b0443a52cbc810573c331a035 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f34c08b9d116b5fe0e276d0045bd679c 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=56b1a74b56cf9b6d78e3ea22821b2e92 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=12eb268c029e4c67884ba384f9dc3673 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b9d41d07e4ecb8b725acb3cead0d5bf6 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/revenue.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4d6b4b02da345bb24e08f7c68f515a0a 2500w" data-optimize="true" data-opv="2" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Revenue optimization and automation</h2>
          <p className="m-0 p-0">Tools to reduce payment failures and increase revenue.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div className="space-y-2">
      <div>
        <Icon icon="check" iconType="solid" /> Automated systems that boost revenue and reduce churn.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Pricing optimized to reflect real cost of global scale infra.
      </div>

      <div>
        <Icon icon="check" iconType="solid" /> Transparent and minimal fees per event.
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Orchestration</h3>

          <p className="mb-4">
            Route payments through multiple payment service providers to boost revenue by \~6%.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.8%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction (when enabled)</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Billing</h3>

          <p className="mb-4">
            Automated invoice generation, retries, and lifecycle handling.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.5%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Tax and remittance</h3>

          <p className="mb-4">
            Handle global tax calculation, collection, and compliance.
          </p>
        </div>

        <div className="text-sm">
          <h3>0.5%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction (when enabled)</div>
        </div>
      </div>
    </div>

    <br />

    <br />
  </div>
</Update>

<Update label="Service fees">
  <div className="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 pb-0 dark:border-gray-800 dark:bg-[#0f0f13]">
    <div className="flex items-baseline justify-between">
      <div className="flex items-start gap-3">
        <div className="h-[44px] w-[44px] rounded-md">
          <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=192e70b58ac070c23b3652dbcf3b0481" className="mt-0 mb-0" alt="Fees" width="88" height="88" data-path="images/service.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6907544d23a414c3ba94bfea93b90455 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8d66539c67a284edc2023af6f435e40c 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8018087c48e6b9de72a28bda9ee0c976 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a24172f5fb2fba8ece90c8520080b2ac 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a050e6d1fcede417f47d7b82770929e4 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/service.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=11eceef84908c28c1ad4f56d10c9b9aa 2500w" data-optimize="true" data-opv="2" />
        </div>

        <div className="flex flex-col">
          <h2 className="m-0 p-0">Service fees</h2>
          <p className="m-0 p-0">Transparent service fees with no hidden costs or surprises.</p>
        </div>
      </div>

      <div>[Start today →](/apps/docs/payments/taxes)</div>
    </div>

    <div />

    <div className="space-y-2" />

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Whop platform fee</h3>

          <p className="mb-4">
            Applied only to purchases with automations like Discord, Telegram, and Trading View.
          </p>
        </div>

        <div className="text-sm">
          <h3>3%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>

    <div className="-mx-6 mb-6 border-t border-gray-200 dark:border-gray-800">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 p-6">
        <div>
          <h3>Service Fee</h3>

          <p className="mb-4">
            General platform and infrastructure fee to support core functionality (charged to buyers).
          </p>
        </div>

        <div className="text-sm">
          <h3>0%</h3>
          <div className="text-gray-700 dark:text-gray-300">per transaction</div>
        </div>
      </div>
    </div>
  </div>
</Update>

Interested in what other platforms charge? Pricing above is applicable to new merchants that sign up today. For enterprise customers, please book a call with our sales team [here](https://calendly.com/d/cv3h-5mq-vc2/whop-payments-enterprise-call).

| Platform  | Pricing                                                                    |
| --------- | -------------------------------------------------------------------------- |
| Stripe    | [stripe.com/pricing](https://stripe.com/pricing)                           |
| Square    | [squareup.com/pricing](https://squareup.com/us/en/pricing)                 |
| Shopify   | [shopify.com/pricing](https://www.shopify.com/pricing)                     |
| Braintree | [braintreepayments.com/pricing](https://www.braintreepayments.com/pricing) |
| Adyen     | [adyen.com/pricing](https://www.adyen.com/pricing)                         |


# What is Whop?
Source: https://docs.whop.com/get-started

Whop is a platform to launch and scale internet businesses.

Whop is on a mission to deliver everyone a sustainable income. That means that we help people choose what to sell, build their product, and get them customers. Businesses use Whop to sell information, software, and services.

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/9gZS9SQn_B0?si=0BPZ1dlKqUnJBVhV&modestbranding=1&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin " allowfullscreen />

<Check>Businesses on Whop earn over \$1 billion every year.</Check>

## Get started

<CardGroup cols={1}>
  <Card title="Launch your business" icon="sparkles" href="/launch-your-business">
    Start an online business with a few clicks.
  </Card>
</CardGroup>

## Using Whop to accept payments

This works well if you've already built your business on other tools but want better payment processing.

<CardGroup cols={1}>
  <Card title="Start with payment processing" icon="credit-card" href="/payments/overview">
    Use Whop to process payments and create checkout links.
  </Card>
</CardGroup>

## Common business models

Learn how to set up popular business models on Whop:

<CardGroup cols={3}>
  <Card title="Educational programs" icon="people-group" href="/supported-business-models/educational-programs">
    Sell courses, workshops, and other educational programs.
  </Card>

  <Card title="Agency services" icon="gear" href="/supported-business-models/agency-services">
    Send invoices, chat with clients, and get paid.
  </Card>

  <Card title="Coaching" icon="graduation-cap" href="/supported-business-models/coaches">
    Charge for your services and organize your clients in one spot.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="Newsletters" icon="chart-line" href="/supported-business-models/newsletters">
    Publish long form writing and charge subscribers for exclusive content.
  </Card>

  <Card title="Paid groups" icon="people-group" href="/supported-business-models/paid-groups">
    Build a paid community where members connect and share alpha.
  </Card>

  <Card title="SaaS" icon="laptop" href="/supported-business-models/saas">
    Launch your app with built-in payments and user management.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="Events" icon="calendar" href="/supported-business-models/events">
    Run paid masterminds, events, and give attendees a unified place to chat.
  </Card>

  <Card title="DTC Ecommerce" icon="gear" href="/supported-business-models/dtc-ecommerce">
    Sell physical products online with an out of the box social layer.
  </Card>

  <Card title="Brick and Mortar" icon="store" href="/supported-business-models/brick-and-mortar">
    Accept in-store payments and manage memberships for your physical location.
  </Card>
</CardGroup>


# Launch your business
Source: https://docs.whop.com/launch-your-business

Create an account on Whop and launch your business.

To launch your online business on Whop, you first need to make an account.

<Steps>
  <Step title="Go to whop.com/sell" titleSize="h3">
    * Head over to [**whop.com/sell**](https://whop.com/sell)
    * Click **Start selling**
  </Step>

  <Step title="Choose how you plan to use Whop" titleSize="h3">
    Select the option that matches how you plan to use Whop

    1. **Build & sell digital products on Whop:** Choose this option if you plan to use Whop for building, hosting, and selling your digital products as well as accepting payments.
    2. **Use Whop for payment processing only:** Choose this option if you want to use Whop to process payments and create checkout links only - but host and deliver your product elsewhere.

    Select the option that best fits how you plan to use Whop, then click **Next**.
  </Step>

  <Step title="Name your business" titleSize="h3">
    Choose a name for your business.

    <Tip>
      You can always change this later.
    </Tip>
  </Step>
</Steps>

## Next steps

To launch your internet business, make sure you’ve completed the rest of the setup steps:

<CardGroup cols={3}>
  <Card title="Add apps to your whop" icon="block-brick" href="/add-apps">
    Choose from dozens of apps to create exactly what you need.
  </Card>

  <Card title="Set up pricing" icon="dollar-sign" href="/set-up-products-pricing">
    Choose your pricing model and what members get when they join.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Your store page is where visitors come to learn about your offer.
  </Card>
</CardGroup>


# Affiliate program
Source: https://docs.whop.com/manage-your-business/growth-marketing/affiliate-program

Learn how to set up an affiliate program for your whop

Set up your affiliate program to automatically pay commissions when someone refers a new paying member to your whop.

## How the affiliate program works

When someone uses a referral link to join your whop and makes a purchase, the person who referred them earns a commission.

Here's how it works:

* You turn on the affiliate program
* Users get access to their unique affiliate link for your whop
* They share their link anywhere they want
* When someone joins through their link, Whop automatically tracks the referral and pays the commission
* You can customize commission rates anytime to fit your business model

## How to set up your affiliate program

<Steps>
  <Step title="Go to your affiliate settings" titleSize="h3">
    To find your affiliate program:

    1. Go to your **Dashboard**
    2. Make sure you're viewing the correct whop using the selection modal at the top left
    3. Click the **Marketing** dropdown
    4. Select **Affiliates**
  </Step>

  <Step title=" Set commission rates for your whop" titleSize="h3">
    1. Click **Set the affiliate commission for a specific whop**
    2. You'll see all your whops with two key settings:
       * **Global affiliate rate:** This is the commission rate offered to any user who refers others to your whop. The default is 30%, but you can adjust it to any percentage you prefer
       * **Member affiliate rate:** This is the commission rate specifically for your existing members who refer others. This allows you to reward your community differently than general affiliates (e.g. members get 50% commission while the global rate is 30%)

    <Tip>
      If you set the 'Member affiliate rate' to 0%, members will earn the global affiliate rate instead.
    </Tip>
  </Step>

  <Step title="Activate your affiliate program" titleSize="h3">
    After making changes, click the blue tick button to confirm your new rates.
  </Step>
</Steps>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dadb09dcba87befdae99f8eaefc390cc" alt="Affiliates program" width="1224" height="720" data-path="how-to-videos/affiliates720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bd5f9483429ace9ba2707b4396932024 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e854b74fd08306652342f9585ee78005 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b51a2c81107980ea5ebcc333f692e1bb 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7705f9cce4c74a11b39657ae9816659b 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c6559a8276f7fc9941e8d745794a9c8e 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/affiliates720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e85ffbaf73c3bc3bbca7feaa38f9107a 2500w" data-optimize="true" data-opv="2" />

### How to create custom rates for partnerships

For special partnerships or top performers, you can create custom commission structures:

1. Click **Set an affiliate commission for a specific user**
2. Enter the user's Whop account email address
3. Configure their reward:
   * Choose between **Percent** and **Fixed amount**
   * Select **Recurring payments** (ongoing commissions) or **First payment** (one-time commission)
   * Select which whops this rate applies to
4. Click **Invite** to send them an invitation

## Payment timing

Whop automatically handles all affiliate payments for you. There is a 30-day waiting period between when a referred customer makes their purchase and when the affiliate receives their commission.


# Automated messages
Source: https://docs.whop.com/manage-your-business/growth-marketing/automated-messaging

Learn how to send automated marketing messages on Whop

You can set up automated messages on Whop to send personalized DMs and emails when:

1. Someone joins your whop;
2. Someone leaves your whop; and
3. Someone checks out your store page but doesn't buy.

## How to find the automated messages settings

1. **Open your Dashboard**: From your Whop account, click **Dashboard** on the left side of your screen to access your whop's advanced settings.
2. **Find Automated messages**: Under the **Marketing** section in your sidebar, click **Automated messages**.

Here, you'll see three automated message options: User joined, User left, and New lead.

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=36310acde294719cff2219909bda1bf6" alt="Automatic messages" width="1222" height="720" data-path="how-to-videos/automessages.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0661265c83d150540b0a7126696e0864 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7f3e80ed7b6837759166593549033278 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=37a18d9a03548c899bac14684f1dcbee 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8a9a82f72a0f1243a3a74e30c6b8a307 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4794b8bab5f7f4a2b7f07aaf5e31a701 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/automessages.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=37df086c241f31ad9c4669579fd81092 2500w" data-optimize="true" data-opv="2" />

## How to set up 'User joined' messages

Send welcome messages automatically when new members join your whop. Use this feature to greet new members, let them know what their next steps should be, or upsell your higher ticket offers (potentially even offering a discount code).

<Steps>
  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **User joined** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    After enabling, you'll see several customization options:

    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that's sent to new members
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your User joined automation.
  </Step>
</Steps>

## How to set up 'User left' messages

Send a message when someone leaves your whop and decides they don't want to be a member anymore. Use this feature to gather feedback (to learn why they left), or even try entice them back with a discount.

<Steps>
  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **User left** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    After enabling, you'll see several customization options:

    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that will be sent to churned members
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your User left automation.
  </Step>
</Steps>

## How to set up 'New lead' messages

Send messages to people who click on your popup promotions.

<Tip>
  For the 'New lead' messages to work properly, you first need to enable popup promotions.
</Tip>

<Steps>
  <Step title="Enable popup promotions on Whop" titleSize="h3">
    Before setting up New lead messages, enable popup promotions on your store page.

    <Card title="Set up popup promotions" icon="hand-wave" href="/manage-your-whop/popup-promotions">
      Learn how to set up popup promotions on your store page.
    </Card>
  </Step>

  <Step title="Enable the automation" titleSize="h3">
    Click **Enable automation** on the **New lead** card to activate this automated message.
  </Step>

  <Step title="Set up your automated message" titleSize="h3">
    * **Toggle button**: Turn this on or off anytime (top right)
    * **Message field**: Write the message that will be sent to new leads
    * **Variables**: Add these variables to personalize the message:
      * recipient\_name - Shows their actual name
      * whop\_name - Shows your whop's name
      * store\_page\_url - Direct link to your store page
      * discount\_percentage - The discount percentage from your popup promotion
    * **Add media**: Upload images or videos to your message
    * **Send email option**: Check this box if you want users to also receive an email notification (in addition to the DM on Whop)
    * **Send message as**: Select which team member the message should appear to come from
  </Step>

  <Step title="Save your settings" titleSize="h3">
    Click **Save** to activate your New lead automation.
  </Step>
</Steps>

You can return to these settings anytime to change your messages or turn automations on and off.


# Content Rewards
Source: https://docs.whop.com/manage-your-business/growth-marketing/content-rewards

Learn how to use Content Rewards to grow your social presence

Content Rewards is a marketing tool that connects your brand with content creators - they make content about your brand and you pay them for the number of views they get.

## What are Content Rewards?

Content Rewards is a tool to incentivize your customers to talk about your brand. They create content, post it to their social media, and you pay them based on views - but only after you approve their post.

**There are two types of campaigns you can run with Content Rewards:**

* **Content clipping:** Creators turn your existing long-form content (podcasts, livestreams, webinars) into short clips for TikTok, YouTube Shorts, X and Instagram Reels. Perfect when you have:
  * Podcasts or livestreams with great moments
  * Webinars with key talking points
  * Educational videos with quotable segments
  * Any long-form content that could work as short clips
* **User-generated content (UGC):** Creators produce original content featuring your brand based on guidelines you provide. Great for:
  * Customer testimonials and success stories
  * Brand awareness campaigns
  * Showing your services in action

You tell them what you want, and creators make original content that hits your requirements.

## How do Content Rewards work?

Content Rewards is an automated system that manages creator relationships and payments:

1. **Set up your campaign:** Choose your campaign type (clipping or UGC) and provide details about your brand and campaign goals
2. **Configure payment settings**: Set how much you will pay per 1,000 views and your budget for the campaign
3. **Creators make and distribute content**: Creators post content to their social media accounts, following your guidelines and requirements
4. **Review submissions:** Check submissions to see whether creators have followed your requirements, approving the ones that do and rejecting the ones that don’t
5. **Performance tracking and payments**: After approving a submission, Whop automatically pays the content creator based on the number of views they got

## Set up your first campaign

### Step 1: Add the Content Rewards app to your whop

* Go to your whop and click **Add app** to go to the Whop App Store
* Select **Content Rewards** from the available apps
* Click **Add** to include it in your whop

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d7772a15785e4c6246aeea1ce73e14bf" alt="Add Content Rewards app" width="1222" height="720" data-path="how-to-videos/setupcontentrewards.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=5011257c086a2837673b84d16652809f 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=58e27e4e233282e971ecabe812b3f514 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=5255df3c664d911def1c8738bd6f33ea 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=29b71d1fa1797e87a9ad624e50ee5484 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dd31ff9f8a46541ff0a633203332d6fb 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/setupcontentrewards.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=73f97774e304e6b5c1dd5bb0089b7084 2500w" data-optimize="true" data-opv="2" />

<Card title="Create your whop" icon="sparkles" href="/create-account">
  If you don't have a whop yet, click on this card to learn how to set up your
  account.
</Card>

### Step 2: Create your first campaign

When you add the Content Rewards app, you'll see a form with all the settings you need to configure. Here's what each field means and how to set it up:

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=694043684471f07e3fce987734c83502" alt="Configure Content Rewards" width="912" height="721" data-path="images/croptions1.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4ab07b4e2e118f691f2dbd52eb142bc7 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=85bc961678a246b3b2b57d79afa3b572 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=af70a21fa614b8a22329097e8e63082d 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=5857485f23cdc774daa63708e6423b03 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=efb47fd3c8c86df066404801f1d96c0b 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/croptions1.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d68e08745cc974708a58fddec380b4ee 2500w" data-optimize="true" data-opv="2" />

<Steps>
  <Step title="Campaign name">
    Your campaign name will be seen publicly by creators, so make it clear and appealing.

    * Enter a descriptive name that represents your brand or specific campaign (e.g. Laptop Lunch Prep UGC Campaign)
    * You can also include your reward rate in your title (Fanatics UGC - \$3 per 1,000 views) to entice content creators
  </Step>

  <Step title="Campaign type">
    Select the type of content you want creators to make:

    * **Clipping**: Creators take your existing videos or podcasts and turn them into short-form content
    * **UGC (User-Generated Content)**: Creators make original content featuring your brand
  </Step>

  <Step title="Brand category">
    Pick the category that best represents your brand. This helps creators understand your niche and create better targeted content.
  </Step>

  <Step title="Campaign budget">
    Enter the total amount you're willing to spend on this campaign. Think of this like ad spend, but instead of paying a platform directly, you're investing in creators who will promote your brand. You can select your preferred currency from the dropdown menu.

    <Tip>
      Note: You will not be charged until you set up your payments on Whop and deposit funds.
    </Tip>
  </Step>

  <Step title="Reward rate">
    Set how much creators earn per 1,000 views on their videos.

    <Tip>
      * UGC content typically pays higher rates than clipping
      * Higher rates attract better creators
    </Tip>
  </Step>

  <Step title="Minimum payout">
    Set the minimum amount a creator can earn from their video before it gets submitted for your review. If you set this to \$0, every single video submission (even with just a few views) will need to be reviewed. To focus on quality content that's actually performing, set a minimum payout amount.

    * **Example**: With a \$3 reward rate and \$6 minimum payout, only videos with at least 2,000 views will be submitted for review (\$3 × 2 = \$6 earned).
  </Step>

  <Step title="Maximum payout">
    Cap how much a single creator can earn from one video to protect your campaign budget. Without a cap, one video with hundreds of millions of views could consume your entire budget, leaving nothing for other creators. The maximum payout ensures your budget gets distributed across multiple creators and videos.

    * **Example**: With a \$3,000 max payout and \$3 reward rate, a creator stops earning once their video hits 1 million views, even if it continues growing.
  </Step>

  <Step title="Flat fee bonus (optional)">
    When you set a flat fee bonus, every approved submission earns both the view-based reward AND the flat fee amount. This can help attract more creators, especially when you're launching a new campaign.

    * **Example**: With a \$3 reward rate, \$10 flat fee, and 2,000 views, a creator earns \$16 total (\$6 from views + \$10 flat fee).
  </Step>

  <Step title="Platform selection">
    Choose which social media platforms you'll accept submissions from.
  </Step>

  <Step title="Available content">
    This is where you communicate what you want and give creators everything they need to make great content for your brand. Here's what to include:

    * Brand guidelines and details about your brand
    * Your campaign goals and messaging
    * Examples of content that's worked for your brand (case studies, successful hooks, etc.)
    * For clipping campaigns: Access to your video footage and any assets they can use

    <Tip>
      Pro tip: Upload a comprehensive Google Doc with all your guidelines and examples, then paste the shareable link here. You can always update the document later without changing your campaign settings.
    </Tip>
  </Step>

  <Step title="Requirements">
    Clearly outline the rules creators must follow for their submissions to be approved and paid:

    * Content quality standards
    * Brand mention requirements
    * Prohibited content guidelines
    * Video length or format specifications
    * Any specific messaging that must be included

    This protects your brand and ensures you only pay for content that meets your standards.
  </Step>
</Steps>

### Step 3: Fund and launch your campaign

After creating your campaign, you'll see the Add budget popup automatically.

To add funds:

1. Pick how you want to pay (whop balance, card, Cash App, etc.)
2. Enter the amount
3. Click **Send**

The payment takes about a minute to process. Your Content Reward will automatically move from **Pending budget** to the **Active** tab once it is complete.

### **Top up your balance**

You can add more money anytime by:

1. Clicking the 3 dots (···) on your campaign
2. Selecting **Add budget**
3. Entering the amount and clicking **Send**


# Popup promotions
Source: https://docs.whop.com/manage-your-business/growth-marketing/popup-promotions

Learn how to set up popup promotions on your store page

Popup promotions show a discount offer to people who've been browsing your store page for 45+ seconds or are about to click away. Even if they don't purchase immediately, you capture their contact info so you can follow up later.

## Enable popup promotions

<Steps>
  <Step title="Access your store settings" titleSize="h3">
    Go to your **Dashboard** and click **Edit store page** under the Admin area of your whop, then click the **Edit details** button on the store page.
  </Step>

  <Step title="Turn on popup promotions" titleSize="h3">
    In the Edit details popup, scroll down to find the **Enable popup promotion** setting and toggle it on.
  </Step>
</Steps>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e338da0a2ceafa83c698543b26c86d0a" alt="Popup" width="1222" height="720" data-path="how-to-videos/enablepopup720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a38518b38d387426b0a595ec2f4a3951 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=176be5e917d8be4e646538a04aa10e68 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8090de6c962704ea54e2c6dee76fd572 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a416a709acbafe2fec70e346a7d424f5 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8b97f354af38f4c497953949aee6c77e 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/enablepopup720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=3269a886c28f9a4c8a88e4b4e068feb3 2500w" data-optimize="true" data-opv="2" />

## Set up your popup promotion

When you enable popup promotions, you'll need to configure the settings:

* **Set your discount percentage**: Use the **Discount percentage** field to decide how much of a deal you want to offer. This is what visitors will see when they've been browsing for 45+ seconds or are trying to leave your store page (showing exit intent).

## View and contact your leads

When popup promotions are running, you can view your leads and follow up with them directly.

<Tip>
  Your list of leads includes everyone who has clicked the 'Claim' button on your popup promotion
</Tip>

<Steps>
  <Step title="Check your leads" titleSize="h3">
    Go to **Dashboard** > **Leads** to see everyone who has interacted with your popup promotions.
  </Step>

  <Step title="Review lead details" titleSize="h3">
    For each lead, you'll find:

    * Username
    * Which whop they visited
    * Email address
    * Visit date
  </Step>

  <Step title="Reach out to your leads" titleSize="h3">
    Click the **Send message** button next to any lead to contact them directly and encourage them to complete their purchase.
  </Step>

  <Step title="Export your data (optional)" titleSize="h3">
    Click **Export** in the top right to download your list of leads.
  </Step>
</Steps>


# Promo codes
Source: https://docs.whop.com/manage-your-business/growth-marketing/promo-codes

Learn how to create and manage promo codes

Use promo codes to offer percentage discounts (like 10% off) or fixed amounts (like \$10 off) that people can apply at checkout to join your whop.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/tIdnAPTwt7g?si=jtsX6HJOG-Lh3KlE&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## How to create a promo code

<Steps>
  <Step title="Access your dashboard" titleSize="h3">
    Head over to your **Dashboard.**

    <Tip>
      Make sure you're viewing the whop you want to create a discount for (using the whop selection modal at the top left).
    </Tip>
  </Step>

  <Step title="Navigate to Promo codes" titleSize="h3">
    Click the **Marketing** dropdown and select **Promo codes**. You'll see any existing promo codes you've already created for your whop here.
  </Step>

  <Step title="Create a new code" titleSize="h3">
    If this is your first promo code, click **+ Create Promo Code** in the center of your page. If you've already created a promo code (and you want to create a new one) click **+ Create promo code** at the top right of your screen. A popup will appear where you'll set up your code.
  </Step>

  <Step title="Set up your promo code" titleSize="h3">
    Configure the settings for your promo code:

    1. **Code**: This is the actual promo code name, like "SAVE20" or "WELCOME10." Type what you want your code to be called.
    2. **Discount**: Decide how much your discount will be
       * Use the dropdown to pick either a **Percentage** (like 10% off) or a **Fixed amount** (like \$10 off).
       * Then, enter the discount value in the field above the dropdown.
    3. **Discount duration:** Decide how long the discount applies
       * **One-time (default)**: The discount is applied only once.
       * **Forever**: The discount applies to all future payments.
       * **Multiple months**: The discount applies for a specific number of months (a field will pop up for you to enter the number).
    4. **Eligible users**: Who can use this code?
       * **Everyone (default)**: Anyone can use it.
       * **Only new**: Only new customers can use this code.
       * **Only churned**: Only previous customers who have left can use it.
    5. **Expires**: Set when the promo code expires using the date and time selector. This is enabled by default and set to one month from creation.
    6. **Usage limit section**: Enter the maximum number of times this code can be used. Default is set to 100 uses.
    7. **One per customer**: If you enable this, each customer can only use the promo code once. This is enabled by default.
    8. **Apply to specific whops**: This is off by default. If you turn it on, you can limit the promo code to certain checkout links within your organization.
  </Step>

  <Step title="Activate your code" titleSize="h3">
    Click **Create** at the bottom of the popup to make your promo code live.
  </Step>
</Steps>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=52530f1219506763540c56263eb517e1" alt="Promo code" width="1222" height="720" data-path="how-to-videos/promocode720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=043a31f718aa70b1e5eaac325def8c57 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ca1353f98c1db6b7a753dc3f3ef25bfe 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4c456ccb343ba7c482e5eae7f83ec49b 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ac68181ba467cb4de9ef0ebb93fa2117 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=52e3bd4e5e1f60304fb8f731d525c5b6 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/promocode720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=1db8df575a849de8c44e99f3531d7317 2500w" data-optimize="true" data-opv="2" />

## Manually expire a promo code

If you need to deactivate a promo code before its set expiration date, you can manually expire it.

1. **Access the promo code options**: Click the three dots (︙) next to the promo code you want to expire.
2. **Click Expire**: Select **Expire** from the dropdown menu that appears.
3. **Confirm expiration**: A confirmation message will pop up. Click **Expire** to permanently deactivate the promo code.

<Warning>
  When a promo code is expired, you can't reactivate it. If you want to offer that same discount again, you'll need to create a brand new promo code.
</Warning>


# Tracking links
Source: https://docs.whop.com/manage-your-business/growth-marketing/tracking-links

Set up tracking links to see where your users are coming from

Create custom tracking links to see exactly where traffic is coming from and which marketing efforts are working.

<Tip>
  Use different links for your emails, Twitter posts, Instagram bio, YouTube descriptions - then compare which channels convert best.
</Tip>

### How to set up tracking links

1. Go to **Dashboard** > **Marketing** > **Tracking links**
2. Click **+ Create tracking link**
3. Fill out these details:
   * **Name**: A name only you can see
   * **Whop**: Choose which whop it links to
   * **Destination**: This is where the user will be sent after they click the link
     * Select **Checkout** if you want the link to send them straight to a checkout page
     * Select **Store** if you want the link to send them to your store page
   * **Plan**: Pick the pricing plan you want to link to
4. Create a custom URL for each link
5. Click **Create**
6. Copy your link by clicking the 3 dots (︙) > **Copy link**

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=48ab50bd69e870f83a6dd3596abbca94" alt="Tracking links" width="1222" height="720" data-path="how-to-videos/trackinglinks720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c328549fdb6ac0b6cdbf5b9bed1796b8 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=045e06b3fa4e65b400a2c160e9a2f145 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0a67ff063e0eff2e73ae2fcc40077461 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=58cfc1662a72c5475c9383f9a6cdcb80 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=76d4f0a582d8b45c35684f7e9ae70764 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/trackinglinks720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=cfd734849c2ed17a89f5723a295eec68 2500w" data-optimize="true" data-opv="2" />

### What you can measure with tracking links

When your tracking links are live, you'll see exactly how each link performs with detailed analytics.

Here's what you can track:

* **Clicks**: Total number of people who clicked your link
* **Revenue generated**: Actual dollars earned from each link
* **Conversion rate**: Percentage of clicks that turn into paying customers
* **Converted users**: Number of people who actually bought after clicking

<Card title="Set up external tracking integrations" icon="magnifying-glass" href="/manage-your-whop/integrations">
  Whop integrates with major analytics platforms to help you get the full picture of your marketing and monitor your traffic
</Card>


# Analytics
Source: https://docs.whop.com/manage-your-business/manage-business/analytics

Understand Whop's built-in analytics

Whop’s built-in analytics help you understand how your business is growing, your financial performance, and who your customers are.

## How to view your analytics

To view your analytics:

1. Go to your **Dashboard**
2. Click **Home**

### How to add analytics widgets to your Dashboard

Widgets are metric cards that show your most important business stats at a glance. Choose which metrics you want to track and customize your dashboard layout.

Here's how:

1. Go to **Dashboard** > **Home**
2. Click **+ Add** on the right side under **Stats**
3. Click **+** on the widgets you want
4. Click **Apply** when you're done
5. Drag them around to organize them how you want
6. Click **Done** (next to **+ Add**) to save your new widget layout

<Tip>
  The dashboard widgets are organized into three main categories: Users,
  Payments, and Resolution Center. Each category provides specific stats to help
  you understand different aspects of your business performance.
</Tip>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=20f239a74cd70fe60d84d9c88c1337b0" alt="Analytics" width="1282" height="720" data-path="how-to-videos/analytics720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=39b178575d21d0bb1a74f85810768c35 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f2fcb31bf336fc8146f51792ea9c8db7 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=465f902ff5da9cca1eaa30c8f7dc425a 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=58a2457e8a67fc36ca69d3ff17552e20 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=be83e06fdeb33ddab6c5c137cd114dbe 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/analytics720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=57c3ed1ee1ac8ecc9b3a7ae7f0907685 2500w" data-optimize="true" data-opv="2" />

## Understanding your analytics data

### 1. User analytics

The Users category helps you understand who your customers are and how they interact with your business.

**Customer engagement metrics**

* **Top users**: The members that have spent the most amount (excluding refunds and disputes)
* **New users**: Total number of new users in the time period specified. This does not include existing users who renew their memberships or add additional subscriptions
* **Time spent** : The amount of time spent by users in your whop
* **Page visits**: Estimated number of visits to your store pages in the specified period of time
* **Users breakdown**: Total number of users per status (e.g. Joined, Renewing, Trialing, Paused)

**User status breakdown**

* **Paid active users**: Total number of paid active users in your whop in the specified time period
* **Users with app installed**: The number of users with an active membership who have the mobile app installed

**Conversion & Revenue metrics**

* **Spend per paying user**: Estimated revenue for all payments made by customers, divided by the total number of customers who have made a payment
* **Trial conversion rate**: The percentage of users that converted from a trial to an active subscription in the specified period of time
* **Top affiliates**: The affiliates who have generated the most revenue for your whop

### 2. Payments analytics

The Payments category tracks your financial performance with detailed payment and revenue metrics.

**Core revenue metrics:**

* **Gross revenue**: Revenue from payments are had been made to your Whop account
* **MRR (Monthly Recurring Revenue)**: Estimated monthly revenue from all active and past-due subscriptions
* **ARR (Annual Recurring Revenue)**: Estimated annual revenue from all active and past-due subscriptions
* **Revenue (after Whop fees)**: Estimated revenue after Whop fees in the specified time period

**Payment transaction data:**

* **Payments breakdown**: All payment volume in the specified time period per status (Paid, Failed, Past due, Canceled, Refunded, Pending)
* **Successful payments**: Total number of successful payments in the specified time period
* **Payment processing fees**: Total transaction fees charged by payment processors
* **Spend per subscription**: Estimated revenue for subscription payments, divided by the total number of subscribers

**Business health indicators:**

* **Churn rate**: Churned users in the past 30 days divided by active users 30 days ago plus new users in that period
* **Churned revenue**: The total MRR lost in the specific time period due to churn

**Tax and Fee management:**

* **Sales Tax Withheld**: Estimated sales tax withheld in the specified time period
* **Affiliate Fees**: Estimated total fees paid to affiliate referrals in the specified time period

**Disputes:**

* **Disputes Count**: Total number of disputes received in the specified time period
* **Dispute Alerts Count**: Total number of alerts received in the specified time period

<Tip>
  Payment stats help you spot trends, catch problems early, and make smart
  pricing decisions.
</Tip>

### 3. Resolution Center analytics

The Resolution Center category shows you:

* **Total Refunded**: Total amount refunded to customers in the specified time period


# Integrations
Source: https://docs.whop.com/manage-your-business/manage-business/integrations

Set up external tracking integrations

Whop integrates with major analytics platforms to help you get the full picture of your marketing and monitor your whop's traffic.

### Supported platforms

* Google Analytics
* Hyros
* Meta
* TikTok
* X (formerly Twitter)
* Reddit
* Pinterest
* HubSpot

### What these integrations track

When someone visits your whop, data gets sent to these platforms so you can:

* See traffic from all your marketing
* Know where visitors come from
* Track how well your ads work
* Connect page views to specific campaigns

### How to add platform IDs

To connect any analytics platform:

1. Go to your **Dashboard > Settings**
2. Under **Analytics**, click the platform you want to integrate with your whop
3. Enter your tracking ID(s) and API keys
4. Click the blue checkmark to activate the integration

<Tip>
  There are tutorials under each platform to help you find Pixel ID(s) and API keys.
</Tip>


# Upload legal documents
Source: https://docs.whop.com/manage-your-business/manage-business/legal-documents

Learn how to upload legal documents and policies to your whop

Adding legal documents to your Whop helps cut down on fake disputes and chargebacks, and your customers will know exactly what to expect when they buy from you.

When someone buys access to your Whop, they automatically agree to Whop's terms. But you can add your own legal documents for more protection.

## Which legal documents you can upload

You can upload 4 different legal documents to your Whop:

* **Terms of Service**: Your business terms and conditions
* **Privacy Policy**: How you handle customer data
* **Return Policy**: Your refund and return procedures
* **EULA (End User License Agreement)**: Software or digital product usage terms

<Tip>
  Set up your legal documents before you sell anything. This way, you're protected from day one, and your customers know what they're signing up for.
</Tip>

## How to upload your legal documents

To add your legal documents:

1. Go to **Dashboard** > **Settings** > **Legal** (3rd option under Settings)
2. Click **Upload file** to the right of the document type you want to add
3. Either drag and drop your file or click **Browse files** to find it on your computer
4. Once you pick your file, click **Upload file** at the bottom left
5. Repeat steps 2 to 4 for any other documents you want to upload

<Tip>
  You can check your uploaded files by clicking View file next to each document or remove one by clicking Delete.
</Tip>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0e7a6b6a440461e20fd93ceb59598be7" alt="Legal documents" width="1282" height="720" data-path="how-to-videos/uploadlegal720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ad96d0fd8da246ea0bdedf170a030bf5 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d5ebe5fa512ac35735843cafd871012e 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f7f0e70f9779af57c5fbe61bb14acf3d 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a9eaefad1cbf391ad78f6771bd9cd670 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=920e1cf3976d033b09ef574dddb818b0 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/uploadlegal720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f4b7cc13f3b853ec7e455ef678e4c2ba 2500w" data-optimize="true" data-opv="2" />

## How to require customers to agree to your terms before checkout

To have customers agree to your terms before purchasing:

1. Go to **Dashboard** > **Settings** > **Legal** (3rd option under Settings)
2. Under **Options**, toggle **Require terms and conditions acceptance**

<Tip>
  When you turn this on, customers have to check a box saying they agree to your terms before they can buy anything.
</Tip>


# Create a waitlist
Source: https://docs.whop.com/manage-your-business/products/create-waitlist

Have people join a waitlist before they can access your whop

A waitlist allows you to control who joins your whop. People apply to join, you review them, then approve the ones you want.

<Tip>
  You can view and manage all your waitlist entries by going to your Dashboard > Waitlists.
</Tip>

## How to create a waitlist checkout option

**To set up a waitlist for your whop:**

1. Go to your **Dashboard** > **Checkout links**
2. Click **+ Create checkout link**
3. Toggle **Advanced options** and click **Add a waitlist**
4. Click **Create**

Anyone who joins through your checkout link will now be added to the waitlist instead of getting immediate access.

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d624d2f5b63cef81afd12dd0aafe21fd" alt="Waitlist" width="1222" height="720" data-path="how-to-videos/waitlist720p30fps1.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=cd784abaa89ac6d72ef9db5047431149 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c7dd16d6556aa093f9952f9c973d6fd2 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=fad07244ed1a0ab5846a7b692b0a2284 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bb47e767dc5514d859d3bb73df75ecd2 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=169a880e762997a420ab6fda83d56c70 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/waitlist720p30fps1.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9711aa673dd61ddf44386523fec1be38 2500w" data-optimize="true" data-opv="2" />

## How to add questions to your waitlist

Pro tip: Add required questions for customers to answer before joining your waitlist. This will help qualify potential members and assess if they’re a good fit for your whop.

To add questions to your waitlist:

* Go to **Dashboard** > **Checkout links**
* Find your waitlist link and click the 3 dots (⋮)
* Click **Edit**
* Under **Advanced options**, click **Ask questions before checkout**
* Add your question titles and placeholder text
* Click **Update checkout link**

## How to approve/deny waitlist entries

Go to **Dashboard > Waitlists** to manage your waitlist. From here, you can:

* **Approve** (thumbs up button) or **deny** (thumbs down button) individual users
* **Admit all entries** at once by clicking the **+ Admit all entries** button
* **Export entries** by clicking the **Export** button in the top right
* **Contact users** on your waitlist via DM or email

When you approve someone, they'll automatically get access to your whop and receive a notification.

## When to use a waitlist

Waitlists work great when you want to:

* **Build anticipation while you're still creating**: Collect emails, build an audience, and validate demand without opening access right away.
* **Qualify potential customers**: Add custom questions to qualify leads before giving them access.
* **Create exclusivity for your community**: When people have to apply and wait for approval, it makes your whop feel more valuable and desirable.
* **Launch a limited beta** — Control who gets early access by reviewing applicants before letting them in. Perfect for testing with a smaller, high-quality group.


# Free trials
Source: https://docs.whop.com/manage-your-business/products/free-trials

Learn how to set up a free trial for your whop

Free trials give people access to your whop for a limited time. Once the trial ends, they are automatically charged the standard price for access.

## How to set up a free trial for your whop

There are two ways to set up a free trial:

<Note>
  You can only add a free trial to 'Recurring' checkout links.
</Note>

### 1. Through your Dashboard

To set up a free trial from your Dashboard:

1. Go to **Dashboard** > **Checkout links**
2. Pick an existing link and click the 3 dots (⋮) > **Edit**, or make a new one by clicking **+ Create checkout link**
3. Check **Free trial**
4. Pick how many free days you want to offer (like 1 day, 7 days, or 30 days)
5. Click **Update checkout link** to activate your free trial

### 2. Through your whop's Pricing page

To set up a free trial from your whop's **Pricing** page:

1. Go to **whop** > **Manage pricing**
2. Pick an existing pricing option and click the 3 dots (…) > **Edit**, or make a new one by clicking **+ Create pricing option**
3. Check **Free trial**
4. Pick how many free days you want to offer
5. Click **Update checkout link** to activate your free trial

<Warning>
  After the trial ends, people automatically get charged the full price unless they cancel first. This helps you make more money without doing any extra work.
</Warning>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ce8218dff9295160b7e4b1a4629aa89e" alt="Free trial" width="1222" height="720" data-path="how-to-videos/freetrial720p30fps1.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ae8381e726c46e6a58e90ede54cc50f2 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=11da23b639db2bdb3883e06a35fc2a46 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=81c432c9d3b9569d64a0fd9393ad430c 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bd803d7042de06408d0679f21f8b253b 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=107ee91b16cbf4f9b1de249c7ad51618 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/freetrial720p30fps1.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f11962140ab2d5ea1899809b0f4e8ed6 2500w" data-optimize="true" data-opv="2" />

## Understanding trial abuse and prevention

* **What is trial abuse?** This happens when someone keeps signing up for free trials but cancels before they have to pay. They might use different emails or make new accounts to avoid paying.
* **How Whop stops this:** Whop automatically catches when the same person tries to sign up for multiple free trials. If someone cancels and then tries to rejoin with another trial, the system will charge them full price instead of giving them another free period.

<Tip>
  Don't worry too much about trial abuse: 99% of people use trials honestly, and Whop handles the bad actors automatically.
</Tip>


# Locked content and upsells
Source: https://docs.whop.com/manage-your-business/products/locked-premium-content

Learn how to set up locked content in your whop and use it to upsell members

Locked content on Whop allows you to restrict access to specific apps. People can only access Locked apps by paying a fee or getting permission from you. You can use this feature to set up:

* **Premium features**: Lock specific apps behind a paywall
  * Example: Give everyone your daily picks, but charge extra for a bankroll management guide
* **Exclusive content**: Permit access to some apps for certain members only
  * Example: Create an exclusive chat reserved only for the members who hit a specific milestone
* **Upselling**: Upsell additional products during or after checkout
  * Example: After someone buys your trading course, ask if they also want to buy your trading indicators

## Create locked content

To set up locked content in your whop, you need to choose the specific app you would like to lock:

1. Click the 3 dots (⋮) next to the app you want to lock and click **App settings**
2. Under **Visibility**, choose **Locked**
3. Pick either **Free** or **Paid (one-time)** access

## Set pricing and access options

### Free locked content

* Choose **Free** and **Add a waitlist** to control who gets access to your locked app

<Card title="Create a waitlist" icon="list" href="/manage-your-whop/create-waitlist">
  Learn more about managing your waitlists (and how to add questions to your waitlists)
</Card>

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dd17c32db9eb92a8378e61e5bf7a54b0" alt="Free locked content" width="1222" height="720" data-path="how-to-videos/lockedappfree720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4ba3bcf606a555c0f7f477772d2d0a5d 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d9978486c86ae15c55ac13f2b7afdad9 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=fb181a625f50b40e58a3ada119967f6a 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=96f4d821c4dc4ec7e846e2289a0901dd 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6dae116404ef88aa73ad16a369c6bcc1 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedappfree720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e7df29f087d8c39baf6f0ea2f05f474e 2500w" data-optimize="true" data-opv="2" />

### Paid locked content

* Choose **Paid (one-time)** to charge people to access your locked app
* Set the price
* Choose the currency
* The upsell method ([see more details below](#choose-your-upsell-method))

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8ab9cc26b410ee3a7a53cea1016c8073" alt="Paid locked content" width="1222" height="720" data-path="how-to-videos/lockedapppaid720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6b8140171091a56c36f8d39eef4df942 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f8689284487d2eea70f3b9c4851841c1 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9e178f131cf9b90c172fdb5176531b09 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=93384686d3d24d6c8ef02f75c7d2f789 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7e5368cff71268360ccb0bbe60e8dcc0 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/lockedapppaid720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8c75a812c0254133acc37e3cf4b067f7 2500w" data-optimize="true" data-opv="2" />

### Additional settings

* **Expiration:** Set when access runs out
* **iOS screenshot protection:** Stop people from taking screenshots to prevent leaks
* **Add to other whops:** Use the same locked app in multiple whops you own

## Choose your upsell method

When creating paid locked content, you need to decide when and where members will see your offer. You have three upsell methods to choose from:

### 1. Before checkout

Shows up as an add-on on the checkout page of your whop (i.e. an order bump). Your prospective customer will have the option to add it to their cart and pay extra to access the locked content.

In the image below, you can see what a pre-checkout order bump looks like for your customers. In this example, customers have the option to add the additional 'Chat' for \$100.

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=963211ae320658d082019cd8c83098f7" alt="Before checkout upsell" title="Before checkout upsell" className="mx-auto" style={{ width:"41%" }} width="570" height="934" data-path="images/freetrialcustomer3andbeforecheckoutupsell.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=51d2bb48b26d607a11d92856696ac2b2 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ec755a950f9a1e80c819d0a87f88f866 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d49ce69fad9e9851206e10044d3c7e59 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=6c7cf7dc499653b26046f6b26a17925f 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=759413f72835b500b325143490c6a581 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/freetrialcustomer3andbeforecheckoutupsell.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=5e75f3c83a131de08d0cce426595ef5a 2500w" data-optimize="true" data-opv="2" />

### 2. After checkout

A popup appears right after someone joins your whop (i.e. an upsell). This is great for showing premium content to people who have just joined your whop (when they already have their wallet out and are in the buying mood).

You have two options to set up your custom upsell page:

<Tabs>
  <Tab title="Option 1">
    * Find the Locked app and click the **3 dots (⋮)** next to the app
    * Click **App settings**
    * Click the edit link under **After checkout**
  </Tab>

  <Tab title="Option 2">
    1. Click **Edit store page** > **Edit details**
    2. Scroll and click **Upsells**
  </Tab>
</Tabs>

From there, you can add:

* **Upsell title**: Write something that grabs attention
* **Upsell description**: Explain why it's worth it (180 characters max)
* **Upload video**: Add a video explaining your offer (16:9 works best)
* Click **Save** when you're done.

<Tip>
  Pro tip: Adding a short video / VSL improves conversions.
</Tip>

Below, you can see what the post-checkout upsell popup looks like for your customers.

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b7f59063438a79baa07551663e50449d" alt="After checkout upsell" width="1920" height="989" data-path="images/aftercheckoutupsell.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=227897eed759a5ff15c2f472f6c9cf4d 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=dc695b08694abab1bea178609b8c5ebf 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=670a4e89203561dcee13bf4c2a77979f 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=69936b8877db77ec1f5e49e34dcd971a 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0f436f309114deb3950b9d9c42263f6b 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/aftercheckoutupsell.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=09b83eab56d90bb0ede805562a38a92c 2500w" data-optimize="true" data-opv="2" />

### 3. Only display in this whop

Locked content will show as Locked inside your whop. Members can find and buy it while organically browsing inside your whop.


# Manage products
Source: https://docs.whop.com/manage-your-business/products/manage-products

Learn how to manage and update products in your whop

Update your product pricing, change which apps your customers get access to, and create new products or billing options.

## Update an existing product

<Steps>
  <Step title="Select the product you want to change" titleSize="h3">
    1. Go to your Dashboard
    2. Click **Products**
    3. Click on the product you want to update
  </Step>

  <Step title="Update the title and description" titleSize="h3">
    1. Update the **title** and **description** directly in the main fields
    2. Click **Save Changes** when done
  </Step>

  <Step title="Change pricing" titleSize="h3">
    1. Click on the current **price** – a dropdown menu will appear
    2. Enter the new amount your product should cost
    3. Click **Save Changes**

    <Tip>
      You can only update the price amount here, not the pricing model (i.e. free, one-time payment, or recurring). To offer a different pricing model, you need to add a new billing period (see 'Add a new pricing model' below).
    </Tip>
  </Step>

  <Step title="Add a new pricing model" titleSize="h3">
    You can have multiple pricing models for the same product (e.g. a monthly subscription AND a yearly subscription AND a one-time fee for lifetime access).

    To add a new pricing model:

    1. Click **Add another visible billing period**
    2. Select the pricing type (free, one-time, or recurring)
    3. Choose currency and set the price
    4. Configure billing cycle (for recurring plans)
    5. Click **Save Changes**
  </Step>

  <Step title="Update advanced settings" titleSize="h3">
    Click **Advanced options** to modify:

    * **Stock**: Limit how many people can purchase this product
    * **Show on store page**: Make this product visible on your public store page
    * **Add a waitlist**: Users enter payment details but aren’t charged until you approve them
    * **Ask questions before checkout**: Collect information from customers before they purchase
    * **Auto-expire access**: Automatically remove access after a set time period
    * **Redirect after checkout**: Send customers to a specific page after they complete checkout
    * **Add internal name**: A name only you can see on your dashboard
  </Step>

  <Step title="Update payment methods" titleSize="h3">
    1. Click **Payment methods**
    2. Select or deselect the options you want to offer:
       * Credit/debit card
       * Bank transfer (ACH)
       * PayPal
       * Cryptocurrency
       * Buy now, pay later (Financing)
    3. Click **Save Changes**
  </Step>
</Steps>

## Select which apps are included in a product

Control what customers get access to when they purchase each product by selecting (and deselecting) which apps to include.

**To update app access:**

1. Go to **Dashboard** > **Products**
2. Click on the product you want to change
3. In the right-hand column, you'll see all your available apps
4. **Toggle on** apps you want included in this product
5. **Toggle off** apps you want to exclude
6. Changes save automatically

<Info>
  **Example scenario:**

  * **Free product**: Includes only a free chat app and a beginners course (excluding all premium apps)
  * **Premium product**: Also includes premium apps (e.g. advanced learning materials and templates)
  * **VIP product**: Includes an extra app that gives VIP members the ability to book 1-on-1 calls with you
</Info>

## Create a new product

You can create multiple membership tiers (e.g. free and premium) by creating multiple products.

To create a new product:

1. Go to your whop
2. Click **Products**
3. Click **Create product**

<Card title="Set up your product pricing and details" icon="dollar-sign" href="/set-up-products-pricing">
  Learn more about how to configure the settings of your product here.
</Card>

## Preview what members see in each product

Members will only see apps they have access to based on the products they have joined and purchased.

**To see what your product looks like for your members:**

1. Go to your whop's main page
2. Click the **Preview as** dropdown menu
3. Select the product you want to preview

## Organize your apps and categories in each product

You can create categories to group your apps and drag and drop both categories and apps to keep your whop looking clean and organized.

**To create categories:**

1. Right-click in the left-hand app column (where you can see the list of all your apps)
2. Select **Create category**
3. Name your category
4. Click **Create**

**To rename categories:**

1. Right-click on the category
2. Select **Edit category**
3. Update the name
4. Click **Save**

**To rename apps:**

1. Right-click on the app you want to update
2. Click **App settings**
3. Update the name
4. Click **Save**

<Tip>
  There are 2 ways to organize your apps when managing multiple products:

  1. Organize by product tier: Create categories like "Free Members" and "Premium Members" and group relevant apps under each category
  2. Organize by content theme: Create categories like "Community", "Learning", "Events" and rename apps to show access level (e.g., "Free Chat", "Premium Chat")
</Tip>


# Roles and permissions
Source: https://docs.whop.com/manage-your-business/team-management/manage-team-roles

Learn how to manage your team, roles and permissions

Your Team tab is where you decide who gets access to your whop and what permissions they have.

## How to add team members to your whop

1. Go to **Dashboard** > **Team**
2. **(Recommended):** Toggle on **Require 2FA** to make sure all team members use secure login
3. Click **Invite team member** in the top right corner
4. Enter the person's email address in the **Email** field
5. Select their role from the **Role** dropdown menu
6. Click **Invite**

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=5f6caa61dbbba837dda7e236dcf1c8a1" alt="Invite team members" width="1222" height="720" data-path="how-to-videos/inviteteam.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8feca617e2e4a8fdb79d6da287afab25 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=368a28c6954dff9522ca39a9becad26e 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=74f0e77c4671fa48f66a5c4c053f9ab1 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=98e022ddfc1407e41605e37f016bf1f4 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=67eb50d889725635a1d03c275f48fba0 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/inviteteam.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ccd06417fcda4e3c696def514989a432 2500w" data-optimize="true" data-opv="2" />

Your team member will automatically be sent an invitation email. When they accept, they'll show up in your team table with their new permissions.

You can see all your pending invites on the **Invites** tab next to **Members**.

<Warning>
  Start small. Always give someone the lowest role that lets them do their job. You can always give them more access later if needed.
</Warning>

## Roles and permissions overview

There are four different roles you can assign to your team members:

* **Moderator**
* **Sales Manager**
* **Admin**
* **Owner**

Each of these roles has a different level of permissions - Moderator has the least access, and Owner has the most.

### **Moderator**

* Delete messages and mute or ban members in the Chat app
* Delete comments in Forums
* Keep your community chat friendly and spam-free

<Tip>
  The Moderator role is best for community managers, support agents, or anyone helping manage your community.
</Tip>

### **Sales Manager**

All Moderator permissions, plus:

* View the Users table (but can't export it)
* View and create checkout links

<Tip>
  The Sales Manager role is best for marketing team members, affiliate managers, or sales reps who need to create and track custom checkout links.
</Tip>

### **Admin**

All Moderator and Sales Manager permissions, plus:

* View waitlists and cancellation reasons
* Access Finances section (except Payouts)
* View and manage products, apps, and the store page
* Give refunds to customers
* View and manage the Marketing section of the dashboard
* Invite other team members (Moderators and Sales Managers only)
* View general settings (but can't edit them)

<Tip>
  The Admin role is best for operations managers, team leads, heads of marketing/community, or anyone needing broader dashboard access.
</Tip>

### **Owner**

All permissions from other roles, plus:

* Access to Payouts
* View and manage API keys, OAuth, and Webhooks settings
* Invite Admins and Owners
* View **analytics**
* Transfer ownership

<Tip>
  The Owner role is best for founders, co-founders, CTOs, or finance/legal leads who need complete control.
</Tip>

### **Complete permissions breakdown**

| Permission                                   | Moderator | Sales Manager | Admin | Owner |
| :------------------------------------------- | :-------- | :------------ | :---- | :---- |
| Delete messages in the Chat app              | ✔️        | ✔️            | ✔️    | ✔️    |
| Mute users in Chat app                       | ✔️        | ✔️            | ✔️    | ✔️    |
| Ban users in Chat app                        | ✔️        | ✔️            | ✔️    | ✔️    |
| Delete comments in Forums app                | ✔️        | ✔️            | ✔️    | ✔️    |
| View Checkout links section on dashboard     | ✔️        | ✔️            | ✔️    | ✔️    |
| Create new checkout links                    | ❌         | ✔️            | ✔️    | ✔️    |
| View Users table on dashboard                | ✔️        | ✔️            | ✔️    | ✔️    |
| Edit store page                              | ❌         | ❌             | ✔️    | ✔️    |
| Add & configure apps                         | ❌         | ❌             | ✔️    | ✔️    |
| Create products                              | ❌         | ❌             | ✔️    | ✔️    |
| Give refunds to customers                    | ❌         | ❌             | ✔️    | ✔️    |
| Export Users table on dashboard              | ❌         | ❌             | ✔️    | ✔️    |
| View waitlists                               | ❌         | ❌             | ✔️    | ✔️    |
| View cancellation reasons                    | ❌         | ❌             | ✔️    | ✔️    |
| View Finances section                        | ❌         | ❌             | ✔️    | ✔️    |
| Access Payouts section                       | ❌         | ❌             | ❌     | ✔️    |
| View Marketing section                       | ❌         | ❌             | ✔️    | ✔️    |
| Manage Marketing section                     | ❌         | ❌             | ✔️    | ✔️    |
| View general settings                        | ❌         | ❌             | ✔️    | ✔️    |
| Edit general settings                        | ❌         | ❌             | ❌     | ✔️    |
| View team settings                           | ❌         | ❌             | ✔️    | ✔️    |
| Invite Moderators                            | ❌         | ❌             | ✔️    | ✔️    |
| Invite Sales Managers                        | ❌         | ❌             | ✔️    | ✔️    |
| Invite Admins                                | ❌         | ❌             | ❌     | ✔️    |
| Invite Owners                                | ❌         | ❌             | ❌     | ✔️    |
| View analytics on Home page of the dashboard | ❌         | ❌             | ❌     | ✔️    |
| View API keys settings                       | ❌         | ❌             | ❌     | ✔️    |
| Manage API keys settings                     | ❌         | ❌             | ❌     | ✔️    |
| View OAuth settings                          | ❌         | ❌             | ❌     | ✔️    |
| Manage OAuth settings                        | ❌         | ❌             | ❌     | ✔️    |
| View Webhooks settings                       | ❌         | ❌             | ❌     | ✔️    |
| Manage Webhooks settings                     | ❌         | ❌             | ❌     | ✔️    |
| Transfer ownership                           | ❌         | ❌             | ❌     | ✔️    |

<Warning>
  Important: Some things your team can do (like deleting messages or checkout links) can't be undone.
</Warning>

## How to change team member roles

You can update anyone's role at any time to give them more or less access.

To change someone's role:

1. Go to **Dashboard > Team**
2. Find the team member in the members table
3. Click the dropdown menu in their **Role** column
4. Select their new role
5. Click **Save**

The change happens right away, and they'll have their new permissions immediately.

## How to remove team members

To remove a team member:

1. Go to **Dashboard > Team**
2. Find the team member you want to remove
3. Click the three dots (︙) on the right side of their row
4. Select **Remove user**
5. Click the red **Remove user** button in the confirmation pop-up

They'll immediately lose access to your whop and will need to be reinvited if you want to add them back to the team.


# Pay your team
Source: https://docs.whop.com/manage-your-business/team-management/pay-your-team

Learn how to pay your team members through Whop

Pay your team directly from your Whop balance. Payments are instant and your team can cash out to their bank.

<Warning>
  There's a 1% fee for all team payments
</Warning>

### Pay your team through your Dashboard

1. Go to **Dashboard** > **Team**
2. Click the **Pay** button next to the person you want to pay
3. Enter the amount you want to send
4. Select the **Balance** you'll send the payment from
5. Add a note (optional)
6. Click **Send** to send it

<Info>
  Note: The total amount you send includes the 1% fee.
</Info>

When you send it, your team member gets an email and a DM notification. They can then go to **Profile** > **Balance** to cash out.

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=7994ab9dce9cc9038b88d94a5e26a0fd" alt="Pay team dashboard" width="1531" height="220" data-path="images/payteam1.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=57c290550179253e1e720f5bc0dce4c0 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=7176b24d337ba5f141b3154f277dd712 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ef642c9e9cfd08e9442599641d9494e4 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=3130a8465304877e96e310e12b5742e3 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=2451c062f45ccca857e3a098cf02435b 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteam1.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=014ee7e9cb091e2c8c9e40e0f4c50450 2500w" data-optimize="true" data-opv="2" />

### Pay your team through their profile

You can also send money to any Whop user through their profile - even if they're not officially on your team.

1. Click the user's profile picture
   * If you know their username, go straight to their profile by entering **whop.com/@\[username]** in your browser’s address bar (e.g., **whop.com/@George**).

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=bcf33d2a1f1ecbc7cc3256b7c37bea1d" alt="Pay team profile" width="775" height="352" data-path="images/payteamprofile.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=88e69d60a1326e74cc4732d7774e0099 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=c097bb4d5880a65f42501e23e30eb744 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=46b0f88ba636aba1c31d2400bcb50f12 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ea0bf10f6d7dd6ba6fed6408376ddf61 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=52cca6c857f9ad012c64c88d654bf670 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/payteamprofile.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=684e02912235c19aed580d5724d7aaf6 2500w" data-optimize="true" data-opv="2" />

2. On their profile, click the **Pay** button next to **Message**.
3. Fill out the payment details:
   * **Enter amount:** Type how much you want to send
   * Select the **Balance** you'll send the payment from
   * **Write a note:** Add a note (optional)
4. Click **Send** to send the money

They'll receive an email and message notification, and can cash out through **Profile** > **Balance**.


# Embed checkout
Source: https://docs.whop.com/payments/checkout-embed

Learn how to embed Whop's checkout flow on your website

Embedded checkout allows you to embed Whop's checkout flow on your own website. This allows you to offer your customers a seamless checkout experience without leaving your website.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/0hGnAzwxd4g?si=0LDncN3P_MKfrsvD&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## React setup

### Step 1: Install the package

```bash
npm install @whop/checkout
```

### Step 2: Add the checkout element

```tsx
import { WhopCheckoutEmbed } from "@whop/checkout/react";

export default function Home() {
  return <WhopCheckoutEmbed planId="plan_XXXXXXXXX" />;
}
```

This component will now mount an iframe with the Whop checkout embed. Once the checkout is complete, the user will be redirected to the redirect url you specified in the settings on Whop.

You can configure the redirect url in your [whop's settings](https://whop.com/dashboard/whops/) or in your [company's settings](https://whop.com/dashboard/settings/checkout/) on the dashboard. If both are specified, the redirect url specified in the whop's settings will take precedence.

<Tip>
  Keep that Plan ID handy. You'll need to paste it into your website code, so
  save it somewhere you can find it.
</Tip>

### Step 3: **(optional)** Configure - Programmatic controls

To get access to the controls of the checkout embed, you can use the `ref` prop.

```tsx
const ref = useCheckoutEmbedControls();

return <WhopCheckoutEmbed ref={ref} planId="plan_XXXXXXXXX" />;
```

#### **`submit`**

To submit checkout programmatically, you can use the `submit` method on the checkout element.

```tsx
ref.current?.submit();
```

#### **`getEmail`**

To get the email of the user who is checking out, you can use the `getEmail` method on the checkout element.

```tsx
const email = await ref.current?.getEmail();
console.log(email);
```

#### **`setEmail`**

To set the email of the user who is checking out, you can use the `setEmail` method on the checkout element.

```tsx
try {
  await ref.current?.setEmail("example@domain.com");
} catch (error) {
  console.error(error);
}
```

#### **`getAddress`**

To get the address of the user who is checking out, you can use the `getAddress` method on the checkout element.

```tsx
const address = await ref.current?.getAddress();
console.log(address);
```

#### **`setAddress`**

To set the address of the user who is checking out, you can use the `setAddress` method on the checkout element.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `hideAddressForm` prop to `true`.
</Note>

```tsx
try {
  await ref.current?.setAddress({
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  });
} catch (error) {
  console.error(error);
}
```

### Step 4: **(optional)** Configure - Available properties

#### **`planId`**

**Required** - The plan id you want to checkout.

#### **`theme`**

**Optional** - The theme you want to use for the checkout.

Possible values are `light`, `dark` or `system`.

#### **`sessionId`**

**Optional** - The session id to use for the checkout.

This can be used to attach metadata to a checkout by first creating a session through the API and then passing the session id to the checkout element.

#### **`affiliateCode`**

**Optional** - The affiliate code to use for the checkout.

```tsx
<WhopCheckoutEmbed affiliateCode="tristan" planId="plan_XXXXXXXXX" />
```

#### **`hidePrice`**

**Optional** - Turn on to hide the price in the embedded checkout form.

Defaults to `false`

#### **`hideTermsAndConditions`**

**Optional** - Set to `true` to hide the terms and conditions in the embedded checkout form.

Defaults to `false`

#### **`skipRedirect`**

**Optional** - Set to `true` to skip the final redirect and keep the top frame loaded.

Defaults to `false`

#### **`onComplete`**

**Optional** - A callback function that will be called when the checkout is complete.

<Note>This option will set `skipRedirect` to `true`</Note>

```tsx
<WhopCheckoutEmbed
  onComplete={(planId, receiptId) => {
    console.log(planId, receiptId);
  }}
  planId="plan_XXXXXXXXX"
/>
```

#### **`utm`**

**Optional** - The UTM parameters to add to the checkout URL.

**Note** - The keys must start with `utm_`

```tsx
<WhopCheckoutEmbed
  planId="plan_XXXXXXXXX"
  utm={{ utm_campaign: "ad_XXXXXXX" }}
/>
```

#### **`fallback`**

**Optional** - The fallback content to show while the checkout is loading.

```tsx
<WhopCheckoutEmbed fallback={<>loading...</>} planId="plan_XXXXXXXXX" />
```

#### **`prefill`**

**Optional** - The prefill options to apply to the checkout embed.

Used to prefill the email or address in the embedded checkout form.
This setting can be helpful when integrating the embed into a funnel that collects the email prior to payment already.

```tsx
<WhopCheckoutEmbed
  prefill={{ email: "example@domain.com" }}
  planId="plan_XXXXXXXXX"
/>
<WhopCheckoutEmbed
  prefill={{ address: {
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  } }}
  planId="plan_XXXXXXXXX"
/>
```

#### **`hideEmail`**

**Optional** - Set to `true` to hide the email input in the embedded checkout form. Make sure to display the users email in the parent page when setting this attribute.

Defaults to `false`

<Note>
  Use this in conjunction with the `prefill` attribute or the `setEmail` method
  to control the email input.
</Note>

```tsx
<WhopCheckoutEmbed hideEmail planId="plan_XXXXXXXXX" />
```

#### **`disableEmail`**

**Optional** - Set to `true` to disable the email input in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `prefill` attribute or the `setEmail` method
  to control the email input.
</Note>

```tsx
<WhopCheckoutEmbed disableEmail planId="plan_XXXXXXXXX" />
```

#### **`hideAddressForm`**

**Optional** - Set to `true` to hide the address form in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `setAddress` method to control the address
  input.
</Note>

```tsx
<WhopCheckoutEmbed hideAddressForm planId="plan_XXXXXXXXX" />
```

#### **`onAddressValidationError`**

**Optional** - A callback function that will be called when the address validation error occurs.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `hideAddressForm` prop to `true`.
</Note>

```tsx
<WhopCheckoutEmbed
  hideAddressForm
  onAddressValidationError={(error) => {
    console.log(error);
  }}
  planId="plan_XXXXXXXXX"
/>
```

### Full example

```tsx
import { WhopCheckoutEmbed } from "@whop/checkout/react";

export default function Home() {
  return (
    <WhopCheckoutEmbed
      fallback={<>loading...</>}
      planId="plan_XXXXXXXXX"
      theme="light"
      hidePrice={false}
      sessionId="ch_XXXXXXXXX"
    />
  );
}
```

## Other websites

### Step 1: Add the script tag

To embed checkout, you need to add the following script tag into the `<head>` of your page:

```md
<script
  async
  defer
  src="https://js.whop.com/static/checkout/loader.js"
></script>
```

### Step 2: Add the checkout element

To create a checkout element, you need to include the following attribute on an element in your page:

```md
<div data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

This will now mount an iframe inside of the element with the plan id you provided. Once the checkout is complete, the user will be redirected to the redirect url you specified in the settings on Whop.

You can configure the redirect url in your [whop's settings](https://whop.com/dashboard/whops/) or in your [company's settings](https://whop.com/dashboard/settings/checkout/) on the dashboard. If both are specified, the redirect url specified in the whop's settings will take precedence.

### Step 3: **(optional)** Configure - Programmatic controls

First, attach an `id` to the checkout container:

```md
<div id="whop-embedded-checkout" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`submit`**

To submit checkout programmatically, you can use the `submit` method on the checkout element.

```js
wco.submit("whop-embedded-checkout");
```

#### **`getEmail`**

To get the email of the user who is checking out, you can use the `getEmail` method on the checkout element.

```js
const email = await wco.getEmail("whop-embedded-checkout");
console.log(email);
```

#### **`setEmail`**

To set the email of the user who is checking out, you can use the `setEmail` method on the checkout element.

```js
wco.setEmail("whop-embedded-checkout", "example@domain.com");
```

#### **`getAddress`**

To get the address of the user who is checking out, you can use the `getAddress` method on the checkout element.

```js
const address = await wco.getAddress("whop-embedded-checkout");
console.log(address);
```

#### **`setAddress`**

To set the address of the user who is checking out, you can use the `setAddress` method on the checkout element.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```js
try {
  await wco.setAddress("whop-embedded-checkout", {
    name: "John Doe",
    country: "US",
    line1: "123 Main St",
    city: "Any Town",
    state: "CA",
    postalCode: "12345",
  });
} catch (error) {
  console.error(error);
}
```

### Step 4: **(optional)** Configure - Available attributes

#### **`data-whop-checkout-plan-id`**

**Required** - The plan id you want to checkout.

> To get your plan id, you need to first create a plan in the **Manage Pricing** section on your whop page.

#### **`data-whop-checkout-theme`**

**Optional** - The theme you want to use for the checkout.

Possible values are `light`, `dark` or `system`.

```md
<div data-whop-checkout-theme="light" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-theme-accent-color`**

**Optional** - The accent color to apply to the checkout embed

Possible values are

* `tomato`
* `red`
* `ruby`
* `crimson`
* `pink`
* `plum`
* `purple`
* `violet`
* `iris`
* `cyan`
* `teal`
* `jade`
* `green`
* `grass`
* `brown`
* `blue`
* `orange`
* `indigo`
* `sky`
* `mint`
* `yellow`
* `amber`
* `lime`
* `lemon`
* `magenta`
* `gold`
* `bronze`
* `gray`

```md
<div data-whop-checkout-theme-accent-color="green" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-session`**

**Optional** - The session id to use for the checkout.

This can be used to attach metadata to a checkout by first creating a session through the API and then passing the session id to the checkout element.

```md
<div data-whop-checkout-session="ch_XXXXXXXXX" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-affiliate-code`**

**Optional** - The affiliate code to use for the checkout.

```md
<div data-whop-checkout-affiliate-code="tristan" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-price`**

**Optional** - Set to `true` to hide the price in the embedded checkout form.

Defaults to `false`

```md
<div data-whop-checkout-hide-price="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-submit-button`**

**Optional** - Set to `true` to hide the submit button in the embedded checkout form.

Defaults to `false`

<Note>
  When using this Option, you will need to [programmatically submit](#submit)
  the checkout form.
</Note>

```md
<div data-whop-checkout-hide-submit-button="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-tos`**

**Optional** - Set to `true` to hide the terms and conditions in the embedded checkout form.

Defaults to `false`

```md
<div data-whop-checkout-hide-tos="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-skip-redirect`**

**Optional** - Set to `true` to skip the final redirect and keep the top frame loaded.

Defaults to `false`

```md
<div data-whop-checkout-skip-redirect="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-on-complete`**

**Optional** - The callback to call when the checkout succeeds

<Note>This option will set `data-whop-checkout-skip-redirect` to `true`</Note>

```html
<script>
  window.onCheckoutComplete = (planId, receiptId) => {
    console.log(planId, receiptId);
  };
</script>

<div
  data-whop-checkout-on-complete="onCheckoutComplete"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

#### **`data-whop-checkout-on-state-change`**

**Optional** - The callback to call when state of the checkout changes

This can be used when programmatically controlling the submit of the checkout embed.

```html
<script>
  window.onCheckoutStateChange = (state) => {
    console.log(state);
  };
</script>

<div
  data-whop-checkout-on-state-change="onCheckoutStateChange"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

#### **`data-whop-checkout-skip-utm`**

By default any utm params from the main page will be forwarded to the checkout embed.

**Optional** - Set to `true` to prevent the automatic forwarding of utm parameters

Defaults to `false`

#### **`data-whop-checkout-prefill-*`**

Used to prefill the email or address in the embedded checkout form. This setting can be helpful when integrating the embed into a funnel that collects the email prior to payment already.

```md
<div data-whop-checkout-prefill-email="example@domain.com" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>

<div
	data-whop-checkout-prefill-name="John Doe"
	data-whop-checkout-prefill-address-country="US"
	data-whop-checkout-prefill-address-line1="123 Main St"
	data-whop-checkout-prefill-address-line2=""
	data-whop-checkout-prefill-address-city="Any Town"
	data-whop-checkout-prefill-address-state="CA"
	data-whop-checkout-prefill-address-postal-code="12345"
	data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>

<div data-whop-checkout-prefill-address-name="John Doe" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-email`**

**Optional** - Set to `true` to hide the email input in the embedded checkout form. Make sure to display the users email in the parent page when setting this attribute.

Defaults to `false`

<Note>
  Use this in conjunction with the `data-whop-checkout-prefill-email` attribute
  or the `setEmail` method to control the email input.
</Note>

```md
<div data-whop-checkout-hide-email="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-disable-email`**

**Optional** - Set to `true` to disable the email input in the embedded checkout form.

Defaults to `false`

<Note>
  Use this in conjunction with the `data-whop-checkout-prefill-email` attribute
  or the `setEmail` method to control the email input.
</Note>

```md
<div data-whop-checkout-disable-email="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-hide-address`**

**Optional** - Set to `true` to hide the address form in the embedded checkout form.

Defaults to `false`

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```md
<div data-whop-checkout-hide-address="true" data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
```

#### **`data-whop-checkout-on-address-validation-error`**

**Optional** - The callback to call when the address validation error occurs.

<Note>
  This method will only work if the address form is hidden. You can hide the
  address form by setting the `data-whop-checkout-hide-address` prop to `true`.
</Note>

```html
<script>
  window.onAddressValidationError = (error) => {
    console.log(error);
  };
</script>

<div
  data-whop-checkout-on-address-validation-error="onAddressValidationError"
  data-whop-checkout-plan-id="plan_XXXXXXXXX"
></div>
```

### Full example

```md
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width">
		<script
			async
			defer
  			src="https://js.whop.com/static/checkout/loader.js"
		></script>
		<title>Whop embedded checkout example</title>
		<style>
			div {
				box-sizing: border-box;
			}
			body {
				margin: 0
			}
		</style>
	</head>
	<body>
		<div
			data-whop-checkout-plan-id="plan_XXXXXXXXX"
			data-whop-checkout-session="ch_XXXXXXXXX"
			data-whop-checkout-theme="light"
			data-whop-checkout-hide-price="false"
			style="height: fit-content; overflow: hidden; max-width: 50%;"
		></div>
	</body>
</html>
```

## FAQs

<AccordionGroup>
  <Accordion title="Why is my checkout not loading?">
    Make sure you've correctly replaced `plan_XXXXXXXXX` or `PLAN_ID_HERE` in the code snippets with your actual Plan ID from the Whop dashboard. Also verify that the script tag is properly loaded in the `<head>` section if using HTML/JS.
  </Accordion>

  <Accordion title="Where do I find my Plan ID?">
    Go to your **Dashboard** > **Checkout links** > Click the **three dots (⋮)** on your pricing option > Hover over **Details** > Click the ID (starts with `plan_`) to copy it.
  </Accordion>

  <Accordion title="Can I embed multiple checkouts on the same page?">
    Yes, you can add multiple checkout embeds with different Plan IDs. Each embed operates independently.
  </Accordion>

  <Accordion title="How do I change the checkout theme?">
    For React: add `theme="dark"` or `theme="light"` as a property. For HTML: add `data-whop-checkout-theme="dark"` to your div element.
  </Accordion>

  <Accordion title="Can I hide the price in the embedded checkout?">
    Yes, add `hidePrice={true}` in React or `data-whop-checkout-hide-price="true"` in HTML to hide the price display.
  </Accordion>

  <Accordion title="What happens after a customer completes checkout?">
    By default, customers are redirected to your whop. You can customize this by setting a custom redirect URL or skipping the redirect entirely.
  </Accordion>

  <Accordion title="How do I prevent the redirect after checkout?">
    Use `skipRedirect={true}` in React or `data-whop-checkout-skip-redirect="true"` in HTML to keep users on the same page.
  </Accordion>

  <Accordion title="Is the embedded checkout mobile-responsive?">
    Yes, the checkout automatically adapts to different screen sizes and devices.
  </Accordion>

  <Accordion title="Can I customize the checkout's appearance with CSS?">
    You can style the wrapper using the `.whop-checkout-wrapper iframe` CSS class, but the checkout content itself cannot be modified for security reasons.
  </Accordion>

  <Accordion title="Can I pre-fill customer information?">
    Yes, use `prefill={{ email: "customer@example.com" }}` in React or `data-whop-checkout-prefill-email="customer@example.com"` in HTML.
  </Accordion>
</AccordionGroup>


# Create a product
Source: https://docs.whop.com/payments/create-a-product

Learn how to set up products and pricing on Whop

Products are how you package and price your offer on Whop. You can set up free access, one-time payments, or recurring subscriptions for people to access your whop.

## How to create a product

<Steps>
  <Step title="Add a product" titleSize="h3">
    * Go to your **Dashboard**
    * Go to **Products**
    * Click **Add Product**
  </Step>

  <Step title="Set up your product details" titleSize="h3">
    Configure the core details of your product:

    * **Choose a title**: Keep it clear and descriptive (e.g., “Premium Membership”, “Full Course Access”)
    * Select your pricing option:
      * **Free**: Give customers free access to your product
      * **One-time**: Charge customers once for lifetime access
      * **Recurring**: Set up monthly or yearly subscriptions
    * **Choose currency**: Select the currency you want to charge in
    * **Set your price**: Enter how much customers will pay
      * If you chose recurring, also choose your billing cycle length (weekly, monthly, yearly)
    * **Configure advanced options** (optional):
      * **Stock**: Limit how many people can purchase this product
      * **Add a waitlist**: Users enter payment details but aren’t charged until you approve them
      * **Ask questions before checkout**: Collect information from customers before they purchase
      * **Auto-expire access**: Automatically remove access after a set time period
      * **Redirect after checkout**: Send customers to a specific page after they complete checkout
      * **Add internal name**: A name only you can see on your dashboard
      * **Visibility**: Make this product visible on your public whop store page
    * **Choose payment methods**: Select what customers can pay with
      * Credit/debit card
      * Bank transfer (ACH)
      * PayPal
      * Cryptocurrency
      * Buy now, pay later (Financing)

    <Tip>
      If you want to offer multiple pricing options (like both monthly and yearly plans), click Add another billing period.
    </Tip>

    When you’re happy with everything, click **Add Product**.
  </Step>
</Steps>

## Next steps

To start accepting payments on Whop, complete the final setup step:

<Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
  Checkout links let you send customers straight to a payment page.
</Card>


# Create a whop
Source: https://docs.whop.com/payments/create-a-whop

Learn how to create a whop for payment processing

To start accepting payments, create your account on Whop.

<Steps>
  <Step title="Go to whop.com/sell" titleSize="h3">
    * Head over to [**whop.com/sell**](https://whop.com/sell)
    * Click **Start selling**
  </Step>

  <Step title="Choose how you plan to use Whop" titleSize="h3">
    When asked how you plan to to use Whop, you will see two options:

    1. **Build & sell digital products on Whop:** Choose this option if you plan to use Whop for building, hosting, and selling your digital products as well as accepting payments
    2. **Use Whop for payment processing only:** Choose this option if you want to use Whop to process payments and create checkout links only - but host and deliver your product elsewhere

    If you want to use Whop for payment processing only and host your digital product elsewhere, click **Use Whop for payment processing only**. Then click **Next**.
  </Step>

  <Step title="Name your business" titleSize="h3">
    * Choose a name for your business
    * Click **Create my business**
  </Step>
</Steps>

## Next steps

To start accepting payments through Whop, make sure you've completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Create a product" icon="tag" href="/payments/create-a-product">
    Products are how you package and price your various offers.
  </Card>

  <Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
    Checkout links let you send customers straight to a payment page.
  </Card>
</CardGroup>


# Create a checkout link
Source: https://docs.whop.com/payments/create-checkout-link

Checkout links are the fastest way to accept payment.

Checkout links let you send customers straight to a payment page to buy your products or services. You can offer free access, one-time payments, or monthly subscriptions.

Checkout links are the fastest way to get paid for your products and services. Here's how different businesses use them:

* **Sales teams** — Create custom links for each deal
* **Event hosts** — Send direct links to webinar or workshop checkout pages
* **Freelancers** — Use checkout links as digital invoices for completed work

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/L4f9rPtlCuc?si=n1OLK7Y42fkVKgse&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## Where can I find and create my checkout links?

* Go to your **Dashboard** > **Checkout links** to see all your links
* Click **+ Create checkout link** to create a new one

<Tip>
  Every pricing option you create on your whop can be found at Dashboard > Checkout links.

  And every checkout link you create on your dashboard can be found at whop > Manage pricing.
</Tip>

## How to create a checkout link

You can create three types of checkout links:

* **Free links** - Give customers free access to your whop
* **One-time payment links** - Charge customers once
* **Recurring payment links** - Set up monthly or yearly subscriptions

<Tip>
  Each checkout link is connected to one of your whops. When you create the link from your whop's pricing page, it's automatically connected to that whop. When you create it from your Dashboard, you'll need to choose which whop it's for.
</Tip>

### Free checkout links

**To create a free checkout link:**

1. Choose **Free** under Pricing type
2. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bc097048c997d9567b0b312000580296" alt="Checkout link" width="1222" height="720" data-path="how-to-videos/checkoutlink720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f846206d753d661df5f4c3e5e231a4ac 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=49dc211c4d222bdc2a1b830fd3e44334 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=281956d15028df546321bec1b32ea964 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=373baa188820b1b23c2a422ddd500db1 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ba27532a5f7f15fe005520b4047b5e80 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/checkoutlink720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=380dfce0b535f7dae5677253fbfdc8ff 2500w" data-optimize="true" data-opv="2" />

### One-time payment links

**To create a one-time payment link:**

1. Choose **One-time** under **Pricing type**
2. Set your **Price**
3. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard
4. Choose your **Payment methods** (what customers can pay with):
   * Credit/debit card
   * Bank transfer (ACH)
   * PayPal
   * Cryptocurrency
   * Buy now, pay later (Financing)

### Subscription (recurring) links

To create a subscription link:

1. Choose **Recurring** under Pricing type
2. Set your subscription details:
   * **Subscription price** — How much customers pay each billing cycle
   * **Subscription period** — How often they're charged (weekly, monthly, yearly)
   * **Initial fee** — Optional one-time setup fee when they first join
3. Click **Advanced Options** to add these features:
   * **Stock** — Limit how many people can use this link (or keep unlimited)
   * **Description** — Explain what users get when they join
   * **Show on store page** — Make this option visible on your public store page
   * **Add a waitlist** — Users enter card details but aren't charged until you approve them
   * **Ask questions before checkout** — Collect info from users before they join. You can make these optional by checking the **Optional** box.
   * **Auto-expire access** — Automatically remove access after a set time period
   * **Redirect after checkout** — Send users to a specific page after they complete checkout
   * **Add internal name** — A name only you can see on your dashboard
   * **Free trial** — Let customers try before they pay (choose how many days)
   * **Split payments** — Let customers pay in installments instead of all at once
   * **Cancellation discount** — Offer a discount when someone tries to cancel (helps retain customers)
4. Choose your **Payment methods**:
   * Credit/debit card
   * PayPal

## How to edit checkout links

If you need to update or change your pricing and settings, you can edit your checkout links from either your Dashboard or your whop's pricing page.

<Tabs>
  <Tab title="Method 1: Through your Dashboard">
    * Go to **Dashboard** > **Checkout links**
    * Find your link and click the 3 dots (︙) on the right
    * Click **Edit**
    * Make your changes and click **Update checkout link**
  </Tab>

  <Tab title="Method 2: Through your whop's pricing page">
    * Go to your whop > **Manage pricing**
    * Find the pricing option you want to edit and click the 3 dots (︙) on the right
    * Click **Edit**
    * Make your changes and click **Update checkout link**
  </Tab>
</Tabs>

<Card title="Create tracking links" icon="link" href="/manage-your-whop/tracking-links">
  If you want to see how your links are performing, tracking links give you detailed analytics of clicks, conversion rates, and revenue generated.
</Card>

## Embed Whop Payments on your website

<Card title="Whop checkout embeds" icon="sparkles" href="/payments/checkout-embed">
  Add a complete checkout form right into your website.
</Card>

## Frequently asked questions

<AccordionGroup>
  <Accordion title="What exactly are checkout links?">
    Checkout links (also called pricing options) are custom URLs that let customers join your whop with free access, a one-time payment, or a recurring subscription.
  </Accordion>

  <Accordion title="How do I limit how many people can use a link?">
    In the Advanced Options of any pricing type, look for the "Stock" setting. It's set to unlimited by default, but you can change it to any number you want.
  </Accordion>

  <Accordion title="Can I change the currency for my prices?">
    Yes! When setting the price for one-time or recurring links, you'll see a currency dropdown next to the price field.
  </Accordion>

  <Accordion title="How do I offer a free trial?">
    Free trials are only available for recurring (subscription) pricing. You'll find the free trial option in the Advanced Options section when creating a recurring link.
  </Accordion>

  <Accordion title="How do I create a private link that doesn't show on my store page?">
    When creating any checkout link, leave the "Show on store page" option unchecked. The link will still work when you share it directly, but it won't appear publicly on your store.
  </Accordion>

  <Accordion title="Why aren't my checkout links showing up on my store page?">
    Check that you enabled "Show on store page" in the Advanced Options when you created the link. If this option is off, the link will only work when shared directly.
  </Accordion>
</AccordionGroup>


# Credit card disputes
Source: https://docs.whop.com/payments/credit-card-disputes

Learn how to manage credit card disputes on Whop

Credit card disputes happen when customers contact their bank to challenge a payment. Learn how credit card disputes work and how to respond to them effectively.

## What you need to know

* The disputed amount is **immediately withdrawn** from your balance - this makes sure that you are able to cover the amount of the dispute if it is lost
* You have **7–21 days** to respond with proof of the purchase via Whops [**Dispute fighter**](/apps/docs/payments/dispute-fighter)
* The bank's decision will typically take **2–3 months** - you can check this status at any time from the Dispute fighter
* To respond: Go to **Dashboard** > **Dispute fighter**

## Dispute process overview

A dispute happens when a customer contacts their bank or credit card company to challenge a payment they made to your whop. Here's the basic process:

* **Customer files dispute** → Card issuer investigates the dispute
* **Whop gets notified** → You see the dispute in the [Dispute fighter](https://whop.com/dashboard/disputes/)
* **Money gets frozen** → Disputed amount + \$15 fee taken immediately from your balance
* **You submit evidence** → You have 7-21 days to respond to the dispute
* **Card issuer decides** → Takes 2-3 months for final decision

<Tip>
  To access your disputes: Go to Dashboard > Dispute fighter
</Tip>

### Common reasons customers file disputes

* They don't recognize the charge on their statement
* They think the transaction was fraudulent
* They're unhappy with their purchase and aren't aware of the **Resolution Center**
* They tried to cancel but got charged anyway

## Reserves

If your dispute rate gets too high, or if your account shows signs of being at risk of disputes, some of your Whop balance will be held in a reserve.

Reserves protect your account and make sure that you always have enough money available to cover any disputes that might arise. A percentage of each transaction (determined by your dispute risk) will be held for 90 days, after which you can withdraw it as normal.

### A reserve will be placed on your account if:

* Your dispute rate is too high
* You have a high rate of unresolved resolution center cases
* Transaction patterns show high risk of payments being disputed

Reserves are temporary and will be released as soon as your account’s dispute rates are healthy. You can check your dispute rate at any time on your Health report on the Payouts page of your creator dashboard.

If Whop detects fraudulent activity, an immediate, 100% reserve will be placed on your account until any signs of fraud are resolved.

## Keeping your account healthy

**Maintaining low dispute rates**

Keeping your dispute rate low is critical to keeping your business healthy. High dispute rates put you at risk with Whop, credit card networks, and financing partners.

To keep your dispute rates low:

* Have a clear Terms of Service, Return policies, and Refund policies
* Make sure your customers know where to go to get help - direct them to the **Resolution center** on Whop to resolve the issue directly
* Respond to Resolution center cases - refund customers where it is deserved to avoid them disputing the payment with their bank
* Set up [auto-responses to Resolution center](https://whop.com/dashboard/resolution-center/) cases to automatically refund cases below a certain dollar amount (that you set)
* Set up [early dispute alerts on the Dispute fighter ](https://whop.com/dashboard/disputes/)to automatically refund transactions before they officially become a dispute

**Negative balances**

Your whop balance can go negative if you have already withdrawn your funds and do not have enough money in your account to cover a dispute or refund.

You can pay off your negative balance from the [Payouts](https://whop.com/dashboard/payouts/) page on your dashboard.

## Dispute FAQs

<AccordionGroup>
  <Accordion title="Why is the dispute amount different from what the customer originally paid?">
    The dispute amount can differ for several reasons:

    * **Currency changes** - Exchange rates shift between when they paid and when they disputed
    * **Partial disputes** - Customer only disputes part of what they bought
    * **Multiple charges** - Card issuer combines several disputed payments into one
    * **Partially refunded payments** - Customer disputes the full amount even after getting some money back
  </Accordion>

  <Accordion title="Why can't I respond to a dispute?">
    Some disputes you automatically lose and can't challenge:

    * Certain fraud cases (depending on the card company)
    * Disputes from some countries due to local laws
    * Cases where the card issuer won't accept evidence
  </Accordion>

  <Accordion title="Do I need to submit evidence if the customer cancels their dispute?">
    Yes, you still need to submit evidence.
  </Accordion>
</AccordionGroup>


# Dispute fighter
Source: https://docs.whop.com/payments/dispute-fighter

Automatically fight disputes with customer logs

Whop's dispute fighter helps you track, get ahead of, respond to, and resolve disputes.

## What happens when a dispute is filed?

When a customer files a dispute:

* You’re notified instantly of the dispute via Whop's **Dispute fighter**
* The disputed amount is immediately debited from your balance to make sure you can cover the cost of the dispute, along with a \$15 dispute fee
* Whop auto-uploads key evidence (like access logs, policy disclosures, and customer info) into the dispute fighter
* You can upload additional proof and submit your response directly from your dashboard
* The dispute status, outcome, and deadline are all tracked in **Dispute fighter**

## How to view and manage disputes

You can monitor and manage all your disputes in the **Dispute fighter**:

1. Go to **Dashboard** > **Dispute fighter**
2. Click **Status** and choose from:
   * Needs response
   * Under review
   * Won
   * Lost

Track response deadlines and outcomes from this main view.

## How to respond to a dispute

When you get a dispute notification, you need to act fast and submit your evidence before the deadline.

**To fight a dispute:**

1. Go to **Dashboard** > [**Dispute fighter**](https://whop.com/dashboard/disputes/)
2. Click the dispute you want to respond to
3. Upload your evidence and documentation, such as:
   * Chat logs with the customer
   * Product details and descriptions
   * Cancellation policy
   * Refund policy
4. Add any supporting evidence like:
   * Cancellation request records
   * Customer communications
   * Refund records
   * Proof of subscription agreement
5. Click **Submit** to send your response

<Warning>
  Each dispute shows a "Respond by" date under Status. Make sure to submit your evidence before this deadline, or you'll automatically lose the dispute.
</Warning>

## What Whop automatically submits

Whop automatically uploads relevant files and user logs to strengthen your case:

**Customer details**

* Email address (proves they have an account)
* Customer name (confirms identity)
* Billing address (matches payment method to prove legitimate purchase)

**Product details**

* Purchase date (shows exactly when they bought)
* Description (proves what they purchased and agreed to)
* Access activity log showing:
  * When they bought access
  * If they agreed to Terms of Service and Refund policy
  * If they claimed access
  * If they engaged with your content

**Cancellation policy**

* Policy disclosure (shows customer saw and agreed to cancellation rules)
* Your actual cancellation policy document

**Refund policy**

* Refund refusal explanation (explains why refund wasn't given)
* Policy disclosure (proves customer knew refund rules before buying)
* Your actual refund policy document

<Tip>
  Add your own evidence: Beyond what Whop automatically includes, you can upload supporting evidence and customer communications to strengthen your case.
</Tip>

## Dispute fees

* Whop immediately takes the disputed amount from your account
* You're charged a \$15 dispute fee
* The disputed funds are held during the investigation process to make sure you have enough to cover the dispute, and they are returned once the dispute is won

**If you win**: The disputed amount is returned to your Whop balance

**If you lose**: The customer receives their refund from their card issuer - the money was already deducted to pay for this dispute, so no additional funds are taken from your account.

## How to win disputes

### 1. Set up early dispute alerts (optional)

Early dispute alerts give you advance warning when a customer is about to file a dispute, allowing you to resolve the issue before it becomes an official dispute that hurts your account.

### How Early dispute alerts work

* **Early warning system:** When a customer starts a dispute, you get notified immediately. This gives you a chance to resolve the issue before it becomes an official dispute on your record.
* **Automatic refunds save money:** Any transaction under your set amount gets automatically refunded, saving you from paying chargeback fees that can be much more expensive than the refund itself.
* **Clearer transaction info:** Each purchase shows up on the customer's bank statement with a clear description and website link, helping customers remember what they bought and reducing confusion-based disputes.

**To set it up:**

1. Go to **Dashboard** > **Dispute fighter**
2. Click **Early dispute alert**
3. Enter the amount under **Refund transactions lower than**
4. Click **Save**

<Warning>
  You'll be charged \$29 per Early dispute alert.
</Warning>

### 2. Fight disputes via the Dispute fighter

Knowing how card issuers decide disputes helps you send better proof and win more often.

<Warning>
  Even with Whop's help, the card issuer has the final call on whether you'll win or lose the dispute.
</Warning>

### The decision process

1. **Initial review:** The card issuer looks into the customer's complaint
2. **Submitting evidence:** You have 7-21 days to send your evidence (depending on the card company)
3. **Evaluation:** The card issuer reviews all evidence and makes a decision (usually 60-75 days)
4. **Final answer:** You either win or lose the dispute

### What card issuers look for in your evidence

* **Proof of transaction:** Clear records showing the customer sent the payment
* **Delivery proof:** Evidence you gave them what they paid for
* **Customer chats:** Any messages between you and the customer
* **Terms of Service:** Proof the customer agreed to your terms
* **Return policy:** Your clearly written return policy

## FAQs

<AccordionGroup>
  <Accordion title="How long do I have to respond to a dispute?">
    Each dispute has a deadline shown under Status in Dispute fighter. Response times vary for each dispute, so check them individually.
  </Accordion>

  <Accordion title="How do I increase my chances of winning?">
    Provide evidence that directly answers the customer's complaint. Upload clear policies, show proof they received and used your product, and include screenshots of them using your service.
  </Accordion>

  <Accordion title="Why did I lose a dispute?">
    The customer's bank makes the final decision, not Whop. Banks review all evidence you submit through Dispute fighter, but they decide the outcome. Whop gives you every tool to win, but we can't control the bank's decision.
  </Accordion>

  <Accordion title="Can a customer dispute the same payment multiple times?">
    Yes, but it's rare. Card companies and payment processors allow this - it's up to the payment company, and Whop can't prevent customers from trying again. Fight each dispute fully using Dispute fighter, even if it's the same purchase.
  </Accordion>

  <Accordion title="Can I refund a disputed payment?">
    If it's become a full chargeback, you can't refund it. But if the customer contacts their bank and cancels the dispute, then you can give them a refund.
  </Accordion>
</AccordionGroup>


# Financing
Source: https://docs.whop.com/payments/financing

Let customers split payments into monthly instalments

Give your customers the flexibility to split their purchases into monthly installments while you get paid upfront.

When your business has been approved, financing options are added to your checkout automatically.

## Available financing options

Whop partners with five financing providers. Depending on your business, you may qualify for some or all of these options:

* **Splitit**
* **Sezzle**
* **AfterPay**
* **Klarna**
* **Zip Pay**

## How to apply for financing

Apply for financing via this [financing application form](https://hunterd.app.n8n.cloud/form/e9e21a0c-91d5-4cda-9b14-a9506be5af44).

You can also apply for financing directly from the [Checkout links page](https://whop.com/dashboard/links/checkout/) of your dashboard.

1. Click **+ Create checkout link**
2. Select **One-time** as your pricing type
3. Under **Payment methods**, click **Apply for financing**
4. Complete the application form

You will receive an email if we cannot accept or are missing information from your application. Once you are accepted, you will get a Whop DM notifying you that you have access to financing.

Once accepted, all active financing options will automatically show up at customer checkout. You can toggle which financing options you do or do not want as an option on each checkout link from the [Checkout links page](https://whop.com/dashboard/links/checkout/).

## Eligibility requirements

To qualify for financing options, your business must meet these requirements:

### 1. Basic setup requirements

* Your**Whop Payments account** must be fully set up and verified
  * Go to [**Payouts**](https://whop.com/dashboard/payouts/) in your dashboard to complete setup
* \*\*Your store page must be filled out \*\*
  * We need to understand what you're selling and how you fulfill orders

### 2. Business requirements

* **Eligible categories**: Financing companies \*\*cannot \*\*support gambling, sports betting, trading signals (pure education may be ok!), credit offers, or adult content under any circumstances
* **Low dispute rate**: Have \< 2% dispute rate over the last 90 days
  * If you are new to Whop, we will ask for statements from the last 90 days from your previous **payment processor**. Note that we need processing statements, NOT bank statements, and we need to see your total number of transactions and total number of disputes over the last 90 days.
* **Processing volume**: At least \$30,000 processed from 10+ different customers in the last 90 days

<Tip>
  You'll receive a Whop DM when your business is approved and financing is
  enabled. If you haven't heard back about your application, check your email
  for requests for additional documentation or application updates.
</Tip>

## How it works for customers

When financing is enabled:

1. Financing options appear automatically on your checkout page
2. Customers choose their preferred provider (e.g. Klarna, AfterPay)
3. Customers are redirected to the financing provider for instant approval
4. They complete their purchase through the financing platform

You can control which financing options appear on each of your checkout links through your pricing settings.

<Tip>You still receive full payment upfront (minus standard fees)</Tip>

## Keep your financing access

Whop’s priority is to make sure you keep your financing access for the long term. Whop has the following features to help you keep your dispute rates low and keep financing active on your account:

**Dispute rate monitoring**

* View dispute rates for each financing partner on your **Health report** (in the **Payouts** section)
* Alerts sent via email and Whop DM when dispute rates hit warning levels:
  * Klarna: warning at 0.5% dispute rate on Klarna transactions
  * All others: warning 1% dispute rate on any other BNPL option

<Tip>
  When you receive an alert, take extra precautions to prevent further disputes.
  Set clear return policies, refund angry customers, and make sure your
  customers know where to go to resolve issues so they don't dispute directly
  with the bank.
</Tip>

\*\*Splitit minimum balance (Splitit only) \*\*

* 15% of every Splitit transaction is held in your Whop balance for 180 days
* This shows Splitit that you can cover any potential disputes
* Track your Splitit balance and release dates on your [**Payouts**](https://whop.com/dashboard/payouts/) page

### **Dispute rate limits**

Stay under these thresholds to keep your financing access:

* **Klarna:** Under 1% dispute rate
* **All other providers:** Under 2% dispute rate

Financing access will be automatically revoked if you hit these dispute rate thresholds on financed transactions, and you will be notified via email that you have lost access to financing.

## Troubleshooting

If financing isn't showing on your checkout links after approval, check these common issues:

**Transaction too large**

* Sezzle: \$2,500 limit
* AfterPay: \$4,000 limit
* Splitit: \$65,000 limit

**Wrong pricing type**

* Financing only works with one-time payments, not subscriptions

**Location restrictions**

* Sezzle, Klarna, and AfterPay only show for US customers

**Dispute rate too high**

* Check your Health report - you may have exceeded the 2% dispute threshold (1% for Klarna)

**Incomplete setup**

* Ensure your Whop Payments account is fully configured
* Verify your store page is complete with clear product descriptions


# Overview
Source: https://docs.whop.com/payments/overview

Start here if you want to use Whop to accept payments

If you want better processing, but you've already built your business on platforms, you can also use Whop for checkout and payments.

## Get started

<CardGroup cols={3}>
  <Card title="Create an account" icon="sparkles" href="/payments/create-a-whop">
    To start accepting payments, create your account on Whop.
  </Card>

  <Card title="Create a product" icon="tag" href="/payments/create-a-product">
    Products are how you package and price your various offers.
  </Card>

  <Card title="Copy checkout link" icon="link" href="/payments/create-checkout-link">
    Checkout links let you send customers straight to a payment page.
  </Card>
</CardGroup>

## Next steps

Customize your payments flow and offer flexible payment options to maximize conversions.

<CardGroup cols={2}>
  <Card title="Embedded checkout" icon="cart-shopping" href="/payments/checkout-embed">
    Integrate Whop's checkout directly into your website for a seamless payment
    experience without redirects.
  </Card>

  <Card title="Set up financing" icon="credit-card" href="/payments/financing">
    Let customers pay in installments with flexible financing options to
    increase average order value and conversions.
  </Card>
</CardGroup>


# Payment declines
Source: https://docs.whop.com/payments/payment-declines

Learn how payment declines work and how to manage them

Learn what causes payment declines, what Whop does to recover them, and how you or your customers can fix declined payments.

## Specific decline reasons and messages

When a payment is declined, you may receive one of these specific decline codes. Here's what each means and how to resolve them:

| Decline Reason                    | Explanation                                                                                                                                                                                                                                                                    |
| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `insufficient_funds`              | Your card has insufficient funds to complete this purchase. Please use a different payment method or ensure your account has sufficient funds.                                                                                                                                 |
| `lost_card`                       | This payment was declined because the card is reported as lost. Please use a different card to complete your purchase.                                                                                                                                                         |
| `stolen_card`                     | This payment was declined because the card is reported as stolen. Please use a different card to complete your purchase.                                                                                                                                                       |
| `expired_card`                    | Your card has expired. Please check the expiration date and try again, or use a different card.                                                                                                                                                                                |
| `suspected_fraud`                 | For security reasons, this payment couldn't be processed. Please contact your bank for more information or try a different payment method.                                                                                                                                     |
| `invalid_card_number`             | The card number is incorrect. Please double-check the 16-digit number on your card and try again.                                                                                                                                                                              |
| `invalid_cvc`                     | The security code (CVC) is incorrect. Please check the 3-4 digit code on the back of your card (or front for Amex) and try again.                                                                                                                                              |
| `invalid_cvc_or_expiration`       | The security code (CVC) or expiration date is incorrect. Please double-check both the 3-4 digit security code and the MM/YY expiration date.                                                                                                                                   |
| `incorrect_pin`                   | The PIN entered is incorrect. Please try again with the correct PIN. This decline only applies to payments made with a card reader.                                                                                                                                            |
| `authentication_required`         | Additional verification is required for this payment. You may be redirected to your bank's website or receive a text message to confirm this transaction. Please complete the verification to proceed.                                                                         |
| `card_not_supported`              | This card doesn't support this type of purchase. Please try a different credit or debit card.                                                                                                                                                                                  |
| `currency_not_supported`          | Your card doesn't support payments in this currency. Please use a different card or contact your bank about international transactions.                                                                                                                                        |
| `duplicate_transaction`           | A transaction with the same amount and card was just processed. Please check your email for confirmation. If you didn't receive it, please wait a few minutes before trying again.                                                                                             |
| `generic_decline`                 | Your card was declined. Please try: 1) Using a different card, 2) Contacting your bank, or 3) Checking that your billing information is correct.                                                                                                                               |
| `invalid_account`                 | This card or the associated account is invalid. Please use a different card or contact your bank for assistance.                                                                                                                                                               |
| `invalid_amount`                  | The payment amount exceeds your card's limit. Please try a smaller amount or use a different payment method.                                                                                                                                                                   |
| `processing_error`                | We encountered a temporary issue processing your payment. Please wait a moment and try again, or use a different card.                                                                                                                                                         |
| `restricted_card`                 | This card cannot be used for this payment. It may have restrictions or been reported lost/stolen. Please use a different card.                                                                                                                                                 |
| `card_velocity_exceeded`          | You've exceeded your card's transaction limit or available balance. Please try a smaller amount or use a different card.                                                                                                                                                       |
| `contact_issuer`                  | Please contact your card issuer for more information about this decline. Call the 800 number on the back of your card.                                                                                                                                                         |
| `bank_declined`                   | Your bank has declined this transaction. Please try a different card or contact your bank.                                                                                                                                                                                     |
| `regulatory_blocked`              | This transaction cannot be processed due to regulatory restrictions in your region. Please try a different payment method or contact support for alternatives.                                                                                                                 |
| `transaction_not_permitted`       | Your card issuer doesn't allow this type of transaction. Please use a different card or contact your bank to enable this transaction type.                                                                                                                                     |
| `card_type_not_supported`         | This card type is not supported. Please try a different card.                                                                                                                                                                                                                  |
| `issuer_not_found`                | The payment was declined due to incorrect card or billing details. Please verify your card number, expiration date, and billing address, then try again.                                                                                                                       |
| `closed_account`                  | This card account has been closed. Please use a different card to complete your purchase.                                                                                                                                                                                      |
| `issuer_unavailable`              | We couldn't reach your card issuer to authorize this payment. This is usually temporary. Please try again in a few minutes or use a different card.                                                                                                                            |
| `invalid_zip`                     | The billing postal/ZIP code doesn't match your card's records. Please enter the ZIP code associated with your card's billing address.                                                                                                                                          |
| `invalid_expiry_month`            | The expiration month is invalid. Please enter a valid month (01-12) and try again.                                                                                                                                                                                             |
| `invalid_expiry_year`             | The expiration year is invalid. Please enter a valid 2 or 4-digit year (e.g., 25 or 2025) and try again.                                                                                                                                                                       |
| `invalid_expiry`                  | The expiration date is invalid. Please enter a valid date in MM/YY format and ensure the card hasn't expired.                                                                                                                                                                  |
| `invalid_transaction`             | The issuing bank has declined this transaction. This may be due to an incorrect card number, expired card, invalid card, wrong expiration date, mismatched billing address or zip code, or multiple rapid transaction attempts. Please verify your card details and try again. |
| `cannot_authorize`                | We couldn't authorize this payment. Please try a different card or contact your bank for more information.                                                                                                                                                                     |
| `pin_required`                    | This card requires a PIN for this transaction. Please use a card reader with PIN capability or try a different card.                                                                                                                                                           |
| `pin_try_exceeded`                | Too many incorrect PIN attempts. For security, this card is temporarily blocked. Please contact your bank or use a different card.                                                                                                                                             |
| `high_risk`                       | This payment couldn't be processed due to security concerns. Please try a different card or contact support for assistance.                                                                                                                                                    |
| `test_mode_decline`               | This appears to be a test card number. Please use a real credit or debit card to complete your purchase.                                                                                                                                                                       |
| `merchant_blacklist`              | This payment was blocked for security reasons. Please try a different card or contact support for assistance.                                                                                                                                                                  |
| `reenter_transaction`             | Your bank couldn't process this payment. Please try again, use a different card, or contact your bank for more information.                                                                                                                                                    |
| `invalid_pin`                     | The PIN entered is incorrect. Please try again with the correct PIN for this card.                                                                                                                                                                                             |
| `pin_required_as`                 | This card requires a PIN for this transaction. Please use a card reader with PIN capability or try a different card.                                                                                                                                                           |
| `withdrawal_count_limit_exceeded` | You've exceeded your card's daily transaction limit or available balance. Please try again tomorrow or use a different card.                                                                                                                                                   |
| `invalid_country`                 | The billing country doesn't match your card's records. Please verify your billing address country and try again.                                                                                                                                                               |
| `issuer_error`                    | Your bank detected an issue but couldn't specify the problem. Please try again in a few minutes or contact your bank directly for assistance.                                                                                                                                  |

## What happens when a payment is declined

When a customer's payment gets declined or fails, Whop takes several steps to try and recover the payment:

* **The subscription status changes to Past due**: This means the payment needs attention, but doesn't immediately cancel access
  * You can view Past due payments by going to **Dashboard** > **Payments**, clicking **Status** and selecting only **Past due**
* **We email the customer**: Your customers receive emails prompting them to update their payment information
* **We retry the payment**: Whop automatically retries the charge over a 5-day period
* **Access may be temporarily paused**: Depending on your settings, your customer might lose access to your whop until the payment goes through
  * Go to **Dashboard** > **Settings** > **Checkout** and choose whether you want members to have **Access while past due** or not
* **Subscription is canceled**: If the payment still fails after 5 days, the subscription is canceled automatically

## What you can do to fix a declined payment

When a payment is declined, you can help the customer update their payment method and manually retry the payment from your dashboard.

**Step 1: Ask the customer to update their payment method**

* Contact the customer to confirm they have sufficient funds and a working payment method
* To update their payment method, ask them to follow these steps:
  1. Go to [https://whop.com/@me/settings/memberships/inactive](https://whop.com/@me/settings/memberships/inactive)
  2. Click the **card** button on the affected subscription
  3. Select **Update payment**
  4. Add the new card details and save

**Step 2: Manually retry the payment from your dashboard**

1. Go to **Dashboard** > **Payments**
2. Click **Status** and select only **Failed**
3. Select the failed payment
4. Click **Retry payment**

When the payment processes successfully, Whop restores the customer’s access automatically.


# Refunds
Source: https://docs.whop.com/payments/refund-customer

Learn how to refund your customers on Whop

Process refunds instantly, set up auto-refunds, and manage your account balance on Whop.

## How to process a refund

There are three ways to refund a customer: through their **profile** (quickest method), **Payments**, or the **Resolution Center**.

<Tabs>
  <Tab title="Customer's profile">
    1. Go to your **Dashboard**
    2. Use the search bar at the top right to find the customer
    3. Click on their profile
    4. Click the **Refund** button under **Spend**
       * Or scroll down to **Payments** and click **Refund** next to the specific payment
    5. Choose your refund amount:
       * Click **Refund** for the full amount
       * Check **Partial refund** and enter the amount you want to refund
    6. Click **Confirm**
  </Tab>

  <Tab title="Payments">
    Great if you want to see all your transactions:

    1. Go to **Dashboard** > **Payments**
    2. Find the payment you want to refund
    3. Click the 3 dots (⋮) next to the customer
    4. Select **Refund** from the dropdown
    5. Choose your refund amount:
       * Click **Refund** for the full amount
       * Check **Partial refund** and enter the amount you want to refund
    6. Click **Confirm**
  </Tab>

  <Tab title="Resolution Center">
    1. Go to **Dashboard** > **Resolution center**
    2. Click on the case you want to resolve
    3. Click **Accept**
    4. Choose your refund amount:
       * Click **Refund** for the full amount
       * Check **Partial refund** and enter the amount you want to refund
    5. Click **Confirm**
  </Tab>
</Tabs>

<Tip>
  Refunds are processed immediately, and you'll see the refund appear on the customer's profile right away.
</Tip>

## Set up auto-refunds to save time

If you want to automatically handle smaller refund requests, you can set up auto-refunds for amounts under a certain threshold.

To set up auto-refunds:

1. Go to **Dashboard** > **Resolution Center**
2. Click **Auto respond**
3. Set your auto-refund thresholds:
   * **Auto-refund card payments below**: Set the maximum amount for automatic card refunds
   * **Auto-refund PayPal payments below**: Set the maximum amount for automatic PayPal refunds
4. Add a custom message (optional) that customers will see when they receive an auto-refund
5. Click **Save**

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=71c76be6ae27988f7a573a4e7cc5689d" alt="Auto refunds" title="Auto refunds" className="mx-auto" style={{ width:"46%" }} width="570" height="791" data-path="images/autorefundsetup.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=585127deb708dd1a3e79d93a8e87c2a0 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=79c13f4d54dd7ab8cf5dca343e9f8e87 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=9309bb6b1507f0c82cc00148ce5ed30d 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d39031efcdd8e5cfec4297270995c1c2 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=078f31450ac6be676be6d79bc7eba51f 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/autorefundsetup.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f32d3a30efe55983ab12ba95d18b9535 2500w" data-optimize="true" data-opv="2" />

## What to do if you don't have sufficient funds

If your Whop account doesn't have sufficient funds for a refund, you'll need to add money to your account first.

### Top up your balance

To add funds to your account:

1. Go to **Dashboard > Payouts**
2. Click **Top up +**
3. Enter the amount you want to add
4. Choose to pay from your personal balance or select another payment method
5. Click **Pay**

<Tip>
  Always keep some money in your account so you can process refunds quickly. This keeps customers happy and makes your business look professional.
</Tip>

### Set up minimum balance retention

If you use **Recurring withdrawals**, you can automatically keep money in your account for refunds:

1. Go to **Dashboard** > **Payouts**
2. Click **Recurring withdrawals**
3. Set your withdrawal schedule (**Daily**, **Weekly**, or **Monthly**) and click **Continue**
4. Enter the minimum amount you want to keep in your account and click **Continue**
   * We recommend keeping enough to cover at least two refunds at your typical price
5. Click **Confirm**

<Tip>
  If you only use manual withdrawals, you can't set a minimum balance to retain — you'll need to manage your balance manually.
</Tip>

## FAQs

<AccordionGroup>
  <Accordion title="How do fees work with refunds?">
    When you refund someone, you pay back the full amount they originally paid — even though you received less after fees were deducted.

    For example: If a customer paid \$100, you'll refund the full \$100 even though you only received around \$97 after Whop and processing fees.

    This applies to both full and partial refunds. There are no additional fees to process a refund.
  </Accordion>

  <Accordion title="How long does it take for customers to receive their refunds?">
    It depends on the customer's bank or payment method. Customers can typically expect to see refunds in their account within 3-7 business days after the refund is processed.
  </Accordion>
</AccordionGroup>


# Resolution center
Source: https://docs.whop.com/payments/resolution-center

Manage refund requests before they turn into disputes

The **Resolution center** is where you can review and respond to customer refund claims.

## How the Resolution center works

Here’s what happens when a customer opens a claim:

1. **Customer opens a claim**
   * They explain the issue and choose a reason
   * They can upload up to 3 files (screenshots, videos, receipts)
2. **You receive a notification**
   * Whop sends you an email
   * The case appears in your **Resolution center**
3. **You respond**
   * Chat directly with the customer
   * Click **Accept**, **Deny**, or **Request more info**

<Info>
  Whop automatically uploads user logs for every case. In these, you can see:

  * When the user bought access to your Whop
  * If they agreed to your Terms of Service and Refund policy
  * If they claimed access to your Whop
  * If they engaged with your Whop
</Info>

4. **A decision is made**
   * If resolved between you and the customer, the case is closed
   * If the case is not resolves or you don’t respond within 7 days, Whop will step in and make a decision

## How to respond to a Resolution center case

1. Go to **Dashboard** > **Resolution center**
2. Click the case you want to manage
3. Click **Accept**, **Deny**, or **Request more info**

You can upload any proof in your response, so make sure to have solid Terms of Service and Return policy.

<Card title="Upload legal documents" icon="file-circle-check" href="/manage-your-whop/legal-documents">
  Learn how to upload legal documents and policies to your whop.
</Card>

<Tip>
  Cases without a response for 7 days are sent to Whop's team automatically. Responding fast shows you care and helps keep customers happy.
</Tip>

## Set up auto respond for small refunds

You can set up automatic refunds for smaller claims:

1. Go to **Dashboard** > **Resolution center**
2. Click **Auto respond**
3. Pick the amount for which auto-refunds are sent:
   * This can be set under **Auto-refund card payments below**
   * And **Auto-refund PayPal payments below**
4. (Optional) Add a custom message your customers will see when they get auto-refunded

## Escalations and appeals

**If you don't respond within 7 days:**

* Whop reviews the case and decides based on all available info
* Both you and the customer are notified of the outcome

**Appeal process:**

* If either you or your customer disagrees with a decision, either party can appeal
* Whop will review the case again
* That decision is final and cannot be appealed further

## Notifications

Whop will email you when:

* A customer opens a new dispute
* A customer replies to your request for more info
* A case is esolved, escalated, or appealed
* Final decisions are made

If you're not getting emails from the Resolution center, go to **Dashboard** > **Settings** > **Notifications** and turn on the **Resolution center** toggle.

## FAQs

<AccordionGroup>
  <Accordion title="How many cases can a customer open?">
    Customers can open a case within 120 days of each payment they've made. For example, if a customer has made three payments, they can open three cases. However, only one case can be opened per payment. Once a case is closed and all appeals have been exhausted, the case cannot be reopened.
  </Accordion>

  <Accordion title="Can a customer open a case for a payment that has already been refunded?">
    No. When a payment is refunded, no further case can be opened.
  </Accordion>

  <Accordion title="Are all payments eligible for the Resolution center?">
    Only fiat payments are eligible for the Resolution center. Payments made with cryptocurrency via Coinbase Commerce are not eligible since they are irreversible and non-refundable.
  </Accordion>

  <Accordion title="What happens when Whop decides in favor of the customer?">
    Whop will either refund the customer on your behalf (which will be automatically processed) or decide to credit the customer's Whop Balance (which you do not incur a cost for). The result will be clearly communicated to you and the customer through the Resolution center timeline for the case.
  </Accordion>
</AccordionGroup>


# Setup payouts
Source: https://docs.whop.com/payments/set-up-payouts

Learn how to set up payouts and withdraw your balance from Whop

With Whop, you can set up manual, recurring, or instant payouts to your bank account through Whop Payments. You can also get direct payouts to your PayPal and Coinbase Commerce accounts.

## Enable withdrawals with Whop Payments

To withdraw, you'll first need to set up Whop Payments:

1. Go to **Dashboard > Payouts**.
2. Click **Set up Whop Payments**.
3. Select your country so payouts are in your local currency.
4. Complete the Stripe-powered setup (fill in your details, link your bank, and upload ID).

## Check your balance

You can view and withdraw your earnings from either your **Dashboard** or your **Profile**.

### 1. Through your Dashboard

1. Go to **Dashboard > Payouts**.
2. Your **Balance** and **Withdrawals** are here.

Your Balance includes:

* The amount you can withdraw now
* The balance that'll be available to pay out soon (when a customer pays, it can take a couple of days for the money to reach your account)

### 2. Through your Profile

Your payouts can be found at **Profile > Balance**.

## How to withdraw

You can withdraw from your **Dashboard** or **Profile** at any time, as long as you meet the minimum withdrawal threshold of \$10 (if applicable).

### Payout via Dashboard

1. Go to your **Dashboard > Payouts**.
2. Click **Withdraw**.
3. Input the **Amount** you want to withdraw and click **Continue**.
   * You can also click **Use max** to withdraw the maximum amount available.
4. Review the details and click **Confirm withdrawal**.

### Payout via Profile

1. Go to your **Profile > Balance**.
2. Click **Withdraw**.
3. Input the **Amount** you want to withdraw and click **Confirm withdrawal**.

## Setting up recurring withdrawals

1. Go to your **Dashboard** > **Payouts**.
2. Click **Recurring withdrawals**.
3. Choose **How often you want to get paid** and click **Continue.**
4. Set the minimum amount that’s kept in your account and click **Continue.**
   * You should always have a minimum balance available for refunds or to pay out disputes.
5. Review the details and click **Confirm.**

## International payouts

Creators outside the US need to set up a bank account that accepts the currency of their registered country.

On Whop Payments, Whop is the *Merchant of Record*, and our system automatically converts all currencies to the currency of the geography you initially chose when you set up your Whop organization.

* This means that, even if you accept payments in USD, Whop automatically converts the USD payments to your local currency before sending payouts.
* Payouts will NOT successfully go through to a USD-accepting bank account if the bank account is located in a country where USD is not the local currency.

<Warning>
  Your payout country can't be changed for an existing whop. To switch countries, create a new whop and set up Whop Payments under the new country with an associated bank account.
</Warning>

## PayPal payouts

To receive PayPal payouts, customers must buy using PayPal (no post-purchase transfer to PayPal).

### Setting up payouts to your PayPal

1. Go to your **Dashboard** > **Payouts** > **Additional payment methods**.
2. Select **Setup** next to the **PayPal** option.
3. Follow the on-screen instructions to link your PayPal account.

<Tip>
  For PayPal to appear at checkout, check the PayPal box under Payment options when you create a checkout link.
</Tip>

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=2c05b6caa09ad1cfda52a51402a54115" alt="Paypal" width="569" height="249" data-path="images/paypalpopup.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=eefcfe534db84d20f8e95a0512699737 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a2823de9f862ceaaca06fe6c5b4283a8 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=175e62153245ca8e178a50148f14cec6 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=26d8c48278fc032dce36ca9f30177bdb 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b4ca5932a583b8a61e73f58768ae4c71 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/paypalpopup.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=140f9276824c1ab5ee3b5482fe669463 2500w" data-optimize="true" data-opv="2" />

## Coinbase payouts

**Important notes:**

* Withdrawals must go to a Coinbase wallet
* To receive Coinbase payouts, customers must buy using crypto (no post-purchase transfer to Coinbase)

### Setting up payouts to your Coinbase crypto wallet

1. Go to your **Dashboard** > **Payouts** > **Additional payment methods**.
2. Select **Setup** next to the **Coinbase** option.
3. Follow the on-screen instructions to link your Coinbase Commerce account.
4. You will need to log into your Coinbase account and copy your API key and Webhook secret to paste into Whop.

**For Coinbase to appear at checkout:** Check the **Crypto** box under **Payment options** when you create a checkout link.

<Tip>
  To get paid with crypto, you have to set up a one-time pricing plan.
</Tip>

<img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b1785c63ee490390c189cd5d501ff693" alt="Coinbase" title="Coinbase" className="mx-auto" style={{ width:"51%" }} width="574" height="580" data-path="images/coinbasepopup.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=22b800171a53bd0077d8309cbf6583ec 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=512308a933e6b5bb31f6e1ac5d080966 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b4ab4e7176b1a6a1a161f93cae3c99f2 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=36e537a4466b08db03850c6459c2fcbc 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a34ef71e9f69fa73fb116dd740d74211 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/coinbasepopup.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=925a639af7a6f896cd46b565f9ad1a0a 2500w" data-optimize="true" data-opv="2" />

## Troubleshooting payouts

### Common payout statuses

* **Requested:** A withdrawal has been initiated and is awaiting approval
* **Processing / In Transit:** Payment is processing (takes 1–5 business days)
* **Completed:** Funds sent by Whop, awaiting bank processing

### Payout timing & processing delays

**Standard timing:**

* When you make a sale, the money will be available for withdrawal in 1–4 business days.
* Once withdrawn, allow up to 10 business days for the payout to be processed and arrive in your bank.

**If a payout fails:**

1. Go to **Dashboard** > **Payouts**.
2. Click **Retry payout** next to the failed transaction.

You can also click on the payout to see more information on the payout timeline and why the payout may have failed.

**Common reasons for failed payouts:**

* Your bank account is not in the local currency of the country where you registered your Whop
* You entered your bank account information incorrectly

**To replace your bank account:**

* Go to your **Dashboard** > **Payouts**.
* Click on **Withdraw**.
* Click on your bank account (under the amount you want to withdraw).
* Input your new bank account details and click **Replace** (bottom right).

### If a payout says "Completed" but money hasn't arrived

This means the payout has been processed on Whop's end.

1. Allow up to 5 business days (excluding weekends and bank holidays) for your bank to process it.
2. If it takes longer, click on the payout to see the payout timeline. A Trace ID will be provided.

**To track or trace your payout:**

1. Contact your bank's customer service.
2. Share the Trace ID, payout date, amount, and payor name (Whop).

## Withdraw affiliate earnings

There is a 30-day waiting period from when the referred customer makes their purchase and when the referrer gets paid the affiliate cut. This waiting period is to protect businesses on Whop from potential disputes and refunds.

**To withdraw your affiliate earnings:**

1. Go to your **Profile** > **Balance**.
2. Click on **Withdraw**.
3. Input the **Amount** you want to withdraw and click on **Confirm withdrawal**.


# Taxes
Source: https://docs.whop.com/payments/taxes

Learn more about how Whop helps you handle your taxes

<Warning>
  Whop is not qualified to provide financial or tax advice. Always consult with a Certified Public Accountant (CPA), Chartered Accountant, or professional tax advisor for guidance specific to your situation.
</Warning>

Learn how taxes work on Whop - including which tax forms you’ll receive, how sales tax and VAT are handled, and how to apply taxes to your prices.

## Tax forms you'll receive

If you're based in the US, you'll receive tax forms from Whop when you meet certain income thresholds.

### 1099-K forms from Whop

We'll send you a 1099-K tax form if you're US-based and hit the minimum gross receipts for the year:

| Tax Year        | Minimum Gross Receipts |
| :-------------- | :--------------------- |
| 2024            | \$5,000                |
| 2025            | \$2,500                |
| 2026 and beyond | \$600                  |

To receive your 1099-K by January 31st, make sure whop has your:

* Legal name
* Mailing address
* Tax ID Number (TIN)

### Additional 1099-K forms

If you use other payment processors like PayPal alongside Whop, you may receive separate 1099-K forms from each.

### If you're not in the US

We don't send tax forms to creators outside the US right now. If you need any paperwork or reports, just reach out to our support team.

## How Whop handles sales tax, GST, and VAT

Whop acts as the Merchant of Record (MoR) and Deemed Supplier for all Whop Payments transactions, which means we handle the collection and remittance of US sales tax, GST, and VAT for you.

### What Whop covers

When customers pay through Whop Payments, we automatically:

* Figure out what taxes are needed based on where your customer lives
* Collect those taxes when they check out
* Remit taxes to the appropriate tax authorities
* Handle US sales tax, international GST, and VAT compliance

### What you're responsible for

* All other tax filings required in your jurisdiction
* Handle taxes for any sales through other payment methods you might use
* Report your income on your tax returns

<Info>
  If you use other payment processors besides Whop, you might need to handle tax collection yourself. This depends on where you and your customers are located and how much you make.
</Info>

## Understanding VAT for international sales

VAT (Value-Added Tax) is a tax on products and services in places like Europe, the UK, and other jurisdictions.

### How VAT works on Whop

* **Tax rate determined by customer location**: The VAT rate depends on where your customer is located, not where you're based
* **Whop handles collection**: As the Merchant of Record, we collect VAT from EU and UK customers
* **Automatic remittance**: We remit collected VAT to the appropriate tax authorities on your behalf

This means you don't need to worry about VAT when selling to international customers through Whop Payments.

## Choose how taxes are applied to your prices

You get to choose how taxes are applied to your prices.

### Exclusive pricing (default)

Taxes are added on top of your price:

**Example:**

* Your price: \$100
* Taxes: \$20
* Customer pays: \$120
* You receive: \$100

### Inclusive pricing

Taxes are included in your price:

**Example:**

* Your price: \$100
* Taxes: \$20
* Customer pays: \$100
* You receive: \$80

### How to change how taxes are applied to your prices

To switch between **Inclusive** and **Exclusive** pricing:

1. Go to your **Dashboard**
2. Click **Settings**
3. Select **Legal**
4. Click **Tax type**
5. Choose your preferred tax setting:
   * **Exclusive**: Customer pays for tax
   * **Inclusive**: You pay for tax
6. Click **Save**

## Getting tax reports and invoices

Our support team can help you get the documents you need for tax time.

### Request reports and invoices

Contact Whop support to get:

* Tax reporting documents
* VAT compliance invoices
* Any other paperwork you need


# Refer businesses to Whop
Source: https://docs.whop.com/refer-businesses-to-whop

If you refer a business to Whop, you'll earn a 30% commission on their revenue.

If you refer a business to Whop, you'll earn a 30% commission on their revenue they drive to our platform. Revenue is calculated on every transaction.

<Frame>
  <video autoPlay src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/partners.mp4?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=029fc5c68a5e0406f846383a93af1c25" alt="Refer businesses to Whop" data-path="how-to-videos/partners.mp4" />
</Frame>

To refer businesses, go to the [Whop partners page](https://whop.com/affiliates/partners). You will be able to see a list of everyone you have referred.

## Onboard specific business models

Customize your affiliate links to streamline the onboarding process and automatically attribute a business model to your referrals.

### Business model and industry parameters

Add these parameters to your affiliate URLs to streamline the onboarding steps:

* `business_type` - Pre-select the business model
* `industry_type` - Pre-select the industry
* `a` - Your affiliate username to track referrals and earn commissions

#### Valid business model and industry combinations:

**agency**

* `ai_agency`
* `marketing_agency`
* `clipping_agency`
* `development_agency`
* `sales_agency`
* `design_agency`
* `recruiting_agency`
* `coaching_agency`
* `customer_support_agency`
* `other`

**brick\_and\_mortar**

* `gym`
* `coffee_shop`
* `restaurant`
* `salon_spa`
* `retail_store`
* `medical_dentist_office`
* `auto_repair_shop`
* `hotel_lodging`
* `other`

**events**

* `webinars`
* `masterminds`
* `bootcamps`
* `convention`
* `meetups`
* `concerts`
* `parties`
* `other`

**physical\_products**

* `clothing`
* `beauty_and_personal_care`
* `accessories`
* `fitness_gear`
* `food_and_beverages`
* `home_goods`
* `electronics_and_gadgets`
* `other`

**coaching\_and\_courses**

* `fitness`
* `real_estate`
* `business`
* `health_and_wellness`
* `dating`
* `agencies`
* `personal_development`
* `sales`
* `social_media`
* `personal_finance`
* `ai`
* `ecommerce`
* `public_speaking`
* `trading`
* `amazon_fba`
* `reselling`
* `spirituality`
* `careers`
* `home_services`
* `travel`
* `software`
* `kindle_book_publishing`
* `video_games`
* `clipping`
* `sports_betting`
* `vas`
* `other`

**software**

* `ai`
* `trading`
* `ecommerce`
* `business`
* `agencies`
* `social_media`
* `amazon_fba`
* `reselling`
* `video_games`
* `health_and_wellness`
* `personal_finance`
* `fitness`
* `sales`
* `sports_betting`
* `real_estate`
* `software`
* `careers`
* `travel`
* `home_services`
* `public_speaking`
* `dating`
* `personal_development`
* `spirituality`
* `vas`
* `clipping`
* `kindle_book_publishing`
* `other`

**paid\_group**

* `trading`
* `sports_betting`
* `fitness`
* `health_and_wellness`
* `ecommerce`
* `reselling`
* `social_media`
* `ai`
* `business`
* `personal_development`
* `sales`
* `real_estate`
* `agencies`
* `amazon_fba`
* `personal_finance`
* `video_games`
* `dating`
* `spirituality`
* `travel`
* `careers`
* `software`
* `home_services`
* `public_speaking`
* `clipping`
* `vas`
* `kindle_book_publishing`
* `other`

**newsletter**

* `ai`
* `trading`
* `business`
* `personal_finance`
* `ecommerce`
* `health_and_wellness`
* `social_media`
* `fitness`
* `real_estate`
* `agencies`
* `sales`
* `amazon_fba`
* `sports_betting`
* `reselling`
* `personal_development`
* `spirituality`
* `video_games`
* `dating`
* `careers`
* `travel`
* `public_speaking`
* `software`
* `home_services`
* `kindle_book_publishing`
* `clipping`
* `vas`
* `other`

### Example affiliate URLs

```
https://whop.com/new/?business_type=software&industry_type=ai&a=username
https://whop.com/new/?business_type=software&a=username
```

### Common use cases

**For onboarding AI businesses:**

```
https://whop.com/new/?business_type=software&industry_type=ai&a=username
```

**For onboarding clipping groups:**

```
https://whop.com/new/?business_type=paid_group&industry_type=clipping&a=username
```

This is perfect for creating targeted content like YouTube tutorials where you want to streamline the signup process for a specific business model and industry.


# Docs for your LLM
Source: https://docs.whop.com/sdk/ai

Learn how to build with AI using Whop's APIs.

Our docs are available in a text format. You can use this to feed your LLM with the docs.

[https://docs.whop.com/llms-full.txt](https://docs.whop.com/llms-full.txt)

You can also install our MCP by runnning this command:

```bash
npx mint-mcp add whop
```

This provides you with a ready-to-use MCP server with knowledge of our docs.


# Create Access Pass
Source: https://docs.whop.com/sdk/api/access-passes/create-access-pass



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `access_pass:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.accessPasses.createAccessPass({
	// A banner image for the access pass in png, jpeg format
	bannerImage: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	},

	// The creator pitch for the access pass.
	creatorPitch: "some string",

	// The custom call to action for the access pass.
	customCta:
		"apply_now" /* Valid values: apply_now | call_now | complete_order | contact_us | donate_now | get_access | get_offer | join | order_now | purchase | shop_now | sign_up | subscribe */,

	// The custom call to action URL for the access pass.
	customCtaUrl: "some string",

	// A written description of the access pass.
	description: "some string",

	// An array of experience IDs that this pass has
	experienceIds: ["xxxxxxxxxxx"],

	// The percentage of the revenue that goes to the global affiliate program.
	globalAffiliatePercentage: 10,

	// The status of the global affiliate program for this access pass.
	globalAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The headline of the access pass.
	headline: "some string",

	// The URLs of the images to upload to the access pass.
	imageUrls: ["some string"],

	// The logo for the access pass in png, jpeg, or gif format
	logo: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	},

	// The ID of the marketplace category to assign to the access pass.
	marketplaceCategoryId: "xxxxxxxxxxx",

	// The percentage of the revenue that goes to the member affiliate program.
	memberAffiliatePercentage: 10,

	// The status of the member affiliate program for this access pass.
	memberAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The details to assign an autogenerated plan.
	planOptions: {
		// The respective currency identifier for the plan.
		baseCurrency:
			"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

		// The interval at which the plan charges (renewal plans).
		billingPeriod: 10,

		// An array of custom field objects.
		customFields: [
			{
				// The type of the custom field.
				fieldType: "text" /* Valid values: text */ /* Required! */,

				// The ID of the custom field (if being updated)
				id: "xxxxxxxxxxx",

				// The name of the custom field.
				name: "some string" /* Required! */,

				// The order of the field.
				order: 10,

				// The placeholder value of the field.
				placeholder: "some string",

				// Whether or not the field is required.
				required: true,
			},
		],

		// An additional amount charged upon first purchase.
		initialPrice: 10,

		// Indicates if the plan is a one time payment or recurring.
		planType: "one_time" /* Valid values: one_time | renewal */,

		// The method by which the plan is released to the public.
		releaseMethod: "buy_now" /* Valid values: buy_now | raffle | waitlist */,

		// The amount the customer is charged every billing period.
		renewalPrice: 10,

		// The visibility of the plan.
		visibility:
			"archived" /* Valid values: archived | hidden | quick_link | visible */,
	},

	// The product highlights for the access pass.
	productHighlights: [
		{
			// Text to display to describe the product highlight (max length 250 for
			// qualification or benefits, 170 for who this is for, 140 for pricing features).
			content: "some string" /* Required! */,

			// The type of this highlight.
			highlightType:
				"benefit" /* Valid values: benefit | pricing_feature | qualification | who_this_is_for */ /* Required! */,

			// The title of the product highlight, if applicable.
			title: "some string",
		},
	],

	// The ID of the product tax code to apply to this access pass.
	productTaxCodeId: "xxxxxxxxxxx",

	// The URL to redirect the customer to after a purchase.
	redirectPurchaseUrl: "some string",

	// The route of the access pass.
	route: "some string",

	// A short description of what the access pass offers or does. Must be 150 chars or less.
	shortenedDescription: "some string",

	// Whether or not to show the member count on the access pass.
	showMemberCount: true,

	// Whether or not to show reviews on the access pass.
	showReviewsDtc: true,

	// The social links for the access pass.
	socialLinks: [
		{
			// The URL of the social link
			url: "some string" /* Required! */,

			// The website this link is for
			website:
				"facebook" /* Valid values: facebook | instagram | linkedin | tiktok | twitch | website | x | youtube */ /* Required! */,
		},
	],

	// The title of the access pass.
	title: "some string" /* Required! */,

	// Whether or not customers can upgrade to different plans on this access pass.
	upgradeable: true,

	// This access pass will/will not be displayed publicly.
	visibility:
		"archived" /* Valid values: archived | hidden | quick_link | visible */,
});

```

### Example output

```typescript
const result = {
	// The internal ID of the public access pass.
	id: "xxxxxxxxxxx",

	// When the public access pass was created.
	createdAt: 1716931200,

	// The route of the access pass.
	route: "some string",

	// The title of the access pass. Use for Whop 4.0.
	title: "some string",

	// The headline of the access pass.
	headline: "some string",

	// A short description of what the company offers or does.
	shortenedDescription: "some string",

	// Whether this product is Whop verified.
	verified: true,

	// This access pass will/will not be displayed publicly.
	visibility:
		"archived" /* Valid values: archived | hidden | quick_link | visible */,

	// The number of active users for this access pass.
	activeUsersCount: 10,

	// The average of all reviews for this access pass.
	reviewsAverage: 10,

	// The creator pitch for the access pass.
	creatorPitch: "some string",

	// The timestamp (in milliseconds since epoch) of when the access pass was updated
	updatedAtMs: "9999999",

	// Whether to show the offers on the access pass.
	showOffers: true,

	// The URL to redirect the customer to after a purchase, if applicable.
	redirectPurchaseUrl: "some string",

	// The custom call to action for the access pass.
	customCta:
		"apply_now" /* Valid values: apply_now | call_now | complete_order | contact_us | donate_now | get_access | get_offer | join | order_now | purchase | shop_now | sign_up | subscribe */,

	// The custom call to action URL for the access pass, if any.
	customCtaUrl: "some string",

	// The percentage of a transaction a user is eligible to earn from the whop marketplace global affiliate program.
	globalAffiliatePercentage: 10,

	// The status of the global affiliate program for this access pass.
	globalAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The percentage of a transaction a user is eligible to earn from the whop marketplace member affiliate program.
	memberAffiliatePercentage: 10,

	// The status of the member affiliate program for this access pass.
	memberAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// Whether to show the member count.
	showMemberCount: true,

	// The logo for the access pass.
	logo: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The banner image for the access pass.
	bannerImage: {
		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},
	},
};

```


# Delete Access Pass
Source: https://docs.whop.com/sdk/api/access-passes/delete-access-pass



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `access_pass:delete`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.accessPasses.deleteAccessPass({
	// The internal ID (tag) of the access pass to delete.
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Access Pass
Source: https://docs.whop.com/sdk/api/access-passes/get-access-pass

Fetches an access pass based on the ID or the route

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.accessPasses.getAccessPass({
	// The ID or route of the access pass to fetch.
	accessPassId: "prod_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The internal ID of the public access pass.
	id: "xxxxxxxxxxx",

	// The title of the access pass. Use for Whop 4.0.
	title: "some string",

	// A short description of what the company offers or does.
	shortenedDescription: "some string",

	// Whether this product is Whop verified.
	verified: true,

	// This access pass will/will not be displayed publicly.
	visibility:
		"archived" /* Valid values: archived | hidden | quick_link | visible */,

	// The route of the access pass.
	route: "some string",

	// The number of active users for this access pass.
	activeUsersCount: 10,

	// The logo for the access pass.
	logo: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The banner image for the access pass.
	bannerImage: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The headline of the access pass.
	headline: "some string",

	// A short type of the company that this access pass belongs to.
	company: {
		// The ID (tag) of the company.
		id: "xxxxxxxxxxx",

		// The title of the company.
		title: "some string",

		// The slug/route of the company on the Whop site.
		route: "some string",

		// The company's logo.
		logo: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// The company's banner image.
		bannerImage: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},
	},

	// The average of all reviews for this access pass.
	reviewsAverage: 10,

	// The user that owns the access pass (company owner).
	ownerUser: {
		// The internal ID of the user.
		id: "xxxxxxxxxxx",

		// The name of the user from their Whop account.
		name: "some string",

		// The username of the user from their Whop account.
		username: "some string",

		// The user's profile picture
		profilePicture: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// Whether or not the user's phone is verified
		phoneVerified: true,

		// The city the user is from.
		city: "some string",

		// The country the user is from.
		country: "some string",
	},

	// The attachments for the access pass.
	galleryImages: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},
		],
	},
};

```


# Update Access Pass
Source: https://docs.whop.com/sdk/api/access-passes/update-access-pass



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `access_pass:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.accessPasses.updateAccessPass({
	// A banner image for the access pass in png, jpeg format
	bannerImage: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	},

	// The creator pitch for the access pass.
	creatorPitch: "some string",

	// The custom call to action for the access pass.
	customCta:
		"apply_now" /* Valid values: apply_now | call_now | complete_order | contact_us | donate_now | get_access | get_offer | join | order_now | purchase | shop_now | sign_up | subscribe */,

	// The custom call to action URL for the access pass.
	customCtaUrl: "some string",

	// The percentage of the revenue that goes to the global affiliate program.
	globalAffiliatePercentage: 10,

	// The status of the global affiliate program for this access pass.
	globalAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The headline of the access pass.
	headline: "some string",

	// The ID (tag) of the access pass
	id: "xxxxxxxxxxx" /* Required! */,

	// The logo for the access pass in png, jpeg, or gif format
	logo: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	},

	// The percentage of the revenue that goes to the member affiliate program.
	memberAffiliatePercentage: 10,

	// The status of the member affiliate program for this access pass.
	memberAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The ID of the product tax code to apply to this access pass.
	productTaxCodeId: "xxxxxxxxxxx",

	// The URL to redirect the customer to after a purchase.
	redirectPurchaseUrl: "some string",

	// The route of the access pass.
	route: "some string",

	// A short description of what the access pass offers or does. Must be 150 chars or less.
	shortenedDescription: "some string",

	// Whether or not to show the member count on the access pass.
	showMemberCount: true,

	// Whether or not to show the offers on the access pass.
	showOffers: true,

	// Whether or not to show reviews on the access pass.
	showReviewsDtc: true,

	// The title of the access pass.
	title: "some string",

	// This access pass will/will not be displayed publicly.
	visibility:
		"archived" /* Valid values: archived | hidden | quick_link | visible */,
});

```

### Example output

```typescript
const result = {
	// The internal ID of the public access pass.
	id: "xxxxxxxxxxx",

	// When the public access pass was created.
	createdAt: 1716931200,

	// The route of the access pass.
	route: "some string",

	// The title of the access pass. Use for Whop 4.0.
	title: "some string",

	// The headline of the access pass.
	headline: "some string",

	// A short description of what the company offers or does.
	shortenedDescription: "some string",

	// Whether this product is Whop verified.
	verified: true,

	// This access pass will/will not be displayed publicly.
	visibility:
		"archived" /* Valid values: archived | hidden | quick_link | visible */,

	// The number of active users for this access pass.
	activeUsersCount: 10,

	// The average of all reviews for this access pass.
	reviewsAverage: 10,

	// The creator pitch for the access pass.
	creatorPitch: "some string",

	// The timestamp (in milliseconds since epoch) of when the access pass was updated
	updatedAtMs: "9999999",

	// Whether to show the offers on the access pass.
	showOffers: true,

	// The URL to redirect the customer to after a purchase, if applicable.
	redirectPurchaseUrl: "some string",

	// The custom call to action for the access pass.
	customCta:
		"apply_now" /* Valid values: apply_now | call_now | complete_order | contact_us | donate_now | get_access | get_offer | join | order_now | purchase | shop_now | sign_up | subscribe */,

	// The custom call to action URL for the access pass, if any.
	customCtaUrl: "some string",

	// The percentage of a transaction a user is eligible to earn from the whop marketplace global affiliate program.
	globalAffiliatePercentage: 10,

	// The status of the global affiliate program for this access pass.
	globalAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// The percentage of a transaction a user is eligible to earn from the whop marketplace member affiliate program.
	memberAffiliatePercentage: 10,

	// The status of the member affiliate program for this access pass.
	memberAffiliateStatus: "disabled" /* Valid values: disabled | enabled */,

	// Whether to show the member count.
	showMemberCount: true,

	// The logo for the access pass.
	logo: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The banner image for the access pass.
	bannerImage: {
		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},
	},
};

```


# Check If User Has Access To Access Pass
Source: https://docs.whop.com/sdk/api/access/check-if-user-has-access-to-access-pass

Check if the user has access to a Whop resource

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.access.checkIfUserHasAccessToAccessPass({
	// The ID of the access pass
	accessPassId: "prod_XXXXXXXX" /* Required! */,

	// The ID of the user
	userId: "user_XXXXXXXX",
});

```

### Example output

```typescript
const result = {
	// Whether the user has access to the resource
	hasAccess: true,

	// The permission level of the user
	accessLevel: "admin" /* Valid values: admin | customer | no_access */,
};

```


# Check If User Has Access To Company
Source: https://docs.whop.com/sdk/api/access/check-if-user-has-access-to-company

Check if the user has access to a Whop resource

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.access.checkIfUserHasAccessToCompany({
	// The ID of the company
	companyId: "biz_XXXXXXXX" /* Required! */,

	// The ID of the user
	userId: "user_XXXXXXXX",
});

```

### Example output

```typescript
const result = {
	// Whether the user has access to the resource
	hasAccess: true,

	// The permission level of the user
	accessLevel: "admin" /* Valid values: admin | customer | no_access */,
};

```


# Check If User Has Access To Experience
Source: https://docs.whop.com/sdk/api/access/check-if-user-has-access-to-experience

Check if the user has access to a Whop resource

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.access.checkIfUserHasAccessToExperience({
	// The ID of the experience
	experienceId: "exp_XXXXXXXX" /* Required! */,

	// The ID of the user
	userId: "user_XXXXXXXX",
});

```

### Example output

```typescript
const result = {
	// Whether the user has access to the resource
	hasAccess: true,

	// The permission level of the user
	accessLevel: "admin" /* Valid values: admin | customer | no_access */,
};

```


# Create Affiliate
Source: https://docs.whop.com/sdk/api/affiliates/create-affiliate



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `affiliate:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.affiliates.createAffiliate({
	// The fee that the affiliate will receive for each referral (either a percentage or a flat fee).
	fee: "some string",

	// Whether the affiliate will only receive one payout.
	onlyOnePayout: true,

	// Whether the fee is a percentage or a flat fee.
	payoutType:
		"flat_fee" /* Valid values: flat_fee | percentage */ /* Required! */,

	// The ID of the plan that the affiliate can refer.
	planId: "xxxxxxxxxxx",

	// The IDs of the plans that the affiliate can refer.
	planIds: ["xxxxxxxxxxx"],

	// The username of the user who will become an affiliate
	username: "some string" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the affiliate
	id: "xxxxxxxxxxx",

	// The status of the affiliate
	status: "active" /* Valid values: active | archived | deleted */,

	// The total active members of the affiliate
	activeMembersCount: 10,

	// The type of this affiliate
	affiliateType:
		"custom" /* Valid values: custom | global | marketplace | passholder */,

	// The total count of all plans this member is an affiliate for
	totalPlanCount: 10,

	// The total earnings of the affiliate from the users they referred
	totalReferralEarnings: "some string",

	// The total referrals of the affiliate
	totalReferrals: 10,

	// The total revenue of the affiliate from their referrals
	totalRevenue: "some string",

	// The user account that performed the action.
	userAccount: {
		// The internal ID of the user.
		id: "xxxxxxxxxxx",

		// The name of the user from their Whop account.
		name: "some string",

		// The username of the user from their Whop account.
		username: "some string",

		// The user's profile picture
		profilePicture: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// Whether or not the user's phone is verified
		phoneVerified: true,

		// The city the user is from.
		city: "some string",

		// The country the user is from.
		country: "some string",
	},
};

```


# Get Affiliate
Source: https://docs.whop.com/sdk/api/affiliates/get-affiliate

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `affiliate:basic:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.affiliates.getAffiliate({
	affiliateId: "xxxxxxxxxxx" /* Required! */,

	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// Get a specific affiliate from a company
	affiliate: {
		// The ID of the affiliate
		id: "xxxxxxxxxxx",

		// The status of the affiliate
		status: "active" /* Valid values: active | archived | deleted */,

		// The total active members of the affiliate
		activeMembersCount: 10,

		// The type of this affiliate
		affiliateType:
			"custom" /* Valid values: custom | global | marketplace | passholder */,

		// The total count of all plans this member is an affiliate for
		totalPlanCount: 10,

		// The total earnings of the affiliate from the users they referred
		totalReferralEarnings: "some string",

		// The total referrals of the affiliate
		totalReferrals: 10,

		// The total revenue of the affiliate from their referrals
		totalRevenue: "some string",

		// The user account that performed the action.
		userAccount: {
			// The internal ID of the user.
			id: "xxxxxxxxxxx",

			// The name of the user from their Whop account.
			name: "some string",

			// The username of the user from their Whop account.
			username: "some string",

			// The user's profile picture
			profilePicture: {
				// The original URL of the attachment, such as a direct link to S3. This should
				// never be displayed on the client and always passed to an Imgproxy transformer.
				sourceUrl: "some string",
			},

			// Whether or not the user's phone is verified
			phoneVerified: true,

			// The city the user is from.
			city: "some string",

			// The country the user is from.
			country: "some string",
		},
	},
};

```


# List Affiliates
Source: https://docs.whop.com/sdk/api/affiliates/list-affiliates

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `affiliate:basic:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.affiliates.listAffiliates({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	direction: "asc" /* Valid values: asc | desc */,

	first: 10,

	last: 10,

	order:
		"cached_total_referrals" /* Valid values: cached_total_referrals | cached_total_rewards | created_at | id */,
});

```

### Example output

```typescript
const result = {
	// The affiliates for the company
	affiliates: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating backwards, the cursor to continue.
			startCursor: "some string",

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The ID of the affiliate
				id: "xxxxxxxxxxx",

				// The status of the affiliate
				status: "active" /* Valid values: active | archived | deleted */,

				// The total active members of the affiliate
				activeMembersCount: 10,

				// The type of this affiliate
				affiliateType:
					"custom" /* Valid values: custom | global | marketplace | passholder */,

				// The total count of all plans this member is an affiliate for
				totalPlanCount: 10,

				// The total earnings of the affiliate from the users they referred
				totalReferralEarnings: "some string",

				// The total referrals of the affiliate
				totalReferrals: 10,

				// The total revenue of the affiliate from their referrals
				totalRevenue: "some string",

				// The user account that performed the action.
				userAccount: {
					// The internal ID of the user.
					id: "xxxxxxxxxxx",

					// The name of the user from their Whop account.
					name: "some string",

					// The username of the user from their Whop account.
					username: "some string",

					// The user's profile picture
					profilePicture: {
						// The original URL of the attachment, such as a direct link to S3. This should
						// never be displayed on the client and always passed to an Imgproxy transformer.
						sourceUrl: "some string",
					},

					// Whether or not the user's phone is verified
					phoneVerified: true,

					// The city the user is from.
					city: "some string",

					// The country the user is from.
					country: "some string",
				},
			},
		],
	},
};

```


# Update Affiliate
Source: https://docs.whop.com/sdk/api/affiliates/update-affiliate



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `affiliate:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.affiliates.updateAffiliate({
	// The amount the affiliate will earn (either amount or percent 1-100)
	fee: "some string",

	// The ID (tag) of the affiliate.
	id: "xxxxxxxxxxx" /* Required! */,

	// Whether or not the affiliate will only get one payout or it will be recurring.
	onlyOnePayout: true,

	// The type of payout.
	payoutType: "flat_fee" /* Valid values: flat_fee | percentage */,

	// The IDs of the plans that the affiliate can refer.
	planId: "some string" /* Required! */,

	// Sets the affiliate as active/inactive.
	status: "active" /* Valid values: active | archived | deleted */,
});

```

### Example output

```typescript
const result = {
	// The ID of the affiliate
	id: "xxxxxxxxxxx",

	// The status of the affiliate
	status: "active" /* Valid values: active | archived | deleted */,

	// The total active members of the affiliate
	activeMembersCount: 10,

	// The type of this affiliate
	affiliateType:
		"custom" /* Valid values: custom | global | marketplace | passholder */,

	// The total count of all plans this member is an affiliate for
	totalPlanCount: 10,

	// The total earnings of the affiliate from the users they referred
	totalReferralEarnings: "some string",

	// The total referrals of the affiliate
	totalReferrals: 10,

	// The total revenue of the affiliate from their referrals
	totalRevenue: "some string",

	// The user account that performed the action.
	userAccount: {
		// The internal ID of the user.
		id: "xxxxxxxxxxx",

		// The name of the user from their Whop account.
		name: "some string",

		// The username of the user from their Whop account.
		username: "some string",

		// The user's profile picture
		profilePicture: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// Whether or not the user's phone is verified
		phoneVerified: true,

		// The city the user is from.
		city: "some string",

		// The country the user is from.
		country: "some string",
	},
};

```


# Create App
Source: https://docs.whop.com/sdk/api/apps/create-app



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:create_app`
* *`access_pass:basic:read` (optional)*
* *`developer:manage_api_key` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.createApp({
	// The base URL of the app to be created
	baseUrl: "some string",

	// The name of the app to be created
	name: "some string" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the app
	id: "xxxxxxxxxxx",

	// The name of the app
	name: "some string",

	// The description of the app
	description: "some string",

	// If the status is live, the app is visible on Whop discovery. In order to be
	// live, you need to set the name, icon, and description. Being unlisted or
	// hidden means it's not visible on Whop but you can still install the app via
	// direct link. To remove the app from whop discovery, you should set the status to unlisted.
	status: "hidden" /* Valid values: hidden | live | unlisted */,

	// The icon for the app. This icon is shown on discovery, on the product page, on
	// checkout, and as a default icon for the experiences.
	icon: {
		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},
	},

	// Whether the app is using the default icon. We have this b/c icon is null
	// false, but we need to tell the user if they are using the default icon so they change it.
	usingDefaultIcon: true,

	// The base url of the app
	baseUrl: "some string",

	// The developer base url of the app
	baseDevUrl: "some string",

	// The path for the hub view of the app
	experiencePath: "some string",

	// The path part for a specific view of the app. This is the template part of the
	// url after the base domain. Eg: /experiences/[experienceId]
	discoverPath: "some string",

	// The path part for a specific view of the app. This is the template part of the
	// url after the base domain. Eg: /experiences/[experienceId]
	dashboardPath: "some string",

	// The API keys for the app.
	// Roles: owner, admin
	apiKeys: {
		// A list of nodes.
		nodes: [
			{
				// The ID of this API key
				id: "xxxxxxxxxxx",

				// This is the API key used to authenticate requests
				token: "some string",

				// When this API key was created at
				createdAt: 1716931200,
			},
		],
	},

	// The agent users that are owned by this application.
	agentUsers: {
		// A list of nodes.
		nodes: [
			{
				// The internal ID of the user
				id: "xxxxxxxxxxx",

				// The name of the user
				name: "some string",

				// The Whop username for this user
				username: "some string",
			},
		],
	},

	// The company that owns the app
	company: {
		// The ID (tag) of the company.
		id: "xxxxxxxxxxx",
	},

	// The access pass that is used to sell the app
	accessPass: {
		// The internal ID of the public access pass.
		id: "xxxxxxxxxxx",
	},
};

```


# Create App Build
Source: https://docs.whop.com/sdk/api/apps/create-app-build



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_builds`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.createAppBuild({
	// The ID of the app to create a build for. By default the current app from the api key is used.
	appId: "app_XXXXXXXX",

	// Attachment input for the app build file. This should be an upload in .zip
	// format. The zip should contain at least one main_js_bundle.hbc file and
	// optionally an assets folder next to it.
	attachment: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	} /* Required! */,

	// Checksum of the app build file. This is generated by the client and used to
	// verify the integrity of the file that is submitted when un-packaged later on a device.
	checksum: "some string" /* Required! */,

	// The platform of the app build (ios, android, web)
	platform: "android" /* Valid values: android | ios | web */ /* Required! */,

	// Supported app view types for the app build. A build can specify multiple view
	// types, but should only specify ones that its code supports.
	supportedAppViewTypes: [
		"analytics" /* Valid values: analytics | dash | dashboard | discover | hub */,
	],
});

```

### Example output

```typescript
const result = {
	// The ID of the app build. It will look like apbu_xxxxx.
	id: "xxxxxxxxxxx",

	// When this app build was created.
	createdAt: 1716931200,

	// The URL to download the app build .zip file.
	fileUrl: "some string",

	// This is generated by the client and used to verify the integrity of the file
	// that is submitted. It is a SHA256 hash of the app build file.
	checksum: "some string",

	// The platform of the app build (ios, android, web)
	platform: "android" /* Valid values: android | ios | web */,

	// The review message for the app build, if any. This is populated when the build
	// is rejected and there is a reason specified by the reviewer.
	reviewMessage: "some string",

	// The supported app view types for the app build. These are the views that the
	// developer has specified that this build supports.
	supportedAppViewTypes: [
		"analytics" /* Valid values: analytics | dash | dashboard | discover | hub */,
	],

	// The status of the app build (draft, approved, rejected, pending, etc)
	status: "approved" /* Valid values: approved | draft | pending | rejected */,
};

```


# Get App
Source: https://docs.whop.com/sdk/api/apps/get-app

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:basic:read`
* *`access_pass:basic:read` (optional)*
* *`developer:manage_api_key` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.getApp({
	appId: "app_XXXXXXXX" /* Required! */,

	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The app for the company
	app: {
		// The ID of the app
		id: "xxxxxxxxxxx",

		// The name of the app
		name: "some string",

		// The description of the app
		description: "some string",

		// If the status is live, the app is visible on Whop discovery. In order to be
		// live, you need to set the name, icon, and description. Being unlisted or
		// hidden means it's not visible on Whop but you can still install the app via
		// direct link. To remove the app from whop discovery, you should set the status to unlisted.
		status: "hidden" /* Valid values: hidden | live | unlisted */,

		// The icon for the app. This icon is shown on discovery, on the product page, on
		// checkout, and as a default icon for the experiences.
		icon: {
			// The source of the attachment
			source: {
				// The URL to access the attachment
				url: "some string",
			},
		},

		// Whether the app is using the default icon. We have this b/c icon is null
		// false, but we need to tell the user if they are using the default icon so they change it.
		usingDefaultIcon: true,

		// The base url of the app
		baseUrl: "some string",

		// The developer base url of the app
		baseDevUrl: "some string",

		// The path for the hub view of the app
		experiencePath: "some string",

		// The path part for a specific view of the app. This is the template part of the
		// url after the base domain. Eg: /experiences/[experienceId]
		discoverPath: "some string",

		// The path part for a specific view of the app. This is the template part of the
		// url after the base domain. Eg: /experiences/[experienceId]
		dashboardPath: "some string",

		// A collection of stats for the app.
		stats: {
			// This is the number of users that have spent time in this app in the last 24 hours.
			dau: 10,

			// This is the number of users that have spent time in this app in the last 28 days.
			mau: 10,

			// This how much time, in seconds, users have spent in this app in the last 24 hours.
			timeSpentLast24HoursInSeconds: 10,

			// This is the number of users that have spent time in this app in the last 7 days.
			wau: 10,
		},

		// The API keys for the app.
		// Roles: owner, admin
		apiKeys: {
			// A list of nodes.
			nodes: [
				{
					// The ID of this API key
					id: "xxxxxxxxxxx",

					// This is the API key used to authenticate requests
					token: "some string",

					// When this API key was created at
					createdAt: 1716931200,
				},
			],
		},

		// The agent users that are owned by this application.
		agentUsers: {
			// A list of nodes.
			nodes: [
				{
					// The internal ID of the user
					id: "xxxxxxxxxxx",

					// The name of the user
					name: "some string",

					// The Whop username for this user
					username: "some string",
				},
			],
		},

		// The access pass that is used to sell the app
		accessPass: {
			// The internal ID of the public access pass.
			id: "xxxxxxxxxxx",

			// The status of the access pass in the marketplace.
			marketplaceStatus:
				"live_marketplace" /* Valid values: live_marketplace | not_available | pending_review */,

			// A count of the active memberships on this access pass.
			activeMembershipsCount: 10,

			// Fetch a marketplace category in respect to the level.
			marketplaceCategory: {
				// A unique identifier for the category.
				id: "xxxxxxxxxxx",

				// The name of the category.
				name: "some string",
			},
		},
	},
};

```


# List Apps
Source: https://docs.whop.com/sdk/api/apps/list-apps

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:basic:read`
* *`access_pass:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.listApps({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	first: 10,

	last: 10,
});

```

### Example output

```typescript
const result = {
	// The app for the company
	apps: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, the cursor to continue.
			endCursor: "some string",

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating backwards, the cursor to continue.
			startCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The ID of the app
				id: "xxxxxxxxxxx",

				// The name of the app
				name: "some string",

				// The description of the app
				description: "some string",

				// If the status is live, the app is visible on Whop discovery. In order to be
				// live, you need to set the name, icon, and description. Being unlisted or
				// hidden means it's not visible on Whop but you can still install the app via
				// direct link. To remove the app from whop discovery, you should set the status to unlisted.
				status: "hidden" /* Valid values: hidden | live | unlisted */,

				// The icon for the app. This icon is shown on discovery, on the product page, on
				// checkout, and as a default icon for the experiences.
				icon: {
					// The source of the attachment
					source: {
						// The URL to access the attachment
						url: "some string",
					},
				},

				// Whether the app is using the default icon. We have this b/c icon is null
				// false, but we need to tell the user if they are using the default icon so they change it.
				usingDefaultIcon: true,

				// The base url of the app
				baseUrl: "some string",

				// The developer base url of the app
				baseDevUrl: "some string",

				// The path for the hub view of the app
				experiencePath: "some string",

				// The path part for a specific view of the app. This is the template part of the
				// url after the base domain. Eg: /experiences/[experienceId]
				discoverPath: "some string",

				// The path part for a specific view of the app. This is the template part of the
				// url after the base domain. Eg: /experiences/[experienceId]
				dashboardPath: "some string",

				// A collection of stats for the app.
				stats: {
					// This is the number of users that have spent time in this app in the last 24 hours.
					dau: 10,

					// This is the number of users that have spent time in this app in the last 28 days.
					mau: 10,

					// This how much time, in seconds, users have spent in this app in the last 24 hours.
					timeSpentLast24HoursInSeconds: 10,

					// This is the number of users that have spent time in this app in the last 7 days.
					wau: 10,
				},

				// The access pass that is used to sell the app
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The status of the access pass in the marketplace.
					marketplaceStatus:
						"live_marketplace" /* Valid values: live_marketplace | not_available | pending_review */,
				},
			},
		],
	},
};

```


# Promote App Build
Source: https://docs.whop.com/sdk/api/apps/promote-app-build



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_builds`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.promoteAppBuild({
	// The ID of the app build to promote.
	appBuildId: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Unassign App Build
Source: https://docs.whop.com/sdk/api/apps/unassign-app-build



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_builds`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.unassignAppBuild({
	// The ID of the app to unassign the production build from.
	appId: "app_XXXXXXXX" /* Required! */,

	// What platform should be unassigned
	platform: "android" /* Valid values: android | ios | web */ /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Update App
Source: https://docs.whop.com/sdk/api/apps/update-app



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:update_app`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.updateApp({
	// The description of the app for the app store in-depth app view.
	appStoreDescription: "some string",

	// The base developer url of the app
	baseDevUrl: "some string",

	// The base preview url of the app
	basePreviewUrl: "some string",

	// The base production url of the app
	baseUrl: "some string",

	// The path for the dashboard view of the app
	dashboardPath: "some string",

	// The default agent user ID for the app
	defaultAgentUserId: "xxxxxxxxxxx",

	// The description of the app
	description: "some string",

	// The path for the discover view of the app
	discoverPath: "some string",

	// The path for the hub view of the app
	experiencePath: "some string",

	// If the apps experience's should force showing the pre-checkout iframe, and not rely on app connections.
	forceCheckoutIframe: true,

	// The hub call to action text of the app
	hubCta: "some string",

	// The icon for the app
	icon: {
		// This ID should be used the first time you upload an attachment. It is the ID
		// of the direct upload that was created when uploading the file to S3 via the
		// mediaDirectUpload mutation.
		directUploadId: "xxxxxxxxxxx",

		// The ID of an existing attachment object. Use this when updating a resource and
		// keeping a subset of the attachments. Don't use this unless you know what you're doing.
		id: "xxxxxxxxxxx",
	},

	// The ID of the app
	id: "xxxxxxxxxxx" /* Required! */,

	// The image for the app
	image: "some string",

	// The name of the app
	name: "some string",

	// The product page text of the app
	productPage: "some string",

	// The scopes that the app will request off of users when a user installs the app.
	requiredScopes: ["read_user" /* Valid values: read_user */],

	// If the status is live, the app is visible on Whop discovery. In order to be
	// live, you need to set the name, icon, and description. Being unlisted or
	// hidden means it's not visible on Whop but you can still install the app via
	// direct link. To remove the app from whop discovery, you should set the status to unlisted.
	status: "hidden" /* Valid values: hidden | live | unlisted */,
});

```

### Example output

```typescript
const result = true;

```


# Update App Permissions
Source: https://docs.whop.com/sdk/api/apps/update-app-permissions



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:update_app_authorization`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.apps.updateAppPermissions({
	// The ID of the app the permission requirements are being updated for
	appId: "app_XXXXXXXX" /* Required! */,

	// The permissions that the app will request off of users when a user installs the app.
	requestedPermissions: [
		{
			// The action that the app will request off of users when a user installs the app.
			action: "some string" /* Required! */,

			// Whether the action is required for the app to function.
			isRequired: true /* Required! */,

			// The reason for requesting the action.
			justification: "some string" /* Required! */,
		},
	] /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Attachment
Source: https://docs.whop.com/sdk/api/attachments/get-attachment

Returns the attachment

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.attachments.getAttachment({
	// The ID of the attachment
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the attachment
	id: "xxxxxxxxxxx",

	// A signed ID of the attachment to directly query the attachment
	signedId: "xxxxxxxxxxx",

	// Whether the attachment has been analyzed
	analyzed: true,

	// The size of the file in bytes
	byteSizeV2: "9999999",

	// The name of the file
	filename: "some string",

	// The attachment's content type (e.g., image/jpg, video/mp4)
	contentType: "some string",

	// The source of the attachment
	source: {
		// The URL to access the attachment
		url: "some string",
	},

	// The blurhash of the image
	blurhash: "some string",

	// The height of the video
	height: 10,

	// The width of the video
	width: 10,

	// The aspect ratio of the video
	aspectRatio: 10,

	// The preview of the video
	preview: {
		// The URL to access the attachment
		url: "some string",
	},

	// The duration of the audio in seconds
	duration: 10,

	// The URL of the waveform for the audio
	waveformUrl: "some string",
};

```


# Process Attachment
Source: https://docs.whop.com/sdk/api/attachments/process-attachment



### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.attachments.processAttachment({
	// The ID returned by the direct upload mutation
	directUploadId: "some string" /* Required! */,

	// The type of media to analyze
	mediaType:
		"audio" /* Valid values: audio | image | other | video */ /* Required! */,

	// The parts of the multipart upload
	multipartParts: [
		{
			// The ETag of the part
			etag: "some string" /* Required! */,

			// The part number of the part
			partNumber: 10 /* Required! */,
		},
	],

	// The ID returned by the direct upload mutation
	multipartUploadId: "some string",
});

```

### Example output

```typescript
const result = true;

```


# Installation
Source: https://docs.whop.com/sdk/installation

Getting started developing an App on Whop

We recommend you use our TS SDK to build your app. It's a wrapper around our GraphQL API. We have hand-crafted SDK functions that make it easy to use our API.

<CodeGroup>
  ```bash pnpm
  pnpm install @whop/api && pnpm install -D @whop-apps/dev-proxy
  ```

  ```bash npm
  npm install @whop/api && npm install -D @whop-apps/dev-proxy
  ```

  ```bash yarn
  yarn add @whop/api && yarn add -D @whop-apps/dev-proxy
  ```
</CodeGroup>

***


# Local development
Source: https://docs.whop.com/sdk/local-development

Run your local setup inside of a Whop iFrame with the Whop proxy

If you are building a Whop app inside of our website, you can use this proxy to run your local setup inside of a Whop iFrame.
You can use this proxy with any application written in any language and any framework.

## NextJS / Javascript app

1. Add the proxy as a dev dependency.

<CodeGroup>
  ```bash pnpm
  pnpm add -D @whop-apps/dev-proxy
  ```

  ```bash npm
  npm install -D @whop-apps/dev-proxy
  ```

  ```bash yarn
  yarn add -D @whop-apps/dev-proxy
  ```
</CodeGroup>

2. Update your `package.json` dev script to include the proxy.

```json
"scripts": {
	"dev": "whop-proxy --command 'next dev --turbopack'",
}
```

> You can update the dev command to match your framework requirements.
> You can also other commands wrapped by the proxy in a similar way.

3. Run the proxy.

<CodeGroup>
  ```bash pnpm
  pnpm dev
  ```

  ```bash npm
  npm run dev
  ```

  ```bash yarn
  yarn dev
  ```
</CodeGroup>

## Standalone mode (other frameworks)

1. Run you app on your local machine on some port, for example 5000.

2. Run the proxy in standalone mode.

<CodeGroup>
  ```bash pnpm
  pnpm dlx @whop-apps/dev-proxy --standalone --upstreamPort=5000 --proxyPort=3000
  ```

  ```bash npm
  npx @whop-apps/dev-proxy --standalone --upstreamPort=5000 --proxyPort=3000
  ```

  ```bash yarn
  yarn dlx @whop-apps/dev-proxy --standalone --upstreamPort=5000 --proxyPort=3000
  ```
</CodeGroup>

<Note>
  This will run the proxy as an independent process. It will start a server on
  port 3000 and forward requests to port 5000 and append the user token in the
  headers.
</Note>

## Proxy Command Options

The proxy can be configured using the following command line options:

```bash
Usage: pnpm dlx @whop-apps/dev-proxy [options]

Options:

--proxyPort <port>      The port the proxy should listen on (3000 by default)
--upstreamPort <port>   The port the upstream server is listening on (set automatically by default)
--npmCommand <command>  The npm command to run to start the upstream server (dev by default)
--command <command>     The command to run to start the upstream server (npm run dev by default)
--standalone            Run the proxy as an independent process proxying requests from one port to another port. Ignores the command / npmCommand options.
```


# Retrieve current user
Source: https://docs.whop.com/sdk/retrieve-current-user

Retrieve the public profile information for the currently logged in user

Verify and extract the user's ID from a JWT token passed in the `x-whop-user-token` header passed to iframe apps on your backend.

<Info>
  Ensure you have [setup your whop SDK client on the
  server](/sdk/whop-api-client)
</Info>

<CodeGroup>
  ```javascript Next.js
  // app/experiences/[experienceId]/page.tsx

  import { whopSdk } from "@/lib/whop-sdk";
  import { headers } from "next/headers";

  export default async function Page() {
      const headersList = await headers(); // Get the headers from the request.

      // Extract the user ID (read from a verified auth JWT token)
      const { userId } = await whopSdk.verifyUserToken(headersList);

      // Load the user's public profile information
      const user = await whopSdk.users.getUser({ userId: userId });

      console.log(user);

      return (
        <div>
        	<h1>User</h1>
        	<pre>{JSON.stringify(user, null, 2)}</pre>
        </div>
      );

  }

  ```
</CodeGroup>

### Not using the Whop TS SDK?

<Accordion title="How to authenticate users in other languages">
  In order to retrieve the current user's ID, you need to decrypt a JWT token that is stored in the `x-whop-user-token` header. `VerifyUserToken` is a helper function in our TS SDK that decodes the JWT token and returns the user's ID.

  If are using a different framework and do not have access to the Typescript Whop SDK, you will need to implement your own JWT decoding logic. Here is an example of how to do this in Ruby on Rails:

  ```ruby Ruby on Rails
  require 'jwt'
  require 'openssl'

  # This is a static public key that is used to decode the JWT token
  # You can put this into your application
  JWT_PEM = <<~PEM.freeze
    -----BEGIN PUBLIC KEY-----
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErz8a8vxvexHC0TLT91g7llOdDOsN
    uYiGEfic4Qhni+HMfRBuUphOh7F3k8QgwZc9UlL0AHmyYqtbhL9NuJes6w==
    -----END PUBLIC KEY-----
  PEM

  # In your request handler, extract the user token from the headers.
  user_token = request.headers["x-whop-user-token"]
  return if user_token.blank?

  # Decode and validate the JWT token.
  key = OpenSSL::PKey::EC.new(JWT_PEM)
  payload, _header = JWT.decode user_token, key, true, {
    iss: "urn:whopcom:exp-proxy",
    verify_iss: true,
    algorithm: "ES256"
  }

  # Extract your app ID from the JWT token.
  jwt_app_id = payload["aud"]

  # WARNING! You must set the WHOP_APP_ID environment variable in your application.
  # This looks like app_xxxx.
  # Validate that the JWT token is for YOUR app. (prevents someone from spoofing the user ID by passing a JWT token for a different app)
  return if jwt_app_id != ENV.fetch("WHOP_APP_ID")

  # Extract the user ID from the JWT token.
  jwt_user_id = payload["sub"]
  ```
</Accordion>


# Validate access
Source: https://docs.whop.com/sdk/validate-access

Use this API to ensure users have access to use your app

Validate access to an embedded web app:

<CodeGroup>
  ```javascript Next.js
  import { whopSdk } from "@/lib/whop-sdk";
  import { headers } from "next/headers";

  // The headers contains the user token
  const headersList = await headers();

  // The experienceId is a path param
  // This can be configured in the Whop Dashboard, when you define your app
  const { experienceId } = await params;

  // The user token is in the headers
  const { userId } = await whopSdk.verifyUserToken(headersList);

  const result = await whopSdk.access.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });

  if (!result.hasAccess) {
    return <div>You do not have access to this experience</div>;
  }

  // Either: 'admin' | 'customer' | 'no_access';
  // 'admin' means the user is an admin of the whop, such as an owner or moderator
  // 'customer' means the user is a common member in this whop
  // 'no_access' means the user does not have access to the whop
  const { accessLevel } = result;

  if (accessLevel === "admin") {
    return <div>You are an admin of this experience</div>;
  }

  if (accessLevel === "customer") {
    return <div>You are a customer of this experience</div>;
  }

  return <div>You do not have access to this experience</div>;
  ```
</CodeGroup>


# Set up the API client
Source: https://docs.whop.com/sdk/whop-api-client

We provide a TS client that makes it super easy to use our API. We highly recommend you use this client.

Our SDK makes it simple to use our API. It's a wrapper around our GraphQL API with pre-built functions for all of our endpoints. The endpoints are outlined in the SDK reference section of our docs.

### Install

<CodeGroup>
  ```bash pnpm
  pnpm add @whop/api
  ```

  ```bash npm
  npm install @whop/api
  ```

  ```bash yarn
  yarn add @whop/api
  ```
</CodeGroup>

### Setup your client

Create a new file that instantiates the client and exports it. We recommend putting this file at `lib/whop-sdk.ts`.

This file reads your ENV keys, which can be found on your app developer page on the Whop dashboard.

```ts
import { WhopServerSdk, makeUserTokenVerifier } from "@whop/api";

export const whopSdk = WhopServerSdk({
  // This is the appId of your app. You can find this in the "App Settings" section of your app's Whop dashboard.
  // This is required.
  appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,

  // Add your app api key here - this is required.
  // You can get this from the Whop dashboard after creating an app in the "API Keys" section.
  appApiKey: process.env.WHOP_API_KEY,

  // This will make api requests on behalf of this user.
  // This is optional, however most api requests need to be made on behalf of a user.
  // You can create an agent user for your app, and use their userId here.
  // You can also apply a different userId later with the `withUser` function.
  onBehalfOfUserId: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,

  // This is the companyId that will be used for the api requests.
  // When making api requests that query or mutate data about a company, you need to specify the companyId.
  // This is optional, however if not specified certain requests will fail.
  // This can also be applied later with the `withCompany` function.
  companyId: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,
});
```

### Example usage

The rest of the examples in this section will use this client and import it from `lib/whop-sdk.ts`.

Here is an example

```ts
import { whopSdk } from "./lib/whop-sdk";

const user = await whopSdk.users.getCurrentUser();
```


# Set up pricing
Source: https://docs.whop.com/set-up-products-pricing

Choose your pricing model and what members get in your whop

Products are how you package and price your offer on Whop. You can set up free access, one-time payments, or recurring subscriptions for people to access your whop.

## How to set up pricing for your whop

<Steps>
  <Step title="Add a product" titleSize="h3">
    To set up pricing, you need to create a product:

    * Go to your whop
    * Click **Products**
    * Click **Add product**
  </Step>

  <Step title="Set up your product details" titleSize="h3">
    Configure the core details of your product:

    * **Choose a title**: Keep it clear and descriptive (e.g., "Premium Membership", "Full Course Access")
    * Select your pricing option:
      * **Free**: Give customers free access to your whop
      * **One-time**: Charge customers once for lifetime access
      * **Recurring**: Set up monthly or yearly subscriptions
    * **Choose currency**: Select the currency you want to charge in
    * **Set your price**: Enter how much customers will pay
      * If you chose recurring, also choose your billing cycle length (weekly, monthly, yearly)
    * **Configure advanced options** (optional):
      * **Stock**: Limit how many people can purchase this product
      * **Show on store page**: Make this product visible on your public store page
      * **Add a waitlist**: Users enter payment details but aren't charged until you approve them
      * **Ask questions before checkout**: Collect information from customers before they purchase
      * **Auto-expire access**: Automatically remove access after a set time period
      * **Redirect after checkout**: Send customers to a specific page after they complete checkout
      * **Add internal name**: A name only you can see on your dashboard
    * **Choose payment methods**: Select what customers can pay with
      * Credit/debit card
      * Bank transfer (ACH)
      * PayPal
      * Cryptocurrency
      * Buy now, pay later (Financing)

    <Tip>
      If you want to offer multiple pricing options (like both monthly and yearly plans), click Add another billing period.
    </Tip>
  </Step>

  <Step title="Choose which apps customers get with this product" titleSize="h3">
    This is where you decide what customers actually get when they purchase your product. When users purchase or claim your product, they will get access to the apps you select.

    * **Toggle on** all the apps you want to include in this product
    * **Toggle off** any apps you don't want included in this product

    <Tip>
      You can create multiple products with different app combinations. For example, create a free product that gives access to basic apps, and a premium product that unlocks premium apps.
    </Tip>

    When you're happy with everything, click **Add Product**.
  </Step>
</Steps>

## Understanding products: Different ways to structure your whop

Your whop can contain multiple products, each acting like a different membership option. You might have a basic tier and premium tier, or just one all-access option.

**Common examples:**

* **One product:** "Full Access" (\$49/month) with all apps included
* **Two products:** "Free Community" (chat only) + "Premium" (\$29/month, all apps)
* **Three products:** Basic (\$19), Pro (\$49), VIP (\$99) with different app combinations

<Tip>
  Start simple with one product and add more later as your business grows.
</Tip>

## Next steps

To get your business up and running on Whop, make sure you've completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Add apps to your whop" icon="block-brick" href="/add-apps">
    Apps are building blocks for your business.
  </Card>

  <Card title="Set up your store page" icon="store" href="/set-up-store-page">
    Create a landing page for customer acquisition.
  </Card>
</CardGroup>


# Set up your store page
Source: https://docs.whop.com/set-up-store-page

Edit the details on your whop's store page: logo, name, headline, description, URL, and much more

Your store page is where visitors learn about your offer. It shows details about your product, pricing, answers common questions, and highlights testimonials.

## Complete the store page setup checklist

If you're building your whop for the first time, you'll see a checklist to guide you through setting up your store page.

<Tip>
  Don't overthink your initial setup: You can always come back to improve it later as you learn what works best for your audience.
</Tip>

<Steps>
  <Step title="Add title, headline and description" titleSize="h3">
    Your title, headline, and description help visitors understand what your product is and how it will help them.

    To add these:

    1. Click **Add title, headline, and description** in the checklist
    2. In the **Edit details** tab that appears, enter your store name in the **Name** field
       * Keep it simple and easy to remember
       * Choose a name that clearly communicates what you offer
    3. Write a catchy **Headline** that grabs attention
       * Try this simple formula: "\[What you help with] for \[who you help]"
         * Example: *"Healthy, delicious meals in 15 minutes for busy professionals"*
    4. Write a detailed **Description** that explains
       * What members will get
       * How your product will help a customer
       * Example: "Access weekly meal plans, grocery lists, and step-by-step cooking tutorials that fit your schedule"
    5. Click **Save** when you’re done
  </Step>

  <Step title="Add your logo" titleSize="h3">
    To add your logo:

    1. Click **Add logo** in the checklist
    2. Click **Upload logo** to select your logo file from your device
    3. Position and adjust your logo as you like
    4. Click **Save**
  </Step>

  <Step title="Add gallery images" titleSize="h3">
    This image or video sits at the top of your store page.

    To add your gallery image(s):

    1. Click **Add gallery images** in the checklist
    2. Click **Upload media** and select the media files you want to show in your gallery
       * You can select up to eight images/videos
       * We recommend uploading images with a 16:9 aspect ratio
    3. Arrange them how you want (the top-left one shows first)
    4. Click **Save**

    <Tip>
      Pro tip: A short video (or VSL) talking about the product improves conversions.
    </Tip>
  </Step>

  <Step title="Choose category" titleSize="h3">
    Picking the right category helps people find your store when browsing Whop.

    To choose a category:

    1. Click **Choose category** in the checklist
    2. Open the dropdown menu and select the category that best fits what you offer
    3. Click **Save**
  </Step>
</Steps>

## How to update your store page details

Update your store page by accessing the **Edit Details** page:

1. Go to the home page of your Whop
   * You can get here at any time by clicking on the whop on the **Your whops** tab of the dashboard
2. Click the three dots (···) menu in the top right corner of the left-hand tab (next to your whop name)
3. Select **Manage store**

From here, you can change:

* **Your logo**
* **Store name**: Your business or product name (limited to 30 characters)
* **Headline**: Your main selling point (limited to 60 characters)
* **Description**: How you help customers (limited to 180 characters)
* **Store page URL**: Your custom web address for this specific whop
* **Category**: Business category that helps customers find your offerings in search and browse
* **Call to Action (CTA)**: Customize the text that appears on your store page button (e.g., "Join", "Subscribe")
* **Post purchase redirect link**: If applicable, add a link to redirect customers to immediately after checkout
* **Upsell**: Customers can one-click add on a product directly after checkout
  * You can set up a description and video to display on a 1-click upsell landing page that customers are taken to immediately after checkout
* **Visibility**: Choose whether you want your offer (whop) to appear on our marketplace
* **Pop-up promotions**: Show limited-time deals in a pop-up window when visitors are about to leave your store page
* **Apply for Discover**: After completing your store page, you can apply to appear on Whop's Discover page (2M+ visitors every month)

## Additional store page settings

Update additional advanced settings on your store page:

1. Go to the home page of your whop
2. Click on the **Store page** button
3. Use the **Edit details** buttons to edit each section of your store page

From here, you can change:

* **Your personal details**: Add your bio and social links so visitors can learn more about you and your expertise
* **Target personas:** Describe who your whop is for and what a customer will gain by purchasing your offer
* **Pricing:** How much it costs to join your whop - you can offer multiple prices
* **Benefits**: Describe the value, features and benefits your members will get access to
* **FAQs**: Answer any common questions visitors may have before joining your whop

## Next steps

To get your business up and running on Whop, make sure you've completed the rest of the setup steps:

<CardGroup cols={2}>
  <Card title="Add apps to your Whop" icon="block-brick" href="/add-apps">
    Apps are building blocks for your business.
  </Card>

  <Card title="Set up products and pricing" icon="dollar-sign" href="/set-up-products-pricing">
    Charge subscriptions or one time payments.
  </Card>
</CardGroup>


# Agencies
Source: https://docs.whop.com/supported-business-models/agency-services

Learn how to launch and run your agency on Whop

You can manage lead generation, take sales calls, showcase case studies, run private client portals, handle payments, and coordinate your team - all in Whop.

## How it works

**For prospects:** Create a free whop with your case studies, resources, and a call booking link.

**For clients:** Send private checkout links, collect payments, and give access to private project spaces where you can chat, share deliverables, and manage timelines.

## Launch your agency on Whop in 9 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/) and get your community up and running:

    * Choose a memorable name for your agency
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f79508ae73777e85df2b900974f44ad5" alt="Createwhopagencies Png" width="1635" height="964" data-path="images/createwhopagencies.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e66ebb02dbcf32147d3087aa1baf197c 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=1da4896e8dfef423242d25a7afe5a476 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=5171687fedfea4e8a9c264c8bf1f405b 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=bcd090bd87ea9a4d829a875020193d6c 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=df2717a0c11dc27792b4186cc50f503f 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopagencies.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=7d6db6b2721879c526a4bf91c877326d 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Calendar Bookings app" titleSize="h3">
    Just like Calendly, this app allows you to set up your calendar so prospects can schedule discovery sales calls with you.

    1. Add the [**Calendar Bookings**](https://whop.com/apps/app_dC2dkRARmXE4qf/install/) app from the Whop App Store, then click **Configure Calendar Bookings** to set up your availability
    2. Click **Add availability** or **+** at the top right
    3. Add the:
       * **Title**
       * **Duration**
       * **Meeting link/Location**
       * You can optionally add a **Description** and a **Price per booking**
    4. Click **Continue**
    5. Select the **Days** and **Time** you’ll be available
    6. Click **Create**

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=013625919a2d7533a6a829b0b521eefc" alt="Add Calendar Bookings app" width="1222" height="720" data-path="how-to-videos/calendarbookingstoagency.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=49740ff2f0c5f1b4f6022b6da1443010 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=43ccf319207f6bc5606b0a92694db309 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9b4acdea5ba2e3fe2525ea01846284f0 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8635bdf6d4a3c2d604b8532b09548a49 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=70ebc2861988ad96b73e9e38832ffd3d 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/calendarbookingstoagency.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=27c10b46b193c6714d7e1664a1b66b9c 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Files app" titleSize="h3">
    Add high value materials and documents using the [**Files**](https://whop.com/apps/app_5UWRrs7haZZeiQ/install/) app to turn your whop into a lead magnet.

    * **Case studies:** Showcase client work, before/after results, and success stories
    * **Free resources:** Upload templates, audits, checklists, or anything you'd normally offer as a lead magnet

    Leads will join your whop to access the resources, you capture their details, then browse your whop and potentially book a call.

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2c815aa782c5f1bee26131f3db86a835" alt="Add Files app" width="1834" height="961" data-path="images/addfilestoagency.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2c6f39be2f5efb5dd1016cb3c543e8f2 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=66f8369a94dd2340b44cba20e23ba92d 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=767ba999b7bcad69017bf9d0d6c75ce8 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=d797fadc2ecac8c41d450448c9038fd1 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=afbb9f2b243562f40e8241dd57ff1d69 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addfilestoagency.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9b5f2cc408140200ac75e77b4815dd2f 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Content app" titleSize="h3">
    The [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app gives you unlimited flexibility to share text-based resources with your prospects.

    * Welcome guide explaining how prospects can get the most value from your whop
    * FAQ section answering common questions about your services
    * Your methodology or approach to solving client problems

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6553573e3f6293e6066fc39ec515da8e" alt="Add Content app" width="1832" height="963" data-path="images/addingcontenttoagencies.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f916bba596db5c671a5c5e4b2f48057d 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=aec8e63d1ed1be85a7b6af4c7545ccff 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f56fd24ca99f7dd664492a9ac091c90e 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7bfde5f308b4ff9d6341e2a75f073935 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=fa903e732dfb529d9cdfe6a9931d5da9 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttoagencies.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=10232c18b787ac96349e9dc23edccddc 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Chat app (optional)" titleSize="h3">
    Consider adding a community element to your whop where prospects can ask questions, engage with your content, and stay connected with your agency. Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app from the Whop App Store and rename it to "Ask questions" or "General chat". This creates a space where prospects can:

    * Ask questions about your area of expertise
    * Get quick answers and build trust with your agency
    * Connect with other prospects

    <Tip>
      Stay active in the chat to build relationships and demonstrate your expertise. Answer questions quickly and share valuable insights - this positions you as helpful and knowledgeable before prospects even book a call.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b94506ab15800ce79e59f483b139f98c" alt="Add Chat app" width="1832" height="963" data-path="images/addingchattoagencies.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a6f9b2e8aabce6fbcc96abfcc34a1faf 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=3958bf229456b49b4d1da4e18016be17 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ec17dcd0dd2766212ed7a61b15fc6a41 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=5faa48ceb8bbdabd0dd2142af7223384 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=97c01881bb64ecd72313d23f350216e5 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchattoagencies.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2934c93cb358013a721eecad92a4bdcb 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Set up a free pricing model" titleSize="h3">
    Now that you've added your apps, create a free product that gives prospects access to everything.

    * Go to your whop > click **Products** > click **Add product**

    Configure the settings in the product to make it free to access.

    [Learn more about setting up pricing and products here](/apps/docs/set-up-products-pricing).
  </Step>

  <Step title="Design your store page" titleSize="h3">
    Your store page is where prospects decide whether to join your agency's free whop. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline:** Make it immediately obvious what your agency offers and who it's for
    * **Write a compelling description:** Focus on the results you deliver for clients
    * **Upload a clean logo:** Even a simple logo builds credibility and makes your agency look legit
    * **Add gallery images or video:** Include case study screenshots, client testimonials, or a brief welcome video that builds trust and showcases your expertise
    * **Select "Agencies" as your category:** This helps people discover your services when browsing Whop

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f8f4cd88e956585780b2c13396a34e51" alt="Agency store page" width="1829" height="805" data-path="images/storepageagencies.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4c264347a50f65e40b8707d46778738b 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=54ba5f62f51e1a0e8746f1cf2823ed8e 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d36b0f3e26b4d8299360cc7296b7734f 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4b1c22fc85fc3990da4e9de584234c7c 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0355d49dc0fb3bedd88deeaf349959e0 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepageagencies.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=149a4b1ee1a71ef5701e6ddf2b40bbd9 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Convert leads into paying clients" titleSize="h3">
    When someone books a call through your **Calendar Bookings** app and decides to work with you, you can create a paid product (and checkout link) for them. When you close a client, you have two options:

    ### Option A: Use Whop for payment processing only

    Choose this option if you just want to handle the payment through Whop and manage everything else with your current tools.

    * Create a new product specifically for that client
    * [Set your pricing](/apps/docs/set-up-products-pricing) (one-time project fee or recurring retainer)
    * Don't toggle on any apps for this product
    * Send them the private checkout link to complete payment
    * Manage project delivery through your existing tools

    ### Option B: Create a complete client portal

    Give your client a dedicated space inside your whop where you can communicate and share project materials.

    * Create a new paid product for the client
    * [Set your pricing structure](/apps/docs/set-up-products-pricing)
    * Add apps in your whop that are only accessible to this client:
      * **Chat**: Private 1:1 communication channel
      * **Files**: Upload deliverables, contracts, and assets
      * **Events**: Schedule review sessions, deadlines, and milestones
      * **Content**: Share project briefs, strategy documents, or progress updates
      * **Calendar**: Allow clients to book additional calls or check-ins
    * Hide this product from your public store page
    * Send the private checkout link after your sales call
  </Step>

  <Step title="Manage your team" titleSize="h3">
    As your agency grows, you can add team members.

    * [Learn more about managing your team, roles and permissions here](/apps/docs/manage-your-whop/manage-team-roles)

    You can even pay your team through whop.

    * [Learn how to pay your team on Whop here](/apps/docs/manage-your-whop/pay-your-team)

    Add internal apps that are only accessible to your team members to keep your operations running smoothly.

    * **Files**: Store SOPs, templates, and internal documentation
    * **Chat**: Create team communication channels
    * **Events**: Schedule team meetings and deadlines
    * **Calendar**: Allow team members to book 1-on-1s with you
  </Step>
</Steps>

## Next steps

<Card title="Grow your agency on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more clients.
</Card>


# Brick and mortar
Source: https://docs.whop.com/supported-business-models/brick-and-mortar

Learn how to launch and run your brick-and-mortar business on Whop

We're still working on making Whop a better place for brick-and-mortar businesses. In the meantime, many shops use Whop to accept in-person payments and add social features for their patrons.

## Run in-store sales on Whop in 4 simple steps

<Steps>
  <Step title="Create a general product for your in-store purchase" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name the product
    your store and write a catchy headline as to why people come to your shop.
  </Step>

  <Step title="Take in-person payments with the Whop iOS app" titleSize="h3">
    Open the Whop iOS app, click the bottom right tab, and then create a
    checkout link when it's time for a customer to pay. After you create a
    checkout link from your phone, a QR code button will appear so customers can
    scan and pay. You can also save or print the QR for signage.
  </Step>

  <Step title="Give patrons exclusive perks" titleSize="h3">
    Add a patrons-only
    [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app for
    updates and announcements, and add a merch store using the [**Merch
    Store**](https://whop.com/apps/app_bLSc10GEFPDu4G/install/) app so paying
    customers can buy your merchandise.
  </Step>
</Steps>

<Tip>
  This is just one good way to use Whop as a brick-and-mortar business. There
  are many other setups depending on your goals.
</Tip>


# Coaches
Source: https://docs.whop.com/supported-business-models/coaches

Learn how to launch your coaching business on Whop.

## Get started fast

<Steps>
  <Step title="Sign up and create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/).
  </Step>

  <Step title="Create a product and fill your product page (add a custom CTA)" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Fill out your
    product page completely and set a custom CTA (e.g., "Apply for coaching" or
    "Join waitlist") to collect leads and show up on the marketplace. It's
    important to fill this out.
  </Step>

  <Step title="Send checkout links to customers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>

  <Step title="Offer financing (BNPL)" titleSize="h3">
    Apply for financing options so clients can buy now, pay later. Learn more:
    [**Financing setup**](/payments/financing).
  </Step>
</Steps>

## Next steps

<Card title="Grow your coaching business on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more coaching clients.
</Card>


# DTC Ecommerce
Source: https://docs.whop.com/supported-business-models/dtc-ecommerce

Learn how to launch and run your ecommerce store on Whop

We're still working on making Whop a better place to sell physical products. In the meantime, many creators use Whop to accept payments and bring social features to their stores.

## Sell a physical product on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your item" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your product
    and write a catchy headline so buyers know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a one-time price. If you offer refills or memberships, you can also
    use recurring pricing. You can always adjust later.
  </Step>

  <Step title="Set up fulfillment" titleSize="h3">
    Set up webhooks with [**Zapier**](https://zapier.com) to trigger your order
    fulfillment (e.g., create a shipment, notify your 3PL, or send confirmation
    emails). In the meantime, use custom fields on the pricing option to collect
    what you need to fulfill (e.g., shipping address, size, color).
  </Step>

  <Step title="Share your link with buyers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>

<Tip>
  Encourage community and support: add the
  [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app and grant
  access to everyone who bought this product so owners can get updates, ask
  questions, and share feedback.
</Tip>


# Educational programs
Source: https://docs.whop.com/supported-business-models/educational-programs

Learn how to sell educational programs on Whop

If you want to launch an online business selling a course, Whop puts everything in one place: host your course, create a community around it, and accept payments seamlessly.

## Launch your course business in 7 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [whop.com/sell](https://whop.com/dashboard/start/):

    * Choose your name
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=c02d3f05b0b4ddc70658c8979575e836" alt="Create course on Whop" width="1639" height="963" data-path="images/createwhopcourse.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0c5a04bbae51280c7818827104ad45f1 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=ee6c9091f58eedf6f43d7555d49ca2b2 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=df2c71760e1156ca8125fdefdf75d4c7 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=84245bb1864106dd9cbd64941225104a 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4ff4ea289d6da140e6b51890a5d36b74 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createwhopcourse.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=d8cd58f9c9a13e1478e94b80a5c4c607 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Courses app" titleSize="h3">
    The [**Courses**](https://whop.com/apps/app_0vPZThfBpAwLo/install/) app is where your students will access your educational videos and learning materials.

    1. Add the **Courses** app from the [Whop App Store](https://private-docs.mintlify.app/whop-apps/whop-app-store)
    2. Click **Begin setup**
    3. Click **Add module**
    4. Enter the title and description for this module - this helps students understand what they'll learn
    5. Start organizing your content into chapters and lessons within each module

    You'll find a more detailed breakdown of how to use the **Courses** app [below](#setting-up-your-courses-app).

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=19d40b1d6c996691c1944bad0ba1afdb" alt="Add Courses app" width="1222" height="720" data-path="how-to-videos/addingcoursestocoursewhop.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=365a6c92cde823b2eb3cd163f300bd32 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=38163576266c97139a6a3bde025c085b 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=3a0a22d83b5ae7e1dc147b3a810b2dc4 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=65e9eb516acc4cb18739e605e50e8bff 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=344bbefca341a5373545e13091a89b2d 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addingcoursestocoursewhop.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2e5e456758f78a7f6c14d236dea6dbe1 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Content app" titleSize="h3">
    Use the [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app to create a "Start here" guide that helps new students get oriented and know exactly what to do first. Create a welcome guide that covers:

    * How to navigate your whop and find everything
    * Where to begin with your course content
    * How to ask questions and get support
    * Any introductions or first steps they should take

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b4080042c086cf703202d513d038ed88" alt="Add Content app" width="1833" height="964" data-path="images/addingcontenttocourses.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=212c6c8717ded1ac59f2d683a3c9a00b 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ca5d9d057d0fa8cc5540c64d6a7b9c90 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=48f018a0c844588fc4053703d639970d 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=60c6e090a6585d81946d03e50c170318 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b7bc1a941d36f44e5c71e33777e9e91f 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingcontenttocourses.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9dbc4f13bc12ba9eacfa7c46ac14d994 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Forums app" titleSize="h3">
    The [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app is where you’ll share important updates, announcements, and valuable content that all members should see. Popular forum uses include:

    * **Announcements**: Share course updates, new lesson releases, and important information
    * **Weekly insights**: Post regular tips, industry updates, or motivational content
    * **Student wins**: Highlight student success stories and achievements to inspire others
    * **Q\&A discussions**: Answer student questions and encourage peer-to-peer learning

    <Tip>
      You can add the Forums app multiple times to keep different types of discussions organized.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=21da0ee318de5cbd408c1f8dce9d24be" alt="Add Forums app" width="1829" height="826" data-path="images/addingforumsapptocourse.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b8737a276f0b82e2facc693e3a6dda3e 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=7facc49f8e967f11200c7a5120664b1d 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ea05fe4bb2029d7a764abf3128a26518 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ac485d35dfd2c1d36493dda927515ce4 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=477765c83605003bfe461938ca07115f 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingforumsapptocourse.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dcc5764cc3d2e8fc9a489fb80b96b4cd 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Chat app" titleSize="h3">
    Give your students a place to connect and ask questions. Popular uses of the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app include:

    * **General chat**: Main conversation space for students to hang out and ask questions
    * **Introductions**: Help new students connect and share their learning goals
    * **Assignment submissions**: Create spaces for students to share their work and get feedback

    <Tip>
      Add multiple Chat apps to create separate spaces for different topics or student cohorts.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4abdfb3c05cd6865aeebff403b8cfc2a" alt="Addingchatapptocourse Png" width="1830" height="964" data-path="images/addingchatapptocourse.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c5a0703e184e0a937320688b853c648e 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=30a4775ea5272e25859b86e0e5eb8744 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a9061d7d1a31616ea00b8d84d22935fd 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8d118789535bacc37c0ea453b39b654c 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e7533062cb05a6ddc145e1ade285a37d 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/addingchatapptocourse.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=fa435bfb485071df6bbec3eed6f16951 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Design your store page" titleSize="h3">
    Your store page is where people can learn about your offer. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline**: Make it immediately obvious what students will learn and how it will benefit them. Examples: "Master Facebook Ads in 30 Days" or "Complete Python Programming Bootcamp"
    * **Write a compelling description**: Focus on the transformation students will experience and specific skills they'll gain. Highlight outcomes like "land your first coding job," "double your ad ROI," or "launch your consulting business"
    * **Upload a logo**: Add a clean, simple logo to your store page
    * **Add gallery images or video**: This is what viewers will see at the top of your store page. We recommend adding a quick video of yourself talking about you, your expertise and what students will learn in the course
    * **Select the appropriate category**: This helps people discover your course when browsing Whop

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=b38ac83cdfcba873bf230aa4c48e20f7" alt="Course store page" width="1832" height="751" data-path="images/storepagecourse.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e8046a8a6dd9e3485d748c7dc4401bbc 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e5fd4e772d94bba8cc5b2e8fa6a45038 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a2dcae5dac272f7e669940893a4245e3 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=7b7fd58069094fbfd4189ccf3712db03 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=82ab6552c109bd398826f5731473f025 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/storepagecourse.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=74dfe039b622769fb0555eaa043428d9 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Set up pricing" titleSize="h3">
    Set up your pricing to choose how much people have to pay to get access to your course.

    * Go to your whop > click **Products** > click **Add product**

    You can structure your pricing as free access, a one-time payment, or a recurring subscription:

    * **Free**: Make it free to access your course (then upsell a higher ticket offer or done-for-you services)
    * **One-time payment**: For example, \$297 for lifetime access to your complete course
    * **Subscription model**: For example, \$47/month for ongoing access (with new content added regularly)

    [Learn more about setting up pricing and products here](/apps/docs/set-up-products-pricing).

    <Tip>
      You can also create multiple pricing tiers (for example, a basic course, premium with bonuses, and VIP with 1-on-1 coaching). Start simple - you can always add more options as your business grows.
    </Tip>
  </Step>
</Steps>

## Setting up your Courses app

Now that you've set up the basic structure of your course business, let's dive deeper into how to use the **Courses** app.

### Understanding the course structure

Your course is built using a three-level hierarchy to help organize your content:

1. **Modules**: These are your main course topics. Think "Beginner basics," "Advanced techniques," "Bonus resources," or "Live call recordings."
2. **Chapters**: These break each module into smaller, bite-sized sections that are easier to follow. Each chapter should focus on a specific subtopic or learning objective that builds toward the module's overall goal.
3. **Lessons:** This is where you actually teach - each lesson is one video, PDF, quiz, or piece of content (more info on this below).

### Types of lessons you can create

The **Courses** app gives you flexibility in how you deliver your content:

<CardGroup cols={3}>
  <Card title="Multimedia" icon="sparkles">
    Combine text, video, and downloads in one comprehensive lesson.
  </Card>

  <Card title="Video" icon="camera-movie">
    Upload or embed videos that students can watch at their own pace.
  </Card>

  <Card title="Text" icon="Pencil">
    Written guides and step-by-step instructions with rich formatting.
  </Card>
</CardGroup>

<CardGroup cols={3}>
  <Card title="PDF" icon="clipboard-check">
    Share downloadable worksheets, templates, and reference materials.
  </Card>

  <Card title="Knowledge check" icon="check">
    Ungraded questions that help students self-assess their progress.
  </Card>

  <Card title="Quiz" icon="question">
    Graded tests to certify student mastery before they advance.
  </Card>
</CardGroup>

### Course settings

In the **Settings** panel for each module, you can customize how students experience your content:

* **Description**: Add context about what students will learn in this specific module.
* **Require lesson completion**: Toggle this on to create a structured learning path where students must complete lessons in order. This ensures they don't skip ahead and miss important foundational concepts.
* **Video protection**: Add watermarks to your videos to prevent unauthorized sharing and protect your intellectual property.
* **Completion certificates**: Generate professional certificates when students finish your course.
* **Language settings**: Set the language for closed captions on your videos.

## Next steps

<Card title="Grow your course business on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more students.
</Card>


# Events
Source: https://docs.whop.com/supported-business-models/events

Learn how to launch and run your events on Whop

We're still working on making Whop a better place to host events. In the meantime, many creators use Whop to accept payments and bring social features to their events.

## Run an event on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your event" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your event and
    write a catchy headline so guests know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a one-time price for a ticket or make it free with a waitlist. You
    can always adjust later.
  </Step>

  <Step title="Add a Chat for attendees" titleSize="h3">
    Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app so
    patrons can coordinate, share updates, and connect before and after the
    event.
  </Step>

  <Step title="Share your link with guests" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>


# Newsletters
Source: https://docs.whop.com/supported-business-models/newsletters

Learn how to launch and run your newsletter on Whop

We're still working on making Whop a better place to run newsletters. In the meantime, many creators use Whop to accept payments and bring social features to their newsletters.

## Run a newsletter on Whop in 4 simple steps

<Steps>
  <Step title="Create a product for your newsletter" titleSize="h3">
    Go to your whop > click **Products** > **Add product**. Name your newsletter
    and write a catchy headline so readers know what to expect.
  </Step>

  <Step title="Pick your price" titleSize="h3">
    Choose a monthly or yearly subscription price, or make it free with a
    waitlist. You can always adjust later.
  </Step>

  <Step title="Add Forums for your posts (emails included)" titleSize="h3">
    Add the [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app
    to publish issues and updates. All forum posts are emailed to your
    subscribers automatically.
  </Step>

  <Step title="Share your link with readers" titleSize="h3">
    Copy your product checkout link and share it anywhere—your website, socials,
    email, or DMs.
  </Step>
</Steps>

<Tip>
  Want more engagement? Add the
  [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app so
  subscribers can discuss topics, ask questions, and connect with each other.
</Tip>


# Paid groups
Source: https://docs.whop.com/supported-business-models/paid-groups

Learn how to offer a paid group on Whop.

Anyone can start a paid group. We recommend picking a niche using a tool like [this](https://originality.ai/blog/niche-idea-generator) or something that you are into, and then creating a paid group around it. Paid groups generally have a group chat, an announcements board, and cost people a monthly fee to join.

## Launch a paid group in 7 steps

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/):

    * Choose a memorable name for your community
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a5c129ae68aef8e8a2c954c5903d2981" alt="Create a community" width="1637" height="961" data-path="images/createawhopcommunity.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4f50157b38590562e529aad45f4e74ce 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f9a1fe09e08459d38ad7eabda57525f4 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0067f78df58d474af94a357617f9f4ff 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=c29bcb196493ebfc789b8ccc2f6d4359 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e1d5f66c2c61ecdbd46979c19e2eb556 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4792a6af6b8380714612492b0fdcedfb 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Forums app to share updates and announcements" titleSize="h3">
    The [**Forums**](https://whop.com/apps/app_dYfm2IdXhDMquv/install/) app is your primary channel for communicating with your entire community. This is where you'll share important updates, announcements, and valuable content that all members should see. Popular forum uses include:

    * **Announcements:** Share important community updates, new features, and policy changes
    * **Daily updates:** Post regular insights, tips, or industry news relevant to your community
    * **Success stories:** Highlight member wins and achievements to inspire and motivate others
    * **Weekly roundups:** Summarize key discussions, share upcoming events, or recap important content
    * **Special offers:** Announce exclusive deals, promotions, or limited-time opportunities for members
    * **New resources:** Alert members when you've added new courses, content, or tools
    * **Event recaps:** Share highlights and key takeaways from live sessions or workshops

    <Tip>
      You can add the Forums app multiple times (and rename them to whatever you want) to keep your communications organized and easy to follow.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=33a4e67364ad6830a5d7f2fefbb69045" alt="Add forums" width="800" height="467" data-path="how-to-videos/community-forums.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=f705ac7f6f72d5cb913e8a4ae0791e6e 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=991f55a4344e978ab0273ced3645361f 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bf4b1a9bc86bd0a59001f621fef34b1d 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=149b9ef41a2d230c8f1607fd307569e0 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=40952cf148ebeef42440aef12ec242be 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/community-forums.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2e3cb6abd1d63076823ba71e894d3f13 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Chat app" titleSize="h3">
    Give your members a place to talk, share tips, and hype each other up. Add the [**Chat**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app and customize it for your community's needs:

    * **General chat:** Main conversation space for casual discussions
    * **Introductions:** Help new members connect and introduce themselves
    * **Topic-specific chats:** Focus conversations around specific interests or goals

    <Tip>
      Add multiple Chat apps to create separate spaces for different topics or member groups.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=2d750fac3fa4dcb9616cca35a0ff3afb" alt="Add Chat app" width="1837" height="962" data-path="images/Chatappcommunity.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=82d16073edc89e8591fe47aed5bc7982 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6b8537fdbeca959996cdfdf2ddd77137 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=56ffdd1dc3dd57d9318665cba0cb4dd4 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=c14206617c705a335b0a42e25d6061ad 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4e391f082b3eae2dce568246eb9888af 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Chatappcommunity.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=4217652cc5756ff10bcd73ec9355d64f 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Provide learning resources and materials" titleSize="h3">
    The most successful communities provide resources and learning materials that help their members achieve their goals. Here's how:

    1. **Add the Courses app**

    Create structured learning experiences with the [**Course**](https://whop.com/apps/app_xml5hbizmZPgUT/install/) app. After adding the Course app, click **Configure Courses**, then **Create your course now** to begin building your educational content. Popular course topics include:

    * **Onboarding course**: Walk new members through your methodology and approach
    * **Skill-building series**: Teach core concepts and techniques in your area of expertise
    * **Call recordings**: Store all your live session recordings so members can access past content anytime

    2. **Add the Content app**

    The [**Content**](https://whop.com/apps/app_mmjPLOxIgL1qxe/install/) app gives you unlimited flexibility to share text-based resources with your community:

    * **Welcome guide:** Help new members understand how to get the most value from your community from day one
    * **Community guidelines:** Set expectations for behavior and participation
    * **Resource library:** Share templates, checklists, and reference materials
    * **FAQ section:** Answer common questions to support members and reduce repetitive inquiries

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e159dcae86d4c6cede0f4e5efd99e137" alt="Add resources" width="1833" height="958" data-path="images/resourcescommunity.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8b4081e492120eae3f906b3ce0a1f937 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=5a040217cf79bc6e7b67e2a00320e81d 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=73e6d60b55a03f207391e7c70029f6d2 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=370ac7fdfe99e8ea6bd79cd06312e99f 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=8b40f2249ef1b55e343730fd84386f26 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/resourcescommunity.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f2a5ab7bd5f7604335bd990a60cda7e5 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Add the Events app to schedule live sessions" titleSize="h3">
    The **Events** app makes it easy to schedule and manage all your live sessions. Whether you're meeting in person, on Zoom, Google Meet, or using Whop's built-in livestream, your members can:

    * See all upcoming events
    * Add them to their calendar
    * Get notified before the event starts

    Use the [**Events**](https://whop.com/apps/app_RnVNENx5vtP8Zp/install/) app to schedule:

    * **Weekly live sessions:** Regular training, Q\&A, or discussion sessions
    * **Monthly workshops:** Deep-dive training on specific topics
    * **Guest expert interviews:** Bring in outside experts to share knowledge
    * **Community meetups:** Social events to strengthen member relationships

    To schedule events, add the **Events** app from the Whop App Store, click **Configure Events**, then **Create event**.

    <Tip>
      Pro tip: Use Whop's built-in livestream feature to broadcast directly to your community. Members get notified when you go live, and streams are automatically saved for anyone who missed them.
    </Tip>

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bfa4b289802aca9b020fb46d256febea" alt="Add Events app" width="1830" height="963" data-path="images/Eventsappcommunity.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=8542a7592db270b52c94eff546cc7e97 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0882f133b651da0731f7ccfd0b6e894c 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dd856e7dcadf35f4066f3ee7d0d3cc65 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9acd6b58af1bcfa89aa5abd0c0b68ea3 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0d5627784f6b8ff3a34abe3e74c20411 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Eventsappcommunity.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=783d6594435dd5c6fb986b8937134c1d 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Design your store page" titleSize="h3">
    Your store page is where people can learn about your offer. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline:** Make it immediately obvious what your community offers and who it's for. Examples: "Marketing professionals sharing strategies and insights" or "Fitness enthusiasts building accountability and motivation"
    * **Write a compelling description:** Focus on the value members receive and how your community will help them achieve their goals. Highlight specific benefits like exclusive content, expert guidance, peer connections, and ongoing support
    * **Upload a logo:** Add a clean, simple logo to your store page
    * **Add gallery images or video:** Images of events, member success stories, or a brief welcome video help potential members get to know you and what to expect when they join
    * **Select the appropriate category:** This helps people discover your community when browsing Whop

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=be9704f06b3e88fc757d930b9f3e4ceb" alt="Community store page" width="1832" height="964" data-path="images/Storepagecommunity.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ae32b832a75530c586ad75804d26a02c 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=63a057ef79dec2b33e37c68390c93bc4 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dd6a6629955e9668563db00bb8632853 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=20bcc2054013a3506e00a19c6ede5837 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b6ca5be0c71eb4c4d521702317aafed9 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a11dca951f47a707e37a1cf2fc812067 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Set up pricing" titleSize="h3">
    Set up your pricing to choose how much your members pay to get access to your community.

    * Go to your whop > click **Products** > click **Add product**

    Many communities choose a recurring fee (i.e. a subscription model) - for example:

    * **\$30/month** for full access
    * **\$200/year** for a yearly pass

    To do this, select **Recurring** when creating your pricing and select weekly, monthly or yearly. You can also add multiple pricing options (for example, a weekly plan, a monthly plan, and a lifetime membership).

    [Learn more about setting up pricing and products here](/apps/docs/set-up-products-pricing).

    <Tip>
      Pro tip: Most of the largest communities on Whop use a free + premium model. This means setting up two 'Products' in your whop - one that's free to join, and another with paid access to premium apps (like chats, courses and resources).
    </Tip>
  </Step>
</Steps>

## Next steps

<Card title="Grow your community on Whop" icon="chart-line" href="/manage-your-whop">
  Learn how to use Whop's tools and features to get more members in your
  community.
</Card>


# SaaS
Source: https://docs.whop.com/supported-business-models/saas

Learn how to build and run your SaaS on Whop

<CardGroup cols={2}>
  <Card title="Integrate with license keys" href="#license-key-integration" icon="key" color="#16a34a">
    Use license keys to gate access to your software.
  </Card>

  <Card title="Integrate with email login" href="#email-login-integration" icon="envelope" color="#16a34a">
    Let users sign in via email and validate access with the SDK.
  </Card>
</CardGroup>

## Email login integration

If you have an existing SaaS or are building a new one, you can use Whop to direct your customers to pay and let them manage their membership.

To integrate, all you have to do is adjust your `User` table to include the `whop_user_id` and `whop_username` columns.

| Column          | Type   | Description                                                |
| --------------- | ------ | ---------------------------------------------------------- |
| `whop_user_id`  | string | Unique identifier for the user provided by Whop.           |
| `whop_username` | string | The user's Whop username, helpful for display and logging. |

**Note**
Use the Whop SDK’s `access.checkIfUserHasAccessToAccessPass` method (shown in Step 6) by passing the `whop_user_id` and the relevant access pass (product) ID to determine whether the user should be allowed to access your software.

If you would prefer to not have manage your own user table or even a database, consider building a Whop app here.

## Get your SaaS live on Whop:

<Steps>
  <Step title="Create your whop" titleSize="h3">
    Head over to [**whop.com/sell**](https://whop.com/dashboard/start/):

    * Choose a name for your SaaS
    * Select your custom URL
    * Complete the basic setup

    Your whop is now live and ready to customize.

        <img src="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=a5c129ae68aef8e8a2c954c5903d2981" alt="Launch your SaaS" width="1637" height="961" data-path="images/createawhopcommunity.png" srcset="https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=280&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4f50157b38590562e529aad45f4e74ce 280w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=560&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=f9a1fe09e08459d38ad7eabda57525f4 560w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=840&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=0067f78df58d474af94a357617f9f4ff 840w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=1100&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=c29bcb196493ebfc789b8ccc2f6d4359 1100w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=1650&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=e1d5f66c2c61ecdbd46979c19e2eb556 1650w, https://mintcdn.com/whop/vkZJmcXML9qFeth4/images/createawhopcommunity.png?w=2500&fit=max&auto=format&n=vkZJmcXML9qFeth4&q=85&s=4792a6af6b8380714612492b0fdcedfb 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Create a product" titleSize="h3">
    * Go to your Dashboard
    * Go to Products
    * Click Add Product
  </Step>

  <Step title="Add checkout link to your website" titleSize="h3">
    There are two primary ways to send customers to checkout: an embedded checkout or a hosted checkout link.

    ### Embedded checkout

    Follow these two steps to embed the checkout on your page. First, include the Whop Checkout loader script:

    ```html
    <!-- Step 1 – Include the Whop Checkout loader -->
    <script
      async
      defer
      src="https://js.whop.com/static/checkout/loader.js"
    ></script>
    ```

    Then, add the checkout element where you want it to appear. Replace `plan_XXXXXXXXX` with your actual plan ID from the dashboard.

    ```html
    <!-- Step 2 – Add the checkout element -->
    <div data-whop-checkout-plan-id="plan_XXXXXXXXX"></div>
    ```

    ### Hosted checkout link

    Alternatively, you can link customers to Whop’s hosted checkout page. You can get this link from your dashboard or generate one programmatically and link to the `checkoutUrl` it returns (as shown in Step 6).

    ```html
    <!-- Hosted checkout link -->
    <a href="https://whop.com/checkout/plan_xxxxxxxxx" target="_blank" rel="noopener">
      Buy now
    </a>
    ```

    If you would like to programmatically create a checkout session, you can do so with the following code:

    <CodeGroup>
      ```typescript pages/api/create-checkout-session.ts
      import { whopSdk } from "~/lib/whop-sdk";

      export async function createCheckoutSession(experienceId: string) {
        const checkoutSession = await whopSdk.payments.createCheckoutSession({
          planId: process.env.NEXT_PUBLIC_PREMIUM_PLAN_ID!,
          metadata: {
            customKey: "customValue",
          },
        });

        return checkoutSession;
      }
      ```

      When you receive the webhook (see below), you can use the `metadata` object to access the custom key and value you attached to the checkout session.
    </CodeGroup>
  </Step>

  <Step title="Add an app and get API keys" titleSize="h3">
    Go to your dashboard and add app
  </Step>

  <Step title="Subscribe to webhooks" titleSize="h3">
    Go to the dashboard section and add a webhook.
  </Step>

  <Step title="Check for access programmatically" titleSize="h3">
    <CodeGroup>
      ```typescript lib/whop-sdk.ts
      import { WhopServerSdk } from "@whop/api";

      // Instantiate the Whop SDK client.
      // 👉 Replace the ENV vars below with the ones from your Whop dashboard.
      export const whopSdk = WhopServerSdk({
        // Required: your App ID ("App Settings" → App ID)
        appId: process.env.NEXT_PUBLIC_WHOP_APP_ID!,

        // Required: the API key you generated in "API Keys"
        appApiKey: process.env.WHOP_API_KEY!,
      });
      ```

      ```typescript pages/api/validate-access.ts
      import { whopSdk } from "~/lib/whop-sdk";

      // Validate that a signed-in user has access to your premium product before
      // letting them use your SaaS feature.
      export async function validateAccess(whopUserId: string) {
        const result = await whopSdk.access.checkIfUserHasAccessToAccessPass({
          // Access Pass / Product ID you want to gate behind
          accessPassId: process.env.NEXT_PUBLIC_PREMIUM_ACCESS_PASS_ID!,
          // The Whop user we stored in our database
          userId: whopUserId,
        });

        return result.hasAccess; // boolean
      }
      ```
    </CodeGroup>
  </Step>

  <Step title="Give users a way to manage their membership" titleSize="h3">
    You can link users here to manage their membership: [https://whop.com/@me/settings/memberships/](https://whop.com/@me/settings/memberships/).

    They can simply login with the same email and they use to access your SaaS without a password.
  </Step>

  <Step title="Design your store page and list on marketplace" titleSize="h3">
    Your store page is where people can learn about your offer. Click your whop name in the top left, then select **Design store page** to open the editor. Click **Edit details** to customize:

    * **Choose a clear name and headline:** Make it immediately obvious what your community offers and who it's for. Examples: "Marketing professionals sharing strategies and insights" or "Fitness enthusiasts building accountability and motivation"
    * **Write a compelling description:** Focus on the value members receive and how your community will help them achieve their goals. Highlight specific benefits like exclusive content, expert guidance, peer connections, and ongoing support
    * **Upload a logo:** Add a clean, simple logo to your store page
    * **Add gallery images or video:** Images of events, member success stories, or a brief welcome video help potential members get to know you and what to expect when they join
    * **Select the appropriate category:** This helps people discover your community when browsing Whop

        <img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=be9704f06b3e88fc757d930b9f3e4ceb" alt="Community store page" width="1832" height="964" data-path="images/Storepagecommunity.png" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=ae32b832a75530c586ad75804d26a02c 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=63a057ef79dec2b33e37c68390c93bc4 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=dd6a6629955e9668563db00bb8632853 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=20bcc2054013a3506e00a19c6ede5837 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=b6ca5be0c71eb4c4d521702317aafed9 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/images/Storepagecommunity.png?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=a11dca951f47a707e37a1cf2fc812067 2500w" data-optimize="true" data-opv="2" />
  </Step>
</Steps>

## License Key Integration

After purchasing a product, users are granted a unique license key that they can use to access and unlock their purchased product. As a developer, you can integrate this feature into your own software by requiring your users to enter their license key before being granted access to the product, or gate certain features of the application behind validating the current license key.

## Getting started

1. Add the software app to your whop [here](https://whop.com/apps/app_jHH5YT7jHYQANi/install/).
2. Click configure in new software app you added
3. Add software name and download link

### Validating license keys via API

If the metadata on the license key is empty (for example, the key is not yet bound to a computer), Whop's API returns a success response with status code `201`. This means that the license key is valid and can be used to access the product. Internally, the API sets the metadata of the license key that was passed in the API call.

<CodeGroup title="Initially Setting the Metadata" tag="POST" label="memberships/:id/validate_license">
  ```js typescript
  import axios from "axios";

  const setMetadata = async () => {
    try {
      const response = await axios.post(
        `https://api.whop.com/api/v2/memberships/${licenseKey}/validate_license`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
          body: {
            metadata: {
              key: "value", // This is initially setting the key/value pair if it doesn't already exist
            },
          },
        }
      );
      return response.data;
    } catch (error) {
      throw error;
    }
  };

  export default setMetadata;
  ```
</CodeGroup>

### Validating Matching Metadata

If the metadata on the license key is already set, and it matches the metadata that your software sends to Whop's API, then a success response is returned. This means that the license key is valid and can be used to access the product. Whop's API checks every key value pair in the metadata, ensuring that all fields contain the same data.

Below is example metadata that would return a successful response if you wanted to store the users hardware ID (to only allow one session per user):

**Client-side**

```json
{
  "hwid": "098H52ST479QE053V2"
}
```

**Server-side**

```json
{
  "hwid": "098H52ST479QE053V2"
}
```

### Validating Mismatched Metadata

If the metadata on the license key is set, but the metadata fields do not match the metadata that your software sends to Whop's API, a failure response with status code `400` is returned. This means that the license key is not valid and cannot be used to access the product.

Below is example metadata that would return this error.

**Client-side**

```json
{
  "hwid": "30294GLDKJ54F0SLKF"
}
```

**Server-side**

```json
{
  "hwid": "098H52ST479QE053V2"
}
```

### Removing Metadata

Users can reset their key's metadata by going to their orders - but to programmatically reset their license, you'll need to send a POST request to our [memberships endpoint](/api-reference/v2/memberships/update-a-membership) with an empty metadata body to reset it.

## Next steps

<Card title="Add apps to your whop" icon="chart-line" href="/manage-your-whop">
  Add apps to let your users learn how to use your software, chat with
  eachother, and even order merch.
</Card>


# Apps for businesses
Source: https://docs.whop.com/whop-apps/apps-for-businesses

Analytics tools, SaaS tools, and utilities that grow revenue or streamline operations.

Whether you’re teaching a skill, running a niche community, or selling premium insights, Whop apps can supercharge your offering and unlock brand-new revenue streams.

## Creator-curated data feeds

Position yourself as the go-to source for information your audience can’t live without.

### Financial markets

* **Crypto wallet tracker** – Monitor any wallet and get instant alerts. [Install](https://whop.com/apps/app_ckYOPoqaAoNXFJ/install/)
* **Trading indicators** – Sell custom technical analysis tools. [Install](https://whop.com/apps/app_N3S3muNGIbm3tQ/install/)
* **Stock watchlists** – Curated market data and analysis.

### Specialized tracking

* **Politician trade tracker** – Follow elected officials’ financial activity.
* **Sports analytics** – Real-time scores, injury reports, and insights.
* **Social media feeds** – Curated Twitter timelines and social analytics.

> **Why it works:** Information curation creates dependency—your insights become essential to your audience’s workflow, driving recurring revenue.

## Out-of-the-box software

Offer powerful tools without hiring a dev team—you simply add the app and start charging access.

### Creative tools

* **AI image generator** – Midjourney-style image creation. [Install](https://whop.com/apps/app_KHqcozSfEGNyhl/install/)
* **Video clipper** – Professional content editing.
* **Thumbnail generator** – Automated design assistance.

### Business tools

* **Marketplace** – Enable peer-to-peer sales within your audience. [Install](https://whop.com/apps/app_2gnVVruShMfrzM/install/)
* **Resale price database** – Track collectible and product values. [Install](https://whop.com/apps/app_uhQRv20OAsxuBp/install/)
* **Prompt library** – Create and sell AI prompts. [Install](https://whop.com/apps/app_8RaFBXPJA0wk9H/install/)

### Utility apps

* **VPN access** – Sell privacy tools to your audience.
* **WhispGPT** – An AI chatbot trained on your own content. [Install](https://whop.com/apps/app_0gsATdFB1czIcI/install/)
* **Content rewards** – Pay members for social promotion based on performance. [Install](https://whop.com/apps/app_JsryI0fVLVpeYi/install/)

## Next steps

1. Open your whop dashboard → Apps → *Add app*.
2. Browse the business app category.
3. Activate the apps that align with your monetization strategy.

Mix and match apps to craft a differentiated product suite—every app you add can become a new revenue stream.


# Apps for communities
Source: https://docs.whop.com/whop-apps/apps-for-communities

Engage your audience with chat, courses, events, and social experiences

Building a thriving community requires more than great content—it takes engaging spaces where people can learn, share, and connect. Whop apps make it effortless by giving you plug-and-play experiences that feel tailor-made for your members.

## Foundational community apps

These core apps form the backbone of most online communities. Add one or all to craft the right mix for your audience.

### Community & education

* **Chat** – Real-time group discussions. [Install](https://whop.com/apps/app_xml5hbizmZPgUT/install/)
* **Course** – Multi-lesson learning with videos, quizzes, and progress tracking. [Install](https://whop.com/apps/app_0vPZThfBpAwLo/install/)
* **Forums** – Threaded conversations for deeper topics.
* **Events** – Host live or in-person events and optionally charge per ticket.

### Content & resources

* **Document** – Notion-style pages with rich media. [Install](https://whop.com/apps/app_RnVNENx5vtP8Zp/install/)
* **Files** – Share templates, e-books, and digital assets. [Install](https://whop.com/apps/app_5UWRrs7haZZeiQ/install/)
* **Calendar Bookings** – Allow members to book 1-on-1 time with you (paid or free). [Install](https://whop.com/apps/app_dC2dkRARmXE4qf/install/)

<img src="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=9cc4a7f41378d497b5ce996df7a22f89" alt="Add app" width="1232" height="718" data-path="how-to-videos/addwhopapp720p30fps.gif" srcset="https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=280&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=50ff641aecae9ecf502a9a3b73eebddf 280w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=560&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=0efb1a4933eacc9acb65a4fd824c3136 560w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=840&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=bb870572a49c262646d2e7c8c918b4b8 840w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=1100&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=e37a8aa7cd22cd0d5e329c570b649e8f 1100w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=1650&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=593c1427dc8b0d8cc4a806cbedc4af63 1650w, https://mintcdn.com/whop/O2UveoaTiTL7ZPwK/how-to-videos/addwhopapp720p30fps.gif?w=2500&fit=max&auto=format&n=O2UveoaTiTL7ZPwK&q=85&s=6bbf0cebdda2c5d4feb7c6004db92946 2500w" data-optimize="true" data-opv="2" />

## Social apps & games

Elevate engagement with interactive experiences that keep members coming back.

* **HQ Trivia-style games** – Run live game shows for your community.
* **Video networking** – Omegle-style random video chats between members.
* **Anonymous forums** – YikYak-style posts for candid conversation.
* **Community giveaways** – Platform-wide contests and rewards.

> **Tip:** Higher engagement means higher retention, which translates into more stable recurring revenue for your community.

## Next steps

1. Open your whop dashboard → Apps → *Add app*.
2. Browse the community app category.
3. Activate the apps that best fit your culture and goals.

Experiment with different combinations—every community is unique, and you can always add or remove apps based on member feedback.


# What are Whop apps?
Source: https://docs.whop.com/whop-apps/what-are-whop-apps

Apps are the building blocks for your business.

<iframe className="w-full aspect-video rounded-xl" width="100%" height="400" src="https://www.youtube.com/embed/kk-_0IKiFpo?si=j9etqP4QyO0dxtbd&modestbranding=1&rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin " allowfullscreen />

Imagine being able to sell any software as your own product, complete with built-in payments, user management, and mobile access. That's exactly what Whop apps enable.

Use apps to give your customers new experiences or to level up internal operations for your business.

## What types of apps are there?

Whop apps fall into two broad themes:

* **Community-focused apps** – Chat, courses, live events, forums, and other social experiences that keep members engaged. See the full list in [Apps for communities](/apps/docs/whop-apps/apps-for-communities).
* **Business-focused apps** – Market data feeds, SaaS tools, and utilities that open new revenue streams or streamline operations. Explore examples in [Apps for businesses](/apps/docs/whop-apps/apps-for-businesses).

## Build your own app

If you can’t find the exact experience you need or want to build an app for tens of thousands of businesses on Whop, you can build an app.

<CardGroup cols={1}>
  <Card title="Start building your Whop app" icon="block-brick" href="/apps/introduction">
    Complete guide to authentication, payments, and UI components.
  </Card>
</CardGroup>


# Upload Media
Source: https://docs.whop.com/sdk/api/attachments/upload-media



### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.attachments.uploadMedia({
	// The size of the file in bytes
	byteSize: 10,

	// The size of the file in bytes
	byteSizeV2: "9999999",

	// The checksum of the file
	checksum: "some string" /* Required! */,

	// The content type of the file
	contentType: "some string",

	// The filename of the file
	filename: "some string" /* Required! */,

	// The metadata of the file
	metadata: { any: "json" },

	// Whether or not to use multipart upload. The file must be larger than 5MB
	multipart: true,

	// The type of record to attach the file to
	record:
		"abuse_report" /* Valid values: abuse_report | access_pass | access_pass_collection | app | assessment_question | automated_messages_config | bot | bounty | bounty_submission | competition_prize | content_reward_campaign | content_reward_submission | course_lesson | dispute | dms_post | experience | forum_post | information_request_item | resolution_event_upload | review | review_report | user */ /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The signed ID of the blob
	id: "xxxxxxxxxxx",

	// The headers for the upload
	headers: { any: "json" },

	// The URL to upload the blob
	uploadUrl: "some string",

	// The multipart upload ID
	multipartUploadId: "some string",

	// The URLs for the parts of the multipart upload
	multipartUploadUrls: [
		{
			// The part number of the part
			partNumber: 10,

			// The url to upload the part
			url: "some string",
		},
	],
};

```


# Get Company
Source: https://docs.whop.com/sdk/api/companies/get-company

Fetches a company based on the ID

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.getCompany({
	// The ID of the company to fetch.
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID (tag) of the company.
	id: "xxxxxxxxxxx",

	// The title of the company.
	title: "some string",

	// The slug/route of the company on the Whop site.
	route: "some string",

	// The company's logo.
	logo: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The company's banner image.
	bannerImage: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The specific industry the company operates in.
	industryType:
		"accessories" /* Valid values: accessories | agencies | ai | ai_agency | amazon_fba | auto_repair_shop | beauty_and_personal_care | bootcamps | business | careers | clipping | clipping_agency | clothing | coaching_agency | coffee_shop | concerts | convention | customer_support_agency | dating | design_agency | development_agency | ecommerce | electronics_and_gadgets | fitness | fitness_gear | food_and_beverages | gym | health_and_wellness | home_goods | home_services | hotel_lodging | kindle_book_publishing | marketing_agency | masterminds | medical_dentist_office | meetups | other | parties | personal_development | personal_finance | public_speaking | real_estate | recruiting_agency | reselling | restaurant | retail_store | sales | sales_agency | salon_spa | social_media | software | spirituality | sports_betting | supplements | trading | travel | vas | video_games | webinars */,

	// The type of business the company is.
	businessType:
		"agency" /* Valid values: agency | brick_and_mortar | coaching | coaching_and_courses | community | course | education_program | events | newsletter | other | paid_group | physical_products | saas | software */,
};

```


# Get Company Ledger Account
Source: https://docs.whop.com/sdk/api/companies/get-company-ledger-account

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `company:balance:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.getCompanyLedgerAccount({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ledger account for the company
	ledgerAccount: {
		// The ID of the LedgerAccount.
		id: "xxxxxxxxxxx",

		// The fee for transfers, if applicable.
		transferFee: 10,

		// The balances associated with the account.
		balanceCaches: {
			// A list of nodes.
			nodes: [
				{
					// The amount of the balance.
					balance: 10,

					// The amount of the balance that is pending.
					pendingBalance: 10,

					// The currency of the balance.
					currency:
						"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,
				},
			],
		},
	},
};

```


# Get Member
Source: https://docs.whop.com/sdk/api/companies/get-member

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `member:basic:read`
* *`member:email:read` (optional)*
* *`member:phone:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.getMember({
	companyMemberId: "xxxxxxxxxxx" /* Required! */,

	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The company member for a given user
	member: {
		// The ID of the member
		id: "xxxxxxxxxxx",

		// When the member was created
		createdAt: 1716931200,

		// The timestamp (in milliseconds since epoch) of when the access pass member was last updated
		updatedAtMs: "9999999",

		// When the member joined the company
		joinedAt: 1716931200,

		// The status of the member
		status: "drafted" /* Valid values: drafted | joined | left */,

		// The phone number for the member, if available.
		phone: "some string",

		// The access level of the access pass member. If its admin, the member is an
		// authorized user of the access pass. If its customer, the member has a valid
		// membership to the access pass. If its no_access, the member does not have
		// access to the access pass.
		accessLevel: "admin" /* Valid values: admin | customer | no_access */,

		// How much they have spent on the company's passes.
		totalSpent: 10,

		// How much they have spent on the company's passes.
		usdTotalSpent: "some string",

		// An estimated MRR for the member.
		mrr: "some string",

		// The user for this member, if any.
		user: {
			// The internal ID of the user account.
			id: "xxxxxxxxxxx",

			// The digital mailing address of the user.
			email: "some string",

			// The user's full name.
			name: "some string",

			// The whop username.
			username: "some string",
		},

		// The image for the member, derived from either the User or the Company Buyer.
		imageSrcset: {
			// Image url with requested image resolution.
			original: "some string",
		},
	},
};

```


# List Access Passes
Source: https://docs.whop.com/sdk/api/companies/list-access-passes

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `access_pass:basic:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listAccessPasses({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	visibility:
		"all" /* Valid values: all | archived | hidden | not_archived | not_quick_link | quick_link | visible */,

	order:
		"active_memberships_count" /* Valid values: active_memberships_count | created_at | usd_gmv | usd_gmv_30_days */,

	last: 10,

	first: 10,

	direction: "asc" /* Valid values: asc | desc */,

	conditions: ["has_plans" /* Valid values: has_plans */],

	before: "pageInfo.startCursor",

	after: "pageInfo.endCursor",

	accessPassTypes: [
		"api_only" /* Valid values: api_only | app | experience_upsell | regular */,
	],
});

```

### Example output

```typescript
const result = {
	// All of the access passes connected to the company.
	accessPasses: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, the cursor to continue.
			endCursor: "some string",

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating backwards, the cursor to continue.
			startCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The internal ID of the public access pass.
				id: "xxxxxxxxxxx",

				// When the public access pass was created.
				createdAt: 1716931200,

				// The route of the access pass.
				route: "some string",

				// The title of the access pass. Use for Whop 4.0.
				title: "some string",

				// The headline of the access pass.
				headline: "some string",

				// A short description of what the company offers or does.
				shortenedDescription: "some string",

				// Whether this product is Whop verified.
				verified: true,

				// This access pass will/will not be displayed publicly.
				visibility:
					"archived" /* Valid values: archived | hidden | quick_link | visible */,

				// The number of active users for this access pass.
				activeUsersCount: 10,

				// The average of all reviews for this access pass.
				reviewsAverage: 10,

				// The creator pitch for the access pass.
				creatorPitch: "some string",

				// The timestamp (in milliseconds since epoch) of when the access pass was updated
				updatedAtMs: "9999999",

				// Whether to show the offers on the access pass.
				showOffers: true,

				// The URL to redirect the customer to after a purchase, if applicable.
				redirectPurchaseUrl: "some string",

				// The custom call to action for the access pass.
				customCta:
					"apply_now" /* Valid values: apply_now | call_now | complete_order | contact_us | donate_now | get_access | get_offer | join | order_now | purchase | shop_now | sign_up | subscribe */,

				// The custom call to action URL for the access pass, if any.
				customCtaUrl: "some string",

				// The percentage of a transaction a user is eligible to earn from the whop marketplace global affiliate program.
				globalAffiliatePercentage: 10,

				// The status of the global affiliate program for this access pass.
				globalAffiliateStatus:
					"disabled" /* Valid values: disabled | enabled */,

				// The percentage of a transaction a user is eligible to earn from the whop marketplace member affiliate program.
				memberAffiliatePercentage: 10,

				// The status of the member affiliate program for this access pass.
				memberAffiliateStatus:
					"disabled" /* Valid values: disabled | enabled */,

				// Whether to show the member count.
				showMemberCount: true,

				// The logo for the access pass.
				logo: {
					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},

				// The banner image for the access pass.
				bannerImage: {
					// The source of the attachment
					source: {
						// The URL to access the attachment
						url: "some string",
					},
				},
			},
		],
	},
};

```


# List Authorized Users
Source: https://docs.whop.com/sdk/api/companies/list-authorized-users

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `company:authorized_user:read`
* *`company:authorized_user:email:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listAuthorizedUsers({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// All of a company's added team members..
	// Roles: admin, owner
	authorizedUsers: [
		{
			// A unique ID representing the authorized user object.
			id: "xxxxxxxxxxx",

			// The name of the authorized user.
			name: "some string",

			// The Whop username of the authorized user.
			username: "some string",

			// The user ID of the authorized user.
			userId: "xxxxxxxxxxx",

			// The email of the authorized user.
			email: "some string",

			// The role of the authorized user in the company.
			role: "admin" /* Valid values: admin | app_manager | manager | moderator | owner | sales_manager | support */,
		},
	],
};

```


# List Members
Source: https://docs.whop.com/sdk/api/companies/list-members

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `member:basic:read`
* *`member:email:read` (optional)*
* *`member:phone:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listMembers({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	direction: "asc" /* Valid values: asc | desc */,

	first: 10,

	last: 10,

	order:
		"created_at" /* Valid values: created_at | id | joined_at | most_recent_action | usd_total_spent */,

	filters: {
		// The access pass IDs to filter the members by
		accessPassIds: ["xxxxxxxxxxx"],

		// The end date to filter the members by
		endDate: 1716931200,

		// The membership status to filter the members by
		membershipStatus:
			"active" /* Valid values: active | canceled | completed | drafted | expired | past_due | trialing | unresolved */,

		// The most recent actions to filter the members by
		mostRecentActions: [
			"canceling" /* Valid values: canceling | churned | drafted | expiring | finished_split_pay | joined | left | paid_once | paid_subscriber | past_due | paused | pending_entry | renewing | trialing */,
		],

		// The plan IDs to filter the members by
		planIds: ["xxxxxxxxxxx"],

		// The promo code IDs to filter the members by
		promoCodeIds: ["xxxxxxxxxxx"],

		// The name, username, or email to filter the members by. The email filter will
		// only apply if the current actor has the `member:email:read` permission.
		query: "some string",

		// The start date to filter the members by
		startDate: 1716931200,

		// The statuses to filter the members by
		statuses: ["drafted" /* Valid values: drafted | joined | left */],

		// The tracking link IDs to filter the members by
		trackingLinkIds: ["xxxxxxxxxxx"],
	},
});

```

### Example output

```typescript
const result = {
	// The members for the company
	members: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating backwards, the cursor to continue.
			startCursor: "some string",

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The ID of the member
				id: "xxxxxxxxxxx",

				// When the member was created
				createdAt: 1716931200,

				// The timestamp (in milliseconds since epoch) of when the access pass member was last updated
				updatedAtMs: "9999999",

				// When the member joined the company
				joinedAt: 1716931200,

				// The status of the member
				status: "drafted" /* Valid values: drafted | joined | left */,

				// The phone number for the member, if available.
				phone: "some string",

				// The access level of the access pass member. If its admin, the member is an
				// authorized user of the access pass. If its customer, the member has a valid
				// membership to the access pass. If its no_access, the member does not have
				// access to the access pass.
				accessLevel: "admin" /* Valid values: admin | customer | no_access */,

				// How much they have spent on the company's passes.
				totalSpent: 10,

				// How much they have spent on the company's passes.
				usdTotalSpent: "some string",

				// An estimated MRR for the member.
				mrr: "some string",

				// The user for this member, if any.
				user: {
					// The internal ID of the user account.
					id: "xxxxxxxxxxx",

					// The digital mailing address of the user.
					email: "some string",

					// The user's full name.
					name: "some string",

					// The whop username.
					username: "some string",
				},

				// The image for the member, derived from either the User or the Company Buyer.
				imageSrcset: {
					// Image url with requested image resolution.
					original: "some string",
				},
			},
		],
	},
};

```


# List Memberships
Source: https://docs.whop.com/sdk/api/companies/list-memberships

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `member:basic:read`
* *`access_pass:basic:read` (optional)*
* *`plan:basic:read` (optional)*
* *`promo_code:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listMemberships({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	direction: "asc" /* Valid values: asc | desc */,

	first: 10,

	last: 10,

	order:
		"canceled_at" /* Valid values: canceled_at | created_at | date_joined | id | status | total_spend */,

	filters: {
		// The access pass IDs to filter the memberships by
		accessPassIds: ["xxxxxxxxxxx"],

		// The access pass types to filter the memberships by
		accessPassTypes: [
			"api_only" /* Valid values: api_only | app | experience_upsell | regular */,
		],

		// The cancelation reasons to filter the memberships by
		cancelationReasons: [
			"bad_experience" /* Valid values: bad_experience | missing_features | other | switching | technical_issues | testing | too_expensive */,
		],

		// The end date to filter the memberships by
		endDate: 1716931200,

		// Whether the memberships have a cancelation reason
		hasCancelationReason: true,

		// The header filter to filter the memberships by
		headerFilter: "active" /* Valid values: active | churned */,

		// The membership status to filter the memberships by
		membershipStatus: "active" /* Valid values: active | inactive */,

		// The plan IDs to filter the memberships by
		planIds: ["xxxxxxxxxxx"],

		// The promo code IDs to filter the memberships by
		promoCodeIds: ["xxxxxxxxxxx"],

		// The start date to filter the memberships by
		startDate: 1716931200,

		// The statuses to filter the memberships by
		statuses: [
			"active" /* Valid values: active | canceled | completed | drafted | expired | past_due | trialing | unresolved */,
		],

		// The tracking link IDs to filter the memberships by
		trackingLinkIds: ["xxxxxxxxxxx"],
	},
});

```

### Example output

```typescript
const result = {
	// The memberships for the company
	memberships: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating backwards, the cursor to continue.
			startCursor: "some string",

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The internal ID of the membership.
				id: "xxxxxxxxxxx",

				// The state of the membership.
				status:
					"active" /* Valid values: active | canceled | completed | drafted | expired | past_due | trialing | unresolved */,

				// The epoch timestamp of when the membership was created.
				createdAt: 1716931200,

				// The epoch timestamp of when the membership is set to expire.
				expiresAt: 1716931200,

				// The epoch timestamp of when the customer initiated a cancellation.
				canceledAt: 1716931200,

				// The total amount spent on the membership.
				totalSpend: 10,

				// The reason that the member canceled the membership (filled out by the member).
				cancelationReason: "some string",

				// The member of the membership.
				member: {
					// The internal ID of the user account for the member.
					id: "xxxxxxxxxxx",

					// The written name of the member.
					name: "some string",

					// The whop username of the member.
					username: "some string",

					// The digital mailing address of the member.
					email: "some string",

					// The user's profile picture
					profilePicture: {
						// The original URL of the attachment, such as a direct link to S3. This should
						// never be displayed on the client and always passed to an Imgproxy transformer.
						sourceUrl: "some string",
					},
				},

				// The plan the membership is connected to.
				plan: {
					// The internal ID of the plan.
					id: "xxxxxxxxxxx",
				},

				// The access pass the membership is connected to.
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The title of the access pass. Use for Whop 4.0.
					title: "some string",
				},

				// The type of promo code the membership is connected to.
				promoCode: {
					// The specific code used to apply the promo at checkout.
					code: "some string",
				},
			},
		],
	},
};

```


# List Plans
Source: https://docs.whop.com/sdk/api/companies/list-plans

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `plan:basic:read`
* *`access_pass:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listPlans({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	filter: {
		// A specific access pass to filter the scope by.
		accessPassId: "prod_XXXXXXXX",

		// If true, it returns plans that have affiliates
		affiliates: true,

		// How to order the results.
		direction: "asc" /* Valid values: asc | desc */,

		// What to order the results by.
		order:
			"active_memberships_count" /* Valid values: active_memberships_count | affiliates | created_at | expires_at | internal_notes */,

		// If true, it returns plans that have member/passholder affiliates set to true
		passholderAffiliate: true,

		// The text that is being searched.
		query: "some string",

		// If true, it returns raffles that have ended.
		raffleEnded: true,

		// The release method to filter the scope by.
		releaseMethod: "buy_now" /* Valid values: buy_now | raffle | waitlist */,

		// The visibility to filter the scope by.
		visibility:
			"all" /* Valid values: all | archived | hidden | not_archived | not_quick_link | quick_link | visible */,
	},

	first: 10,

	last: 10,
});

```

### Example output

```typescript
const result = {
	// All of the plans connected to the company.
	plans: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, the cursor to continue.
			endCursor: "some string",

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating backwards, the cursor to continue.
			startCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The internal ID of the plan.
				id: "xxxxxxxxxxx",

				// The respective currency identifier for the plan.
				baseCurrency:
					"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

				// The price a person has to pay for a plan on the renewal purchase.
				rawRenewalPrice: 10,

				// The price a person has to pay for a plan on the initial purchase.
				rawInitialPrice: 10,

				// How much the user has to pay on the first payment.
				initialPriceDue: 10,

				// When the plan was created.
				createdAt: 1716931200,

				// When the plan was last updated.
				updatedAt: 1716931200,

				// The interval at which the plan charges (renewal plans).
				billingPeriod: 10,

				// The number of free trial days added before a renewal plan.
				trialPeriodDays: 10,

				// The interval at which the plan charges (expiration plans).
				expirationDays: 10,

				// Limits/doesn't limit the number of units available for purchase.
				unlimitedStock: true,

				// The description of the Plan as seen by the customer on the checkout page.
				paymentLinkDescription: "some string",

				// This is the release method the business uses to sell this plan.
				releaseMethod:
					"buy_now" /* Valid values: buy_now | raffle | waitlist */,

				// The number of units available for purchase.
				stock: 10,

				// Shows or hides the plan from public/business view.
				visibility:
					"archived" /* Valid values: archived | hidden | quick_link | visible */,

				// Indicates if the plan is a one time payment or recurring.
				planType: "one_time" /* Valid values: one_time | renewal */,

				// The access pass for the plan.
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The title of the access pass. Use for Whop 4.0.
					title: "some string",

					// The route of the access pass.
					route: "some string",

					// The logo for the access pass.
					logo: {
						// The original URL of the attachment, such as a direct link to S3. This should
						// never be displayed on the client and always passed to an Imgproxy transformer.
						sourceUrl: "some string",
					},
				},
			},
		],
	},
};

```


# List Waitlist Entries
Source: https://docs.whop.com/sdk/api/companies/list-waitlist-entries

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `plan:waitlist:read`
* *`plan:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.companies.listWaitlistEntries({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	direction: "asc" /* Valid values: asc | desc */,

	first: 10,

	last: 10,

	order: "created_at" /* Valid values: created_at | id */,

	filters: {
		// The access pass IDs to filter the entries by
		accessPassIds: ["xxxxxxxxxxx"],

		// The end date to filter the entries by
		endDate: 1716931200,

		// The plan IDs to filter the entries by
		planIds: ["xxxxxxxxxxx"],

		// The start date to filter the entries by
		startDate: 1716931200,

		// The statuses to filter the entries by
		statuses: ["any" /* Valid values: any | approved | denied | pending */],
	},
});

```

### Example output

```typescript
const result = {
	// The waitlist entries for the company
	entries: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, the cursor to continue.
			endCursor: "some string",

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating backwards, the cursor to continue.
			startCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The internal ID of the entry.
				id: "xxxxxxxxxxx",

				// The name of the raffle/waitlist.
				name: "some string",

				// The status of the entry.
				status: "any" /* Valid values: any | approved | denied | pending */,

				// When the entry was created.
				createdAt: 1716931200,

				// The timestamp (in milliseconds since epoch) of when the object was last updated
				updatedAtMs: "9999999",

				// The user who created the entry.
				user: {
					// The internal ID of the user.
					id: "xxxxxxxxxxx",

					// The name of the user from their Whop account.
					name: "some string",

					// The username of the user from their Whop account.
					username: "some string",

					// The user's profile picture
					profilePicture: {
						// The original URL of the attachment, such as a direct link to S3. This should
						// never be displayed on the client and always passed to an Imgproxy transformer.
						sourceUrl: "some string",
					},
				},

				// The plan the entry is connected to.
				plan: {
					// The internal ID of the plan.
					id: "xxxxxxxxxxx",

					// The title of the owning object.
					title: "some string",
				},

				// The access pass tied to this entry, if there is one.
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The title of the access pass. Use for Whop 4.0.
					title: "some string",
				},

				// Responses collected from the user when submitting their entry.
				customFieldResponses: [
					{
						// The ID of the custom field item
						id: "xxxxxxxxxxx",

						// The question asked by the custom field
						question: "some string",

						// The response a user gave to the specific question or field.
						answer: "some string",
					},
				],
			},
		],
	},
};

```


# Create Assessment Question
Source: https://docs.whop.com/sdk/api/courses/create-assessment-question



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.createAssessmentQuestion({
	// The correct answer to the assessment question
	correctAnswer: "some string" /* Required! */,

	// The ID of the lesson to create the assessment question in
	lessonId: "lesn_XXXXXXXX" /* Required! */,

	// The text of the question being asked
	questionText: "some string" /* Required! */,

	// The type of the assessment question
	questionType:
		"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */ /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the assessment question
	id: "xxxxxxxxxxx",

	// The correct answer for the question. Used for short answer questions
	correctAnswer: "some string",

	// Optional image attachment for the question
	image: {
		// The ID of the attachment
		id: "xxxxxxxxxxx",

		// A signed ID of the attachment to directly query the attachment
		signedId: "xxxxxxxxxxx",

		// Whether the attachment has been analyzed
		analyzed: true,

		// The size of the file in bytes
		byteSizeV2: "9999999",

		// The name of the file
		filename: "some string",

		// The attachment's content type (e.g., image/jpg, video/mp4)
		contentType: "some string",

		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},

		// The blurhash of the image
		blurhash: "some string",

		// The height of the video
		height: 10,

		// The width of the video
		width: 10,

		// The aspect ratio of the video
		aspectRatio: 10,

		// The preview of the video
		preview: {
			// The URL to access the attachment
			url: "some string",
		},

		// The duration of the audio in seconds
		duration: 10,

		// The URL of the waveform for the audio
		waveformUrl: "some string",
	},

	// The answer options for multiple choice/select questions
	options: [
		{
			// The ID of the assessment question option
			id: "xxxxxxxxxxx",

			// Whether this option is a correct answer
			isCorrect: true,

			// The text of the answer option
			optionText: "some string",

			// The order of this option within the question
			order: 10,
		},
	],

	// The order of the question within its lesson
	order: 10,

	// The text of the question
	questionText: "some string",

	// The type of the question
	questionType:
		"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */,
};

```


# Create Chapter
Source: https://docs.whop.com/sdk/api/courses/create-chapter



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.createChapter({
	// The ID of the course to create the chapter in
	courseId: "cors_XXXXXXXX" /* Required! */,

	// The title of the chapter
	title: "some string",
});

```

### Example output

```typescript
const result = {
	// The ID of the chapter. Looks like chap_XXX
	id: "xxxxxxxxxxx",

	// The title of the chapter
	title: "some string",

	// The order of the chapter within its course
	order: 10,

	// The lessons in this chapter
	lessons: [
		{
			// The ID of the lesson
			id: "xxxxxxxxxxx",

			// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
			lessonType:
				"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

			// The title of the lesson
			title: "some string",

			// The order of the lesson within its chapter
			order: 10,

			// The visibility of the lesson. Determines how / whether this lesson is visible to users.
			visibility: "hidden" /* Valid values: hidden | visible */,

			// Number of days from course start until the lesson is unlocked
			daysFromCourseStartUntilUnlock: 10,

			// The content of the lesson
			content: "some string",

			// The associated Mux asset for video lessons
			muxAsset: {
				// The ID of the Mux asset
				id: "xxxxxxxxxxx",

				// The Mux-provided ID of the asset
				muxAssetId: "some string",

				// The public playback ID of the Mux asset
				playbackId: "some string",

				// The signed playback ID of the Mux asset
				signedPlaybackId: "some string",

				// The signed thumbnail playback token of the Mux asset
				signedThumbnailPlaybackToken: "some string",

				// The signed video playback token of the Mux asset
				signedVideoPlaybackToken: "some string",

				// The signed storyboard playback token of the Mux asset
				signedStoryboardPlaybackToken: "some string",

				// The duration of the video in seconds
				durationSeconds: 10,

				// The status of the Mux asset
				status: "created" /* Valid values: created | ready | uploading */,

				// The time at which the video finished uploading
				finishedUploadingAt: 1716931200,
			},
		},
	],
};

```


# Create Course
Source: https://docs.whop.com/sdk/api/courses/create-course



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.createCourse({
	// The cover image URL of the course
	coverImage: "some string",

	// The ID of the experience to create the course in
	experienceId: "exp_XXXXXXXX" /* Required! */,

	// The tagline of the course
	tagline: "some string",

	// The title of the course
	title: "some string" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// Whether the course will award its students a PDF certificate after completing all lessons
	certificateAfterCompletionEnabled: true,

	// The chapters in this course
	chapters: [
		{
			// The ID of the chapter. Looks like chap_XXX
			id: "xxxxxxxxxxx",

			// The title of the chapter
			title: "some string",

			// The order of the chapter within its course
			order: 10,

			// The lessons in this chapter
			lessons: [
				{
					// The ID of the lesson
					id: "xxxxxxxxxxx",

					// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
					lessonType:
						"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

					// The title of the lesson
					title: "some string",

					// The order of the lesson within its chapter
					order: 10,

					// The visibility of the lesson. Determines how / whether this lesson is visible to users.
					visibility: "hidden" /* Valid values: hidden | visible */,

					// Number of days from course start until the lesson is unlocked
					daysFromCourseStartUntilUnlock: 10,

					// The content of the lesson
					content: "some string",

					// The associated Mux asset for video lessons
					muxAsset: {
						// The ID of the Mux asset
						id: "xxxxxxxxxxx",

						// The Mux-provided ID of the asset
						muxAssetId: "some string",

						// The public playback ID of the Mux asset
						playbackId: "some string",

						// The signed playback ID of the Mux asset
						signedPlaybackId: "some string",

						// The signed thumbnail playback token of the Mux asset
						signedThumbnailPlaybackToken: "some string",

						// The signed video playback token of the Mux asset
						signedVideoPlaybackToken: "some string",

						// The signed storyboard playback token of the Mux asset
						signedStoryboardPlaybackToken: "some string",

						// The duration of the video in seconds
						durationSeconds: 10,

						// The status of the Mux asset
						status: "created" /* Valid values: created | ready | uploading */,

						// The time at which the video finished uploading
						finishedUploadingAt: 1716931200,
					},
				},
			],
		},
	],

	// The URL of the course's cover image, which is shown in course preview cards
	coverImage: "some string",

	// A short description of the course
	description: "some string",

	// The ID of the course. Looks like cors_XXX
	id: "xxxxxxxxxxx",

	// The language spoken in the video content of the course, used to generate closed captions in the right language
	language:
		"bg" /* Valid values: bg | ca | cs | da | de | el | en | es | fi | fr | hr | it | nl | no | pl | pt | ro | ru | sk | sv | tr | uk */,

	// Whether the course requires students to complete the previous lesson before moving on to the next one
	requireCompletingLessonsInOrder: true,

	// A short tagline for the course. It is displayed under the course title in the UI
	tagline: "some string",

	// The title of the course
	title: "some string",

	// Whether to apply protections on videos in the course (such as overlaying your user id, and logging tampering attempts)
	videoProtectionEnabled: true,
};

```


# Create Lesson
Source: https://docs.whop.com/sdk/api/courses/create-lesson



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.createLesson({
	// The ID of the chapter to create the lesson in
	chapterId: "chap_XXXXXXXX" /* Required! */,

	// The content of the lesson
	content: "some string",

	// Days from course start until unlock
	daysFromCourseStartUntilUnlock: 10,

	// The type of the lesson
	lessonType:
		"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */ /* Required! */,

	// The title of the lesson
	title: "some string",
});

```

### Example output

```typescript
const result = {
	// The ID of the lesson
	id: "xxxxxxxxxxx",

	// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
	lessonType:
		"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

	// The title of the lesson
	title: "some string",

	// The order of the lesson within its chapter
	order: 10,

	// The visibility of the lesson. Determines how / whether this lesson is visible to users.
	visibility: "hidden" /* Valid values: hidden | visible */,

	// The content of the lesson
	content: "some string",

	// Number of days from course start until the lesson is unlocked
	daysFromCourseStartUntilUnlock: 10,

	// The associated Mux asset for video lessons
	muxAsset: {
		// The ID of the Mux asset
		id: "xxxxxxxxxxx",

		// The Mux-provided ID of the asset
		muxAssetId: "some string",

		// The public playback ID of the Mux asset
		playbackId: "some string",

		// The signed playback ID of the Mux asset
		signedPlaybackId: "some string",

		// The signed thumbnail playback token of the Mux asset
		signedThumbnailPlaybackToken: "some string",

		// The signed video playback token of the Mux asset
		signedVideoPlaybackToken: "some string",

		// The signed storyboard playback token of the Mux asset
		signedStoryboardPlaybackToken: "some string",

		// The duration of the video in seconds
		durationSeconds: 10,

		// The status of the Mux asset
		status: "created" /* Valid values: created | ready | uploading */,

		// The time at which the video finished uploading
		finishedUploadingAt: 1716931200,
	},

	// Assessment questions for quiz/knowledge check lessons
	assessmentQuestions: [
		{
			// The ID of the assessment question
			id: "xxxxxxxxxxx",

			// The correct answer for the question. Used for short answer questions
			correctAnswer: "some string",

			// Optional image attachment for the question
			image: {
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},

			// The answer options for multiple choice/select questions
			options: [
				{
					// The ID of the assessment question option
					id: "xxxxxxxxxxx",

					// Whether this option is a correct answer
					isCorrect: true,

					// The text of the answer option
					optionText: "some string",

					// The order of this option within the question
					order: 10,
				},
			],

			// The order of the question within its lesson
			order: 10,

			// The text of the question
			questionText: "some string",

			// The type of the question
			questionType:
				"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */,
		},
	],

	// The attached files in this lesson
	attachments: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},
		],
	},

	// The main PDF file for this lesson
	mainPdf: {
		// The ID of the attachment
		id: "xxxxxxxxxxx",

		// A signed ID of the attachment to directly query the attachment
		signedId: "xxxxxxxxxxx",

		// Whether the attachment has been analyzed
		analyzed: true,

		// The size of the file in bytes
		byteSizeV2: "9999999",

		// The name of the file
		filename: "some string",

		// The attachment's content type (e.g., image/jpg, video/mp4)
		contentType: "some string",

		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},

		// The blurhash of the image
		blurhash: "some string",

		// The height of the video
		height: 10,

		// The width of the video
		width: 10,

		// The aspect ratio of the video
		aspectRatio: 10,

		// The preview of the video
		preview: {
			// The URL to access the attachment
			url: "some string",
		},

		// The duration of the audio in seconds
		duration: 10,

		// The URL of the waveform for the audio
		waveformUrl: "some string",
	},
};

```


# Delete Assessment Question Image
Source: https://docs.whop.com/sdk/api/courses/delete-assessment-question-image



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.deleteAssessmentQuestionImage({
	// The ID of the attachment to delete
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Delete Chapter
Source: https://docs.whop.com/sdk/api/courses/delete-chapter



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.deleteChapter({
	// The ID of the chapter to delete
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Delete Lesson
Source: https://docs.whop.com/sdk/api/courses/delete-lesson



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.deleteLesson({
	// The ID of the lesson to delete
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Delete Lesson Attachment
Source: https://docs.whop.com/sdk/api/courses/delete-lesson-attachment



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.deleteLessonAttachment({
	// The ID of the attachment to delete
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Course
Source: https://docs.whop.com/sdk/api/courses/get-course

A course from a courses app experience

### Required Permissions

* `courses:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.getCourse({
	// The ID of the course to fetch.
	courseId: "cors_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// Whether the course will award its students a PDF certificate after completing all lessons
	certificateAfterCompletionEnabled: true,

	// The chapters in this course
	chapters: [
		{
			// The ID of the chapter. Looks like chap_XXX
			id: "xxxxxxxxxxx",

			// The title of the chapter
			title: "some string",

			// The order of the chapter within its course
			order: 10,

			// The lessons in this chapter
			lessons: [
				{
					// The ID of the lesson
					id: "xxxxxxxxxxx",

					// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
					lessonType:
						"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

					// The title of the lesson
					title: "some string",

					// The order of the lesson within its chapter
					order: 10,

					// The visibility of the lesson. Determines how / whether this lesson is visible to users.
					visibility: "hidden" /* Valid values: hidden | visible */,

					// Number of days from course start until the lesson is unlocked
					daysFromCourseStartUntilUnlock: 10,

					// The content of the lesson
					content: "some string",

					// The associated Mux asset for video lessons
					muxAsset: {
						// The ID of the Mux asset
						id: "xxxxxxxxxxx",

						// The Mux-provided ID of the asset
						muxAssetId: "some string",

						// The public playback ID of the Mux asset
						playbackId: "some string",

						// The signed playback ID of the Mux asset
						signedPlaybackId: "some string",

						// The signed thumbnail playback token of the Mux asset
						signedThumbnailPlaybackToken: "some string",

						// The signed video playback token of the Mux asset
						signedVideoPlaybackToken: "some string",

						// The signed storyboard playback token of the Mux asset
						signedStoryboardPlaybackToken: "some string",

						// The duration of the video in seconds
						durationSeconds: 10,

						// The status of the Mux asset
						status: "created" /* Valid values: created | ready | uploading */,

						// The time at which the video finished uploading
						finishedUploadingAt: 1716931200,
					},
				},
			],
		},
	],

	// The URL of the course's cover image, which is shown in course preview cards
	coverImage: "some string",

	// A short description of the course
	description: "some string",

	// The ID of the course. Looks like cors_XXX
	id: "xxxxxxxxxxx",

	// The language spoken in the video content of the course, used to generate closed captions in the right language
	language:
		"bg" /* Valid values: bg | ca | cs | da | de | el | en | es | fi | fr | hr | it | nl | no | pl | pt | ro | ru | sk | sv | tr | uk */,

	// Whether the course requires students to complete the previous lesson before moving on to the next one
	requireCompletingLessonsInOrder: true,

	// A short tagline for the course. It is displayed under the course title in the UI
	tagline: "some string",

	// The title of the course
	title: "some string",

	// Whether to apply protections on videos in the course (such as overlaying your user id, and logging tampering attempts)
	videoProtectionEnabled: true,
};

```


# Get Lesson
Source: https://docs.whop.com/sdk/api/courses/get-lesson

A course from a courses app experience

### Required Permissions

* `courses:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.getLesson({
	// The ID of the course to fetch.
	courseId: "cors_XXXXXXXX" /* Required! */,

	lessonId: "lesn_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// Get a specific lesson by ID
	lesson: {
		// The ID of the lesson
		id: "xxxxxxxxxxx",

		// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
		lessonType:
			"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

		// The title of the lesson
		title: "some string",

		// The order of the lesson within its chapter
		order: 10,

		// The visibility of the lesson. Determines how / whether this lesson is visible to users.
		visibility: "hidden" /* Valid values: hidden | visible */,

		// The content of the lesson
		content: "some string",

		// Number of days from course start until the lesson is unlocked
		daysFromCourseStartUntilUnlock: 10,

		// The associated Mux asset for video lessons
		muxAsset: {
			// The ID of the Mux asset
			id: "xxxxxxxxxxx",

			// The Mux-provided ID of the asset
			muxAssetId: "some string",

			// The public playback ID of the Mux asset
			playbackId: "some string",

			// The signed playback ID of the Mux asset
			signedPlaybackId: "some string",

			// The signed thumbnail playback token of the Mux asset
			signedThumbnailPlaybackToken: "some string",

			// The signed video playback token of the Mux asset
			signedVideoPlaybackToken: "some string",

			// The signed storyboard playback token of the Mux asset
			signedStoryboardPlaybackToken: "some string",

			// The duration of the video in seconds
			durationSeconds: 10,

			// The status of the Mux asset
			status: "created" /* Valid values: created | ready | uploading */,

			// The time at which the video finished uploading
			finishedUploadingAt: 1716931200,
		},

		// Assessment questions for quiz/knowledge check lessons
		assessmentQuestions: [
			{
				// The ID of the assessment question
				id: "xxxxxxxxxxx",

				// The correct answer for the question. Used for short answer questions
				correctAnswer: "some string",

				// Optional image attachment for the question
				image: {
					// The ID of the attachment
					id: "xxxxxxxxxxx",

					// A signed ID of the attachment to directly query the attachment
					signedId: "xxxxxxxxxxx",

					// Whether the attachment has been analyzed
					analyzed: true,

					// The size of the file in bytes
					byteSizeV2: "9999999",

					// The name of the file
					filename: "some string",

					// The attachment's content type (e.g., image/jpg, video/mp4)
					contentType: "some string",

					// The source of the attachment
					source: {
						// The URL to access the attachment
						url: "some string",
					},

					// The blurhash of the image
					blurhash: "some string",

					// The height of the video
					height: 10,

					// The width of the video
					width: 10,

					// The aspect ratio of the video
					aspectRatio: 10,

					// The preview of the video
					preview: {
						// The URL to access the attachment
						url: "some string",
					},

					// The duration of the audio in seconds
					duration: 10,

					// The URL of the waveform for the audio
					waveformUrl: "some string",
				},

				// The answer options for multiple choice/select questions
				options: [
					{
						// The ID of the assessment question option
						id: "xxxxxxxxxxx",

						// Whether this option is a correct answer
						isCorrect: true,

						// The text of the answer option
						optionText: "some string",

						// The order of this option within the question
						order: 10,
					},
				],

				// The order of the question within its lesson
				order: 10,

				// The text of the question
				questionText: "some string",

				// The type of the question
				questionType:
					"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */,
			},
		],

		// The attached files in this lesson
		attachments: {
			// A list of nodes.
			nodes: [
				{
					// The ID of the attachment
					id: "xxxxxxxxxxx",

					// A signed ID of the attachment to directly query the attachment
					signedId: "xxxxxxxxxxx",

					// Whether the attachment has been analyzed
					analyzed: true,

					// The size of the file in bytes
					byteSizeV2: "9999999",

					// The name of the file
					filename: "some string",

					// The attachment's content type (e.g., image/jpg, video/mp4)
					contentType: "some string",

					// The source of the attachment
					source: {
						// The URL to access the attachment
						url: "some string",
					},

					// The blurhash of the image
					blurhash: "some string",

					// The height of the video
					height: 10,

					// The width of the video
					width: 10,

					// The aspect ratio of the video
					aspectRatio: 10,

					// The preview of the video
					preview: {
						// The URL to access the attachment
						url: "some string",
					},

					// The duration of the audio in seconds
					duration: 10,

					// The URL of the waveform for the audio
					waveformUrl: "some string",
				},
			],
		},

		// The main PDF file for this lesson
		mainPdf: {
			// The ID of the attachment
			id: "xxxxxxxxxxx",

			// A signed ID of the attachment to directly query the attachment
			signedId: "xxxxxxxxxxx",

			// Whether the attachment has been analyzed
			analyzed: true,

			// The size of the file in bytes
			byteSizeV2: "9999999",

			// The name of the file
			filename: "some string",

			// The attachment's content type (e.g., image/jpg, video/mp4)
			contentType: "some string",

			// The source of the attachment
			source: {
				// The URL to access the attachment
				url: "some string",
			},

			// The blurhash of the image
			blurhash: "some string",

			// The height of the video
			height: 10,

			// The width of the video
			width: 10,

			// The aspect ratio of the video
			aspectRatio: 10,

			// The preview of the video
			preview: {
				// The URL to access the attachment
				url: "some string",
			},

			// The duration of the audio in seconds
			duration: 10,

			// The URL of the waveform for the audio
			waveformUrl: "some string",
		},
	},
};

```


# Get User Lesson Interactions
Source: https://docs.whop.com/sdk/api/courses/get-user-lesson-interactions

A course from a courses app experience

### Required Permissions

* `courses:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.getUserLessonInteractions({
	// The ID of the course to fetch.
	courseId: "cors_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The chapters in this course
	chapters: [
		{
			// The ID of the chapter. Looks like chap_XXX
			id: "xxxxxxxxxxx",

			// The lessons in this chapter
			lessons: [
				{
					// The ID of the lesson
					id: "xxxxxxxxxxx",

					// The user's lesson interactions for this lesson
					lessonInteraction: {
						// The ID of the lesson interaction
						id: "xxxxxxxxxxx",

						// Whether the lesson has been completed by the user
						completed: true,

						// When the interaction was created
						createdAt: 1716931200,
					},
				},
			],
		},
	],
};

```


# List Courses For Company
Source: https://docs.whop.com/sdk/api/courses/list-courses-for-company

Fetch a company

### Required Permissions

* `courses:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.listCoursesForCompany({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	first: 10,

	after: "pageInfo.endCursor",
});

```

### Example output

```typescript
const result = {
	// The courses in the company's experiences
	courses: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the course. Looks like cors_XXX
				id: "xxxxxxxxxxx",

				// The title of the course
				title: "some string",

				// The URL of the course's cover image, which is shown in course preview cards
				coverImage: "some string",

				// The experience that the course belongs to
				experience: {
					// The unique ID representing this experience
					id: "xxxxxxxxxxx",

					// The access passes that are associated with this experience. This should not be
					// used unless you are trying to list all access passes the experience has, for
					// some reason. You probably don't want to use this though and should be using accessPass.
					accessPasses: [
						{
							// The internal ID of the public access pass.
							id: "xxxxxxxxxxx",

							// The title of the access pass. Use for Whop 4.0.
							title: "some string",
						},
					],
				},
			},
		],

		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},
	},
};

```


# List Courses For Experience
Source: https://docs.whop.com/sdk/api/courses/list-courses-for-experience

Fetch an experience.

### Required Permissions

* `courses:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.listCoursesForExperience({
	// The ID of the experience
	experienceId: "exp_XXXXXXXX" /* Required! */,

	first: 10,

	after: "pageInfo.endCursor",
});

```

### Example output

```typescript
const result = {
	// The courses for the experience
	courses: {
		// A list of nodes.
		nodes: [
			{
				// Whether the course will award its students a PDF certificate after completing all lessons
				certificateAfterCompletionEnabled: true,

				// The chapters in this course
				chapters: [
					{
						// The ID of the chapter. Looks like chap_XXX
						id: "xxxxxxxxxxx",

						// The title of the chapter
						title: "some string",

						// The order of the chapter within its course
						order: 10,

						// The lessons in this chapter
						lessons: [
							{
								// The ID of the lesson
								id: "xxxxxxxxxxx",

								// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
								lessonType:
									"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

								// The title of the lesson
								title: "some string",

								// The order of the lesson within its chapter
								order: 10,

								// The visibility of the lesson. Determines how / whether this lesson is visible to users.
								visibility: "hidden" /* Valid values: hidden | visible */,

								// Number of days from course start until the lesson is unlocked
								daysFromCourseStartUntilUnlock: 10,

								// The content of the lesson
								content: "some string",

								// The associated Mux asset for video lessons
								muxAsset: {
									// The ID of the Mux asset
									id: "xxxxxxxxxxx",

									// The Mux-provided ID of the asset
									muxAssetId: "some string",

									// The public playback ID of the Mux asset
									playbackId: "some string",

									// The signed playback ID of the Mux asset
									signedPlaybackId: "some string",

									// The signed thumbnail playback token of the Mux asset
									signedThumbnailPlaybackToken: "some string",

									// The signed video playback token of the Mux asset
									signedVideoPlaybackToken: "some string",

									// The signed storyboard playback token of the Mux asset
									signedStoryboardPlaybackToken: "some string",

									// The duration of the video in seconds
									durationSeconds: 10,

									// The status of the Mux asset
									status:
										"created" /* Valid values: created | ready | uploading */,

									// The time at which the video finished uploading
									finishedUploadingAt: 1716931200,
								},
							},
						],
					},
				],

				// The URL of the course's cover image, which is shown in course preview cards
				coverImage: "some string",

				// A short description of the course
				description: "some string",

				// The ID of the course. Looks like cors_XXX
				id: "xxxxxxxxxxx",

				// The language spoken in the video content of the course, used to generate closed captions in the right language
				language:
					"bg" /* Valid values: bg | ca | cs | da | de | el | en | es | fi | fr | hr | it | nl | no | pl | pt | ro | ru | sk | sv | tr | uk */,

				// Whether the course requires students to complete the previous lesson before moving on to the next one
				requireCompletingLessonsInOrder: true,

				// A short tagline for the course. It is displayed under the course title in the UI
				tagline: "some string",

				// The title of the course
				title: "some string",

				// Whether to apply protections on videos in the course (such as overlaying your user id, and logging tampering attempts)
				videoProtectionEnabled: true,
			},
		],

		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},
	},
};

```


# Mark Lesson As Completed
Source: https://docs.whop.com/sdk/api/courses/mark-lesson-as-completed



### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.markLessonAsCompleted({
	// The ID of the lesson to mark as completed
	lessonId: "lesn_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Move Course
Source: https://docs.whop.com/sdk/api/courses/move-course



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.moveCourse({
	// The ID of the course to move
	courseId: "cors_XXXXXXXX" /* Required! */,

	// The experience to move the course into
	destinationExperienceId: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Update Chapter
Source: https://docs.whop.com/sdk/api/courses/update-chapter



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.updateChapter({
	// The ID of the chapter to update
	id: "xxxxxxxxxxx" /* Required! */,

	// The title of the chapter
	title: "some string" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the chapter. Looks like chap_XXX
	id: "xxxxxxxxxxx",

	// The title of the chapter
	title: "some string",

	// The order of the chapter within its course
	order: 10,

	// The lessons in this chapter
	lessons: [
		{
			// The ID of the lesson
			id: "xxxxxxxxxxx",

			// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
			lessonType:
				"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

			// The title of the lesson
			title: "some string",

			// The order of the lesson within its chapter
			order: 10,

			// The visibility of the lesson. Determines how / whether this lesson is visible to users.
			visibility: "hidden" /* Valid values: hidden | visible */,

			// Number of days from course start until the lesson is unlocked
			daysFromCourseStartUntilUnlock: 10,

			// The content of the lesson
			content: "some string",

			// The associated Mux asset for video lessons
			muxAsset: {
				// The ID of the Mux asset
				id: "xxxxxxxxxxx",

				// The Mux-provided ID of the asset
				muxAssetId: "some string",

				// The public playback ID of the Mux asset
				playbackId: "some string",

				// The signed playback ID of the Mux asset
				signedPlaybackId: "some string",

				// The signed thumbnail playback token of the Mux asset
				signedThumbnailPlaybackToken: "some string",

				// The signed video playback token of the Mux asset
				signedVideoPlaybackToken: "some string",

				// The signed storyboard playback token of the Mux asset
				signedStoryboardPlaybackToken: "some string",

				// The duration of the video in seconds
				durationSeconds: 10,

				// The status of the Mux asset
				status: "created" /* Valid values: created | ready | uploading */,

				// The time at which the video finished uploading
				finishedUploadingAt: 1716931200,
			},
		},
	],
};

```


# Update Chapter Order
Source: https://docs.whop.com/sdk/api/courses/update-chapter-order



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.updateChapterOrder({
	// The ID of the chapter to place this chapter below
	belowChapterId: "xxxxxxxxxxx",

	// The ID of the chapter to reorder
	chapterId: "chap_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the chapter. Looks like chap_XXX
	id: "xxxxxxxxxxx",

	// The title of the chapter
	title: "some string",

	// The order of the chapter within its course
	order: 10,

	// The lessons in this chapter
	lessons: [
		{
			// The ID of the lesson
			id: "xxxxxxxxxxx",

			// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
			lessonType:
				"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

			// The title of the lesson
			title: "some string",

			// The order of the lesson within its chapter
			order: 10,

			// The visibility of the lesson. Determines how / whether this lesson is visible to users.
			visibility: "hidden" /* Valid values: hidden | visible */,

			// Number of days from course start until the lesson is unlocked
			daysFromCourseStartUntilUnlock: 10,

			// The content of the lesson
			content: "some string",

			// The associated Mux asset for video lessons
			muxAsset: {
				// The ID of the Mux asset
				id: "xxxxxxxxxxx",

				// The Mux-provided ID of the asset
				muxAssetId: "some string",

				// The public playback ID of the Mux asset
				playbackId: "some string",

				// The signed playback ID of the Mux asset
				signedPlaybackId: "some string",

				// The signed thumbnail playback token of the Mux asset
				signedThumbnailPlaybackToken: "some string",

				// The signed video playback token of the Mux asset
				signedVideoPlaybackToken: "some string",

				// The signed storyboard playback token of the Mux asset
				signedStoryboardPlaybackToken: "some string",

				// The duration of the video in seconds
				durationSeconds: 10,

				// The status of the Mux asset
				status: "created" /* Valid values: created | ready | uploading */,

				// The time at which the video finished uploading
				finishedUploadingAt: 1716931200,
			},
		},
	],
};

```


# Update Lesson
Source: https://docs.whop.com/sdk/api/courses/update-lesson



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.updateLesson({
	// The content of the lesson
	content: "some string",

	// Days from course start until unlock
	daysFromCourseStartUntilUnlock: 10,

	// The ID of the lesson to update
	id: "xxxxxxxxxxx" /* Required! */,

	// The type of the lesson
	lessonType:
		"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

	// The ID of the Mux asset to attach to this lesson
	muxAssetId: "some string",

	// The title of the lesson
	title: "some string",

	// Determines how / whether this lesson is visible to users.
	visibility: "hidden" /* Valid values: hidden | visible */,
});

```

### Example output

```typescript
const result = {
	// The ID of the lesson
	id: "xxxxxxxxxxx",

	// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
	lessonType:
		"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

	// The title of the lesson
	title: "some string",

	// The order of the lesson within its chapter
	order: 10,

	// The visibility of the lesson. Determines how / whether this lesson is visible to users.
	visibility: "hidden" /* Valid values: hidden | visible */,

	// The content of the lesson
	content: "some string",

	// Number of days from course start until the lesson is unlocked
	daysFromCourseStartUntilUnlock: 10,

	// The associated Mux asset for video lessons
	muxAsset: {
		// The ID of the Mux asset
		id: "xxxxxxxxxxx",

		// The Mux-provided ID of the asset
		muxAssetId: "some string",

		// The public playback ID of the Mux asset
		playbackId: "some string",

		// The signed playback ID of the Mux asset
		signedPlaybackId: "some string",

		// The signed thumbnail playback token of the Mux asset
		signedThumbnailPlaybackToken: "some string",

		// The signed video playback token of the Mux asset
		signedVideoPlaybackToken: "some string",

		// The signed storyboard playback token of the Mux asset
		signedStoryboardPlaybackToken: "some string",

		// The duration of the video in seconds
		durationSeconds: 10,

		// The status of the Mux asset
		status: "created" /* Valid values: created | ready | uploading */,

		// The time at which the video finished uploading
		finishedUploadingAt: 1716931200,
	},

	// Assessment questions for quiz/knowledge check lessons
	assessmentQuestions: [
		{
			// The ID of the assessment question
			id: "xxxxxxxxxxx",

			// The correct answer for the question. Used for short answer questions
			correctAnswer: "some string",

			// Optional image attachment for the question
			image: {
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},

			// The answer options for multiple choice/select questions
			options: [
				{
					// The ID of the assessment question option
					id: "xxxxxxxxxxx",

					// Whether this option is a correct answer
					isCorrect: true,

					// The text of the answer option
					optionText: "some string",

					// The order of this option within the question
					order: 10,
				},
			],

			// The order of the question within its lesson
			order: 10,

			// The text of the question
			questionText: "some string",

			// The type of the question
			questionType:
				"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */,
		},
	],

	// The attached files in this lesson
	attachments: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},
		],
	},

	// The main PDF file for this lesson
	mainPdf: {
		// The ID of the attachment
		id: "xxxxxxxxxxx",

		// A signed ID of the attachment to directly query the attachment
		signedId: "xxxxxxxxxxx",

		// Whether the attachment has been analyzed
		analyzed: true,

		// The size of the file in bytes
		byteSizeV2: "9999999",

		// The name of the file
		filename: "some string",

		// The attachment's content type (e.g., image/jpg, video/mp4)
		contentType: "some string",

		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},

		// The blurhash of the image
		blurhash: "some string",

		// The height of the video
		height: 10,

		// The width of the video
		width: 10,

		// The aspect ratio of the video
		aspectRatio: 10,

		// The preview of the video
		preview: {
			// The URL to access the attachment
			url: "some string",
		},

		// The duration of the audio in seconds
		duration: 10,

		// The URL of the waveform for the audio
		waveformUrl: "some string",
	},
};

```


# Update Lesson Order
Source: https://docs.whop.com/sdk/api/courses/update-lesson-order



### Required Permissions

* `courses:update`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.courses.updateLessonOrder({
	// The ID of the lesson to place this lesson below
	belowLessonId: "xxxxxxxxxxx",

	// The ID of the chapter to move the lesson to
	chapterId: "chap_XXXXXXXX" /* Required! */,

	// The ID of the lesson to reorder
	lessonId: "lesn_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the lesson
	id: "xxxxxxxxxxx",

	// The type of the lesson (text, video, pdf, multi, quiz, knowledge_check)
	lessonType:
		"knowledge_check" /* Valid values: knowledge_check | multi | pdf | quiz | text | video */,

	// The title of the lesson
	title: "some string",

	// The order of the lesson within its chapter
	order: 10,

	// The visibility of the lesson. Determines how / whether this lesson is visible to users.
	visibility: "hidden" /* Valid values: hidden | visible */,

	// The content of the lesson
	content: "some string",

	// Number of days from course start until the lesson is unlocked
	daysFromCourseStartUntilUnlock: 10,

	// The associated Mux asset for video lessons
	muxAsset: {
		// The ID of the Mux asset
		id: "xxxxxxxxxxx",

		// The Mux-provided ID of the asset
		muxAssetId: "some string",

		// The public playback ID of the Mux asset
		playbackId: "some string",

		// The signed playback ID of the Mux asset
		signedPlaybackId: "some string",

		// The signed thumbnail playback token of the Mux asset
		signedThumbnailPlaybackToken: "some string",

		// The signed video playback token of the Mux asset
		signedVideoPlaybackToken: "some string",

		// The signed storyboard playback token of the Mux asset
		signedStoryboardPlaybackToken: "some string",

		// The duration of the video in seconds
		durationSeconds: 10,

		// The status of the Mux asset
		status: "created" /* Valid values: created | ready | uploading */,

		// The time at which the video finished uploading
		finishedUploadingAt: 1716931200,
	},

	// Assessment questions for quiz/knowledge check lessons
	assessmentQuestions: [
		{
			// The ID of the assessment question
			id: "xxxxxxxxxxx",

			// The correct answer for the question. Used for short answer questions
			correctAnswer: "some string",

			// Optional image attachment for the question
			image: {
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},

			// The answer options for multiple choice/select questions
			options: [
				{
					// The ID of the assessment question option
					id: "xxxxxxxxxxx",

					// Whether this option is a correct answer
					isCorrect: true,

					// The text of the answer option
					optionText: "some string",

					// The order of this option within the question
					order: 10,
				},
			],

			// The order of the question within its lesson
			order: 10,

			// The text of the question
			questionText: "some string",

			// The type of the question
			questionType:
				"multiple_choice" /* Valid values: multiple_choice | multiple_select | short_answer | true_false */,
		},
	],

	// The attached files in this lesson
	attachments: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the attachment
				id: "xxxxxxxxxxx",

				// A signed ID of the attachment to directly query the attachment
				signedId: "xxxxxxxxxxx",

				// Whether the attachment has been analyzed
				analyzed: true,

				// The size of the file in bytes
				byteSizeV2: "9999999",

				// The name of the file
				filename: "some string",

				// The attachment's content type (e.g., image/jpg, video/mp4)
				contentType: "some string",

				// The source of the attachment
				source: {
					// The URL to access the attachment
					url: "some string",
				},

				// The blurhash of the image
				blurhash: "some string",

				// The height of the video
				height: 10,

				// The width of the video
				width: 10,

				// The aspect ratio of the video
				aspectRatio: 10,

				// The preview of the video
				preview: {
					// The URL to access the attachment
					url: "some string",
				},

				// The duration of the audio in seconds
				duration: 10,

				// The URL of the waveform for the audio
				waveformUrl: "some string",
			},
		],
	},

	// The main PDF file for this lesson
	mainPdf: {
		// The ID of the attachment
		id: "xxxxxxxxxxx",

		// A signed ID of the attachment to directly query the attachment
		signedId: "xxxxxxxxxxx",

		// Whether the attachment has been analyzed
		analyzed: true,

		// The size of the file in bytes
		byteSizeV2: "9999999",

		// The name of the file
		filename: "some string",

		// The attachment's content type (e.g., image/jpg, video/mp4)
		contentType: "some string",

		// The source of the attachment
		source: {
			// The URL to access the attachment
			url: "some string",
		},

		// The blurhash of the image
		blurhash: "some string",

		// The height of the video
		height: 10,

		// The width of the video
		width: 10,

		// The aspect ratio of the video
		aspectRatio: 10,

		// The preview of the video
		preview: {
			// The URL to access the attachment
			url: "some string",
		},

		// The duration of the audio in seconds
		duration: 10,

		// The URL of the waveform for the audio
		waveformUrl: "some string",
	},
};

```


# Get Experience
Source: https://docs.whop.com/sdk/api/experiences/get-experience

Fetch an experience.

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.experiences.getExperience({
	// The ID of the experience
	experienceId: "exp_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The unique ID representing this experience
	id: "xxxxxxxxxxx",

	// The written name of the description.
	name: "some string",

	// A short written description of what is being offered
	description: "some string",

	// The logo for the experience.
	logo: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The experience interface for this experience.
	app: {
		// The ID of the app
		id: "xxxxxxxxxxx",

		// The name of the app
		name: "some string",

		// The icon for the app. This icon is shown on discovery, on the product page, on
		// checkout, and as a default icon for the experiences.
		icon: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},
	},

	// The company that owns this experience.
	company: {
		// The ID (tag) of the company.
		id: "xxxxxxxxxxx",

		// The title of the company.
		title: "some string",

		// The slug/route of the company on the Whop site.
		route: "some string",

		// The company's logo.
		logo: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// The company's banner image.
		bannerImage: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},
	},

	// The upsell type for the experience, if any.
	upsellType:
		"after_checkout" /* Valid values: after_checkout | before_checkout | only_in_whop */,

	// The upsell plan for the experience, if any.
	upsellPlan: {
		// The internal ID of the plan.
		id: "xxxxxxxxxxx",

		// The respective currency identifier for the plan.
		baseCurrency:
			"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

		// The price a person has to pay for a plan on the renewal purchase.
		rawRenewalPrice: 10,

		// The price a person has to pay for a plan on the initial purchase.
		rawInitialPrice: 10,

		// How much the user has to pay on the first payment.
		initialPriceDue: 10,

		// When the plan was created.
		createdAt: 1716931200,

		// When the plan was last updated.
		updatedAt: 1716931200,

		// The interval at which the plan charges (renewal plans).
		billingPeriod: 10,

		// The number of free trial days added before a renewal plan.
		trialPeriodDays: 10,

		// The interval at which the plan charges (expiration plans).
		expirationDays: 10,

		// Limits/doesn't limit the number of units available for purchase.
		unlimitedStock: true,

		// The description of the Plan as seen by the customer on the checkout page.
		paymentLinkDescription: "some string",

		// This is the release method the business uses to sell this plan.
		releaseMethod: "buy_now" /* Valid values: buy_now | raffle | waitlist */,

		// The number of units available for purchase.
		stock: 10,

		// Shows or hides the plan from public/business view.
		visibility:
			"archived" /* Valid values: archived | hidden | quick_link | visible */,

		// Indicates if the plan is a one time payment or recurring.
		planType: "one_time" /* Valid values: one_time | renewal */,
	},
};

```


# List Access Passes For Experience
Source: https://docs.whop.com/sdk/api/experiences/list-access-passes-for-experience

Fetch an experience.

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.experiences.listAccessPassesForExperience({
	// The ID of the experience
	experienceId: "exp_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The unique ID representing this experience
	experienceId: "xxxxxxxxxxx",

	// The access passes that are associated with this experience. This should not be
	// used unless you are trying to list all access passes the experience has, for
	// some reason. You probably don't want to use this though and should be using accessPass.
	accessPasses: [
		{
			// The internal ID of the public access pass.
			id: "xxxxxxxxxxx",

			// The title of the access pass. Use for Whop 4.0.
			title: "some string",

			// A short description of what the company offers or does.
			shortenedDescription: "some string",

			// Whether this product is Whop verified.
			verified: true,

			// This access pass will/will not be displayed publicly.
			visibility:
				"archived" /* Valid values: archived | hidden | quick_link | visible */,

			// The route of the access pass.
			route: "some string",

			// The number of active users for this access pass.
			activeUsersCount: 10,

			// The logo for the access pass.
			logo: {
				// The original URL of the attachment, such as a direct link to S3. This should
				// never be displayed on the client and always passed to an Imgproxy transformer.
				sourceUrl: "some string",
			},
		},
	],
};

```


# List Experiences
Source: https://docs.whop.com/sdk/api/experiences/list-experiences

Fetch a company

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.experiences.listExperiences({
	after: "pageInfo.endCursor",

	first: 10,

	accessPassId: "prod_XXXXXXXX",

	appId: "app_XXXXXXXX",

	onAccessPass: true,

	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// All of the experiences connected to the company.
	experiencesV2: {
		// A list of nodes.
		nodes: [
			{
				// The ID of the experience
				id: "xxxxxxxxxxx",

				// The name of the experience
				name: "some string",

				// A short description of the experience
				description: "some string",

				// The image for the experience interface
				logo: {
					// Image url with requested image resolution.
					sourceUrl: "some string",
				},

				// The interface of the experience
				app: {
					// The ID of the app
					id: "xxxxxxxxxxx",

					// The name of the app
					name: "some string",

					// The icon for the app. This icon is shown on discovery, on the product page, on
					// checkout, and as a default icon for the experiences.
					icon: {
						// The original URL of the attachment, such as a direct link to S3. This should
						// never be displayed on the client and always passed to an Imgproxy transformer.
						sourceUrl: "some string",
					},
				},
			},
		],

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},

		// The total number of items in this connection.
		totalCount: 10,
	},
};

```


# List Users For Experience
Source: https://docs.whop.com/sdk/api/experiences/list-users-for-experience

Fetch an experience.

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.experiences.listUsersForExperience({
	// The ID of the experience
	experienceId: "exp_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	direction: "asc" /* Valid values: asc | desc */,

	first: 10,

	searchQuery: "some string",
});

```

### Example output

```typescript
const result = {
	// The users that have access to this experience. This field will return nil if
	// you aren't authorized to view this experience's users. You must have a
	// membership or be a team member for the experience to view the user list.
	users: {
		// A list of nodes.
		nodes: [
			{
				// The internal ID of the user.
				id: "xxxxxxxxxxx",

				// The username of the user from their Whop account.
				username: "some string",

				// The user's profile picture
				profilePicture: {
					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},
			},
		],

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, the cursor to continue.
			endCursor: "some string",

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating backwards, are there more items?
			hasPreviousPage: true,
		},

		// The total number of items in this connection.
		totalCount: 10,
	},
};

```


# Create Forum Post
Source: https://docs.whop.com/sdk/api/forums/create-forum-post



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `forum:post:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.forums.createForumPost({
	// The attachments for this post, such as videos or images.
	attachments: [
		{
			// This ID should be used the first time you upload an attachment. It is the ID
			// of the direct upload that was created when uploading the file to S3 via the
			// mediaDirectUpload mutation.
			directUploadId: "xxxxxxxxxxx",

			// The ID of an existing attachment object. Use this when updating a resource and
			// keeping a subset of the attachments. Don't use this unless you know what you're doing.
			id: "xxxxxxxxxxx",
		},
	],

	// The content of the post. This is the main body of the post. Hidden if paywalled.
	content: "some string" /* Required! */,

	// The ID of the forum experience to send the message in. This will look like exp_xxxx.
	forumExperienceId: "some string" /* Required! */,

	// This is used to determine if the post should be sent as a 'mention'
	// notification to all of the users who are in the experience. This means that
	// anyone with 'mentions' enabled will receive a notification about this post.
	isMention: true,

	// The ID of the parent post, if applicable (Used when making a comment)
	parentId: "post_XXXXXXXX",

	// The amount to paywall this post by. A paywalled post requires the user to purchase it in order to view its content.
	paywallAmount: 10,

	// The currency to paywall this post by. A paywalled post requires the user to purchase it in order to view its content.
	paywallCurrency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

	// Whether the post should be pinned
	pinned: true,

	// The poll for this post. A poll lets you collect responses to a multiple choice question.
	poll: {
		// The options for the poll. Must have sequential IDs starting from 1
		options: [
			{
				// Sequential ID for the poll option (starting from '1')
				id: "some string" /* Required! */,

				// The text of the poll option
				text: "some string" /* Required! */,
			},
		] /* Required! */,
	},

	// The title of the post. Visible if paywalled.
	title: "some string",
});

```

### Example output

```typescript
const result = {
	// The unique identifier for the entity
	id: "xxxxxxxxxxx",

	// The time the entity was created (in milliseconds since Unix epoch)
	createdAt: "9999999",

	// The time the entity was last updated (in milliseconds since Unix epoch)
	updatedAt: "9999999",

	// The text content of the forum post
	content: "some string",

	// The rich content of the forum post
	richContent: "some string",

	// Whether the entity has been deleted
	isDeleted: true,

	// The attachments to this message
	attachments: [
		{
			// The ID of the attachment
			id: "xxxxxxxxxxx",

			// The attachment's content type (e.g., image/jpg, video/mp4)
			contentType: "some string",

			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},
	],

	// Whether the forum post has been edited
	isEdited: true,

	// Whether this forum post is pinned
	isPinned: true,

	// The IDs of the users mentioned in this forum post
	mentionedUserIds: ["xxxxxxxxxxx"],

	// The ID of the parent forum post, if applicable
	parentId: "xxxxxxxxxxx",

	// The number of times this message has been viewed
	viewCount: 10,

	// The user who created this forum post
	user: {
		// The internal ID of the user.
		id: "xxxxxxxxxxx",

		// The name of the user from their Whop account.
		name: "some string",

		// The username of the user from their Whop account.
		username: "some string",

		// The user's profile picture
		profilePicture: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// Whether or not the user's phone is verified
		phoneVerified: true,

		// The city the user is from.
		city: "some string",

		// The country the user is from.
		country: "some string",
	},
};

```


# Find Or Create Forum
Source: https://docs.whop.com/sdk/api/forums/find-or-create-forum



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `experience:attach`
* `experience:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.forums.findOrCreateForum({
	// The ID of the access pass (whop) to attach the experience to. It looks like prod_xxxx.
	accessPassId: "prod_XXXXXXXX",

	// The ID of an existing experience. If supplied, this new forum experience will
	// be attached to the first access pass (whop) of this experience. It looks like exp_xxxx.
	experienceId: "exp_XXXXXXXX",

	// The expiration date of the experience to be created. After this timestamp, the experience is deleted.
	expiresAt: 1716931200,

	// The name of the forum experience to be created, shown to the user on the UI.
	name: "some string" /* Required! */,

	// The upsell plan details to add for the forum experience. This allows you to
	// require paid access for the forum within the whop.
	price: {
		// The base currency of the upsell.
		baseCurrency:
			"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

		// An array of custom field objects.
		customFields: [
			{
				// The type of the custom field.
				fieldType: "text" /* Valid values: text */ /* Required! */,

				// The ID of the custom field (if being updated)
				id: "xxxxxxxxxxx",

				// The name of the custom field.
				name: "some string" /* Required! */,

				// The order of the field.
				order: 10,

				// The placeholder value of the field.
				placeholder: "some string",

				// Whether or not the field is required.
				required: true,
			},
		],

		// The interval at which the plan charges (expiration plans).
		expirationDays: 10,

		// The price of the upsell.
		initialPrice: 10,

		// The method of release for the upsell.
		releaseMethod: "buy_now" /* Valid values: buy_now | raffle | waitlist */,
	},

	// This is who is allowed to create posts inside the forum. Select 'admin' if you
	// only want the team members to post, or select 'everyone' if any member of the
	// whop can post. Default value is 'admins'.
	whoCanPost: "admins" /* Valid values: admins | everyone */,
});

```

### Example output

```typescript
const result = {
	// The unique ID representing this experience
	id: "xxxxxxxxxxx",

	// Use this link to directly take users to the experience
	link: "some string",
};

```


# List Forum Posts From Forum
Source: https://docs.whop.com/sdk/api/forums/list-forum-posts-from-forum

Fetch feed posts for the current user

### Required Permissions

* `chat:read`
* `forum:read`
* `livestream:chat:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.forums.listForumPostsFromForum({
	// The ID of the experience to fetch posts from
	experienceId: "exp_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// List of posts
	posts: [
		{
			// The unique identifier for the entity
			id: "xxxxxxxxxxx",

			// The time the entity was created (in milliseconds since Unix epoch)
			createdAt: "9999999",

			// The time the entity was last updated (in milliseconds since Unix epoch)
			updatedAt: "9999999",

			// The text content of the forum post
			content: "some string",

			// The rich content of the forum post
			richContent: "some string",

			// Whether the entity has been deleted
			isDeleted: true,

			// The attachments to this message
			attachments: [
				{
					// The ID of the attachment
					id: "xxxxxxxxxxx",

					// The attachment's content type (e.g., image/jpg, video/mp4)
					contentType: "some string",

					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},
			],

			// Whether the forum post has been edited
			isEdited: true,

			// Whether this forum post is pinned
			isPinned: true,

			// The IDs of the users mentioned in this forum post
			mentionedUserIds: ["xxxxxxxxxxx"],

			// The ID of the parent forum post, if applicable
			parentId: "xxxxxxxxxxx",

			// The number of times this message has been viewed
			viewCount: 10,

			// The user who created this forum post
			user: {
				// The internal ID of the user.
				id: "xxxxxxxxxxx",

				// The name of the user from their Whop account.
				name: "some string",

				// The username of the user from their Whop account.
				username: "some string",

				// The user's profile picture
				profilePicture: {
					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},

				// Whether or not the user's phone is verified
				phoneVerified: true,

				// The city the user is from.
				city: "some string",

				// The country the user is from.
				country: "some string",
			},
		},
	],
};

```


# Find Or Create Chat
Source: https://docs.whop.com/sdk/api/messages/find-or-create-chat



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `experience:attach`
* `experience:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.messages.findOrCreateChat({
	// The ID of the access pass (whop) to attach the chat experience to. It looks like prod_xxxx.
	accessPassId: "prod_XXXXXXXX",

	// The ID of an existing experience. If supplied, this new chat experience will
	// be attached to the first access pass (whop) of this experience. It looks like exp_xxxx.
	experienceId: "exp_XXXXXXXX",

	// The expiration date of the chat experience to be created. After this timestamp, the experience disappears.
	expiresAt: 1716931200,

	// The name of the chat experience to be created, shown to users in the UI.
	name: "some string" /* Required! */,

	// The upsell plan details to add for the chat experience. This allows you to
	// require paid access for the chat within the whop.
	price: {
		// The base currency of the upsell.
		baseCurrency:
			"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

		// An array of custom field objects.
		customFields: [
			{
				// The type of the custom field.
				fieldType: "text" /* Valid values: text */ /* Required! */,

				// The ID of the custom field (if being updated)
				id: "xxxxxxxxxxx",

				// The name of the custom field.
				name: "some string" /* Required! */,

				// The order of the field.
				order: 10,

				// The placeholder value of the field.
				placeholder: "some string",

				// Whether or not the field is required.
				required: true,
			},
		],

		// The interval at which the plan charges (expiration plans).
		expirationDays: 10,

		// The price of the upsell.
		initialPrice: 10,

		// The method of release for the upsell.
		releaseMethod: "buy_now" /* Valid values: buy_now | raffle | waitlist */,
	},

	// This is who is allowed to send messages inside the chat. Select 'admin' if you
	// only want the team members to message, or select 'everyone' if any member of
	// the whop can send messages.
	whoCanPost: "admins" /* Valid values: admins | everyone */,
});

```

### Example output

```typescript
const result = {
	// The unique ID representing this experience
	id: "xxxxxxxxxxx",

	// Use this link to directly take users to the experience
	link: "some string",
};

```


# List Direct Message Conversations
Source: https://docs.whop.com/sdk/api/messages/list-direct-message-conversations

Fetch direct message or group chats for the current user. Experimental, don't use in production yet.

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.messages.listDirectMessageConversations({
	// The `last_post_sent_at` timestamp to fetch channels before
	beforeTimestamp: "9999999",

	// Maximum number of channels to return
	limit: 10,

	// Filter by user or group name, e.g. 'Jack' or 'Fight Club'
	query: "some string",

	// Filter by status (accepted, requested, etc.)
	status:
		"accepted" /* Valid values: accepted | archived | closed | hidden | requested */,

	// Filter by unread status (true or false)
	unread: true,
});

```

### Example output

```typescript
const result = [
	{
		// The timestamp when the channel was created
		createdAt: 1716931200,

		// The unique identifier of the channel, e.g. 'feed_12345'
		id: "xxxxxxxxxxx",

		// Whether or not the channel is pinned to the top of the list
		isPinned: true,

		// The custom name of the DM channel, if any
		customName: "some string",

		// Whether or not the channel is a group chat
		isGroupChat: true,

		// List of members for the channel
		feedMembers: [
			{
				// The username of the user e.g. 'jacksmith01'
				username: "some string",

				// The unique identifier of the member resource, e.g. 'feed_member_12345'
				id: "xxxxxxxxxxx",
			},
		],

		// Whether or not the channel has unread posts
		isUnread: true,

		// Last post in the channel
		lastMessage: {
			// The text content of the post
			content: "some string",

			// The ID of the user who sent this message, e.g. 'user_12345'
			userId: "xxxxxxxxxxx",
		},
	},
];

```


# List Messages From Chat
Source: https://docs.whop.com/sdk/api/messages/list-messages-from-chat

Fetch feed posts for the current user

### Required Permissions

* `chat:read`
* `forum:read`
* `livestream:chat:read`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.messages.listMessagesFromChat({
	// The ID of the experience to fetch posts from
	chatExperienceId: "exp_XXXXXXXX",
});

```

### Example output

```typescript
const result = {
	// List of posts
	posts: [
		{
			// The unique identifier for the entity
			id: "xxxxxxxxxxx",

			// The time the entity was created (in milliseconds since Unix epoch)
			createdAt: "9999999",

			// The time the entity was last updated (in milliseconds since Unix epoch)
			updatedAt: "9999999",

			// The text content of the message
			content: "some string",

			// The rich content of the message
			richContent: "some string",

			// Whether the entity has been deleted
			isDeleted: true,

			// The attachments to this message
			attachments: [
				{
					// The ID of the attachment
					id: "xxxxxxxxxxx",

					// The attachment's content type (e.g., image/jpg, video/mp4)
					contentType: "some string",

					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},
			],

			// Whether the message has been edited
			isEdited: true,

			// Whether this message is pinned
			isPinned: true,

			// Whether everyone was mentioned in this message
			isEveryoneMentioned: true,

			// The IDs of the users mentioned in this message
			mentionedUserIds: ["xxxxxxxxxxx"],

			// The type of post
			messageType: "automated" /* Valid values: automated | regular | system */,

			// The ID of the message this is replying to, if applicable
			replyingToPostId: "xxxxxxxxxxx",

			// The number of times this message has been viewed
			viewCount: 10,

			// The user who sent this message
			user: {
				// The internal ID of the user.
				id: "xxxxxxxxxxx",

				// The name of the user from their Whop account.
				name: "some string",

				// The username of the user from their Whop account.
				username: "some string",

				// The user's profile picture
				profilePicture: {
					// The original URL of the attachment, such as a direct link to S3. This should
					// never be displayed on the client and always passed to an Imgproxy transformer.
					sourceUrl: "some string",
				},

				// Whether or not the user's phone is verified
				phoneVerified: true,

				// The city the user is from.
				city: "some string",

				// The country the user is from.
				country: "some string",
			},
		},
	],
};

```


# Send Direct Message To User
Source: https://docs.whop.com/sdk/api/messages/send-direct-message-to-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `chat:message:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.messages.sendDirectMessageToUser({
	toUserIdOrUsername: "xxxxxxxxxxx" /* Required! */,

	message: "some string" /* Required! */,

	attachments: [
		{
			// This ID should be used the first time you upload an attachment. It is the ID
			// of the direct upload that was created when uploading the file to S3 via the
			// mediaDirectUpload mutation.
			directUploadId: "xxxxxxxxxxx",

			// The ID of an existing attachment object. Use this when updating a resource and
			// keeping a subset of the attachments. Don't use this unless you know what you're doing.
			id: "xxxxxxxxxxx",
		},
	],
});

```

### Example output

```typescript
const result = "some string";

```


# Send Message To Chat
Source: https://docs.whop.com/sdk/api/messages/send-message-to-chat



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `chat:message:create`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.messages.sendMessageToChat({
	experienceId: "exp_XXXXXXXX" /* Required! */,

	message: "some string" /* Required! */,

	attachments: [
		{
			// This ID should be used the first time you upload an attachment. It is the ID
			// of the direct upload that was created when uploading the file to S3 via the
			// mediaDirectUpload mutation.
			directUploadId: "xxxxxxxxxxx",

			// The ID of an existing attachment object. Use this when updating a resource and
			// keeping a subset of the attachments. Don't use this unless you know what you're doing.
			id: "xxxxxxxxxxx",
		},
	],
});

```

### Example output

```typescript
const result = "some string";

```


# Send Push Notification
Source: https://docs.whop.com/sdk/api/notifications/send-push-notification



<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.notifications.sendPushNotification({
	// The ID of the company team to send the notification to
	companyTeamId: "biz_XXXXXXXX",

	// The content of the notification
	content: "some string" /* Required! */,

	// The ID of the experience to send the notification to
	experienceId: "exp_XXXXXXXX",

	// An external ID for the notification
	externalId: "some string",

	// Whether the notification is a mention
	isMention: true,

	// The link to open when the notification is clicked. If you just want to append
	// a rest path use the restPath parameter. You can link to any url here.
	link: "some string",

	// The rest path to append to the generated deep link that opens your app. Use
	// [restPath] in your app path in the dashboard to read this parameter.
	restPath: "some string",

	// The ID of the user sending the notification
	senderUserId: "user_XXXXXXXX",

	// The subtitle of the notification
	subtitle: "some string",

	// The title of the notification
	title: "some string" /* Required! */,

	// The IDs of the users to send the notification to.
	userIds: ["xxxxxxxxxxx"],
});

```

### Example output

```typescript
const result = true;

```


# Charge User
Source: https://docs.whop.com/sdk/api/payments/charge-user



<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.payments.chargeUser({
	// The affiliate code to use for the checkout session
	affiliateCode: "some string",

	// The amount to charge the user
	amount: 10 /* Required! */,

	// The currency to charge in
	currency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */ /* Required! */,

	// The description of the charge. Maximum 200 characters.
	description: "some string",

	// Additional metadata for the charge
	metadata: { any: "json" },

	// The URL to redirect the user to after the checkout session is created
	redirectUrl: "some string",

	// The ID of the user to charge
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The status of the charge attempt
	status: "needs_action" /* Valid values: needs_action | success */,

	// The checkout session if additional action is needed
	inAppPurchase: {
		// The ID of the checkout session
		id: "xxxxxxxxxxx",

		// The ID of the plan to use for the checkout session
		planId: "xxxxxxxxxxx",
	},
};

```


# Create Checkout Session
Source: https://docs.whop.com/sdk/api/payments/create-checkout-session



<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.payments.createCheckoutSession({
	// The affiliate code to use for the checkout session
	affiliateCode: "some string",

	// The metadata to use for the checkout session
	metadata: { any: "json" },

	// The ID of the plan to use for the checkout session
	planId: "xxxxxxxxxxx" /* Required! */,

	// The URL to redirect the user to after the checkout session is created
	redirectUrl: "some string",
});

```

### Example output

```typescript
const result = {
	// The ID of the checkout session
	id: "xxxxxxxxxxx",

	// The ID of the plan to use for the checkout session
	planId: "xxxxxxxxxxx",
};

```


# List Receipts For Company
Source: https://docs.whop.com/sdk/api/payments/list-receipts-for-company

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `payment:basic:read`
* *`access_pass:basic:read` (optional)*
* *`member:basic:read` (optional)*
* *`member:email:read` (optional)*
* *`plan:basic:read` (optional)*
* *`promo_code:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.payments.listReceiptsForCompany({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	first: 10,

	after: "pageInfo.endCursor",

	filter: {
		// A specific access pass.
		accessPassIds: ["xxxxxxxxxxx"],

		// The billing reason for the payment
		billingReasons: [
			"manual" /* Valid values: manual | one_time | subscription | subscription_create | subscription_cycle | subscription_update */,
		],

		// The currency of the payment.
		currencies: [
			"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,
		],

		// Which way to order the results.
		direction: "asc" /* Valid values: asc | desc */,

		// To get all memberships created before this certain time.
		endDate: 1716931200,

		// How to order the results.
		order: "created_at" /* Valid values: created_at | final_amount | paid_at */,

		// How the payment was made (method).
		paymentMethods: [
			"apple" /* Valid values: apple | coinbase | crypto | free | multi_psp | nft | paypal | platform_balance | sezzle | splitit | stripe */,
		],

		// A specific plan.
		planIds: ["xxxxxxxxxxx"],

		// The text that is being searched.
		query: "some string",

		// To get all memberships created after this certain time.
		startDate: 1716931200,

		// The state of the payment.
		statuses: [
			"failed" /* Valid values: failed | partially_refunded | past_due | refunded | succeeded */,
		],
	},
});

```

### Example output

```typescript
const result = {
	// All of a company's payments, with searching capabilities..
	// Roles: owner, admin
	receipts: {
		// A list of nodes.
		nodes: [
			{
				// The receipt ID
				id: "xxxxxxxxxxx",

				// The address of the user who made the payment.
				address: {
					// The name of the customer.
					name: "some string",

					// The line 1 of the address.
					line1: "some string",

					// The line 2 of the address.
					line2: "some string",

					// The city of the address.
					city: "some string",

					// The state of the address.
					state: "some string",

					// The postal code of the address.
					postalCode: "some string",

					// The country of the address.
					country: "some string",
				},

				// The final converted amount of the receipt in USD.
				settledUsdAmount: 10,

				// The billing reason
				billingReason: "some string",

				// The last 4 digits of the card used to make the payment.
				last4: "some string",

				// The currency of the payment.
				currency:
					"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

				// The current state of the receipt.
				status:
					"draft" /* Valid values: draft | open | paid | pending | uncollectible | unresolved | void */,

				// The datetime the receipt was created
				createdAt: 1716931200,

				// The total of the payment amount.
				total: 10,

				// The type of card used as the payment method.
				brand: "some string",

				// The payment processor used to make this payment.
				paymentProcessor:
					"apple" /* Valid values: apple | coinbase | crypto | free | multi_psp | nft | paypal | platform_balance | sezzle | splitit | stripe */,

				// Returns the type of payment method used for the payment, if available. Ex. klarna, affirm, card, cashapp
				paymentMethodType: "some string",

				// When an alert came in that this transaction will be disputed
				disputeAlertedAt: 1716931200,

				// The final amount of this receipt.
				finalAmount: 10,

				// The final amount to show to the creator (excluding buyer fees).
				presentedFinalAmount: 10,

				// The settled amount in USD to show to the creator.
				presentedSettledUsdAmount: 10,

				// The payment refund amount(if applicable).
				refundedAmount: 10,

				// The friendly status of the receipt.
				friendlyStatus:
					"auto_refunded" /* Valid values: auto_refunded | canceled | dispute_warning | drafted | failed | incomplete | open_dispute | open_resolution | partially_refunded | past_due | pending | price_too_low | refunded | succeeded | uncollectible | unresolved */,

				// If the payment failed, the reason for the failure.
				failureMessage: "some string",

				// Whether the payment can be refunded.
				refundable: true,

				// Whether the payment can be retried.
				retryable: true,

				// The datetime the receipt was paid
				paidAt: 1716931200,

				// How much the receipt is for after fees
				amountAfterFees: 10,

				// Whether the charge was skipped because the price was too low.
				chargeSkippedPriceTooLow: true,

				// The time of the last payment attempt.
				lastPaymentAttempt: 1716931200,

				// Whether this payment was auto refunded or not
				autoRefunded: true,

				// The member attached to this receipt.
				member: {
					// The header to show on the customers page
					header: "some string",

					// The user for this member, if any.
					user: {
						// The internal ID of the user account.
						id: "xxxxxxxxxxx",

						// The whop username.
						username: "some string",

						// The user's full name.
						name: "some string",

						// The digital mailing address of the user.
						email: "some string",

						// The country the user is from.
						country: "some string",

						// The name of the country the user is from (ex. United States). If not available, falls back to the country code.
						countryName: "some string",
					},

					// The image for the member, derived from either the User or the Company Buyer.
					imageSrcset: {
						// Image url with requested image resolution.
						original: "some string",

						// Image url with double image resolution.
						double: "some string",

						// If the attachment should be rendered with sound and controls
						isVideo: true,
					},
				},

				// The plan attached to this receipt.
				plan: {
					// The internal ID of the plan.
					id: "xxxxxxxxxxx",

					// The title of the owning object.
					title: "some string",

					// The formatted price (including currency) for the plan.
					formattedPrice: "some string",

					// An additional amount charged upon first purchase (separate from the renewal price).
					initialPrice: 10,

					// The amount the customer is charged every billing period.
					renewalPrice: 10,

					// The description of the Plan as seen by the customer on the checkout page.
					paymentLinkDescription: "some string",
				},

				// The membership attached to this receipt.
				membership: {
					// The internal ID of the membership.
					id: "xxxxxxxxxxx",

					// The state of the membership.
					status:
						"active" /* Valid values: active | canceled | completed | drafted | expired | past_due | trialing | unresolved */,
				},

				// The promo code used for this receipt.
				promoCode: {
					// The ID of the promo.
					id: "xxxxxxxxxxx",

					// The specific code used to apply the promo at checkout.
					code: "some string",

					// The amount off (% or flat amount) for the promo.
					amountOff: 10,

					// The monetary currency of the promo code.
					baseCurrency:
						"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

					// The type (% or flat amount) of the promo.
					promoType: "flat_amount" /* Valid values: flat_amount | percentage */,

					// The number of billing cycles the promo is applied for.
					numberOfIntervals: 10,
				},

				// The access pass attached to this receipt.
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The title of the access pass. Use for Whop 4.0.
					title: "some string",
				},

				// The total of the payment amount in USD.
				totalUsdAmount: 10,

				// The risk score of the most recent charge attempt. From 0 to 100.
				mostRecentRiskScore: 10,
			},
		],

		// Information to aid in pagination.
		pageInfo: {
			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},
	},
};

```


# Pay User
Source: https://docs.whop.com/sdk/api/payments/pay-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `payout:transfer_funds`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.payments.payUser({
	// The amount to withdraw
	amount: 10 /* Required! */,

	// The currency that is being withdrawn.
	currency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */ /* Required! */,

	// The ID of the destination (either a User tag, Bot tag, or LedgerAccount tag)
	destinationId: "xxxxxxxxxxx" /* Required! */,

	// The feed identifier to notify of the transfer.
	feedId: "feed_XXXXXXXX",

	// The feed type to notify of the transfer.
	feedType:
		"chat_feed" /* Valid values: chat_feed | dms_feed | forum_feed | livestream_feed | universal_post | user */,

	// A unique key to ensure idempotence. Use a UUID or similar.
	idempotenceKey: "some string" /* Required! */,

	// The ledger account id to transfer from.
	ledgerAccountId: "ldgr_XXXXXXXX" /* Required! */,

	// Notes for the transfer. Maximum of 50 characters.
	notes: "some string",

	// The reason for the transfer.
	reason:
		"bounty_payout" /* Valid values: bounty_payout | content_reward_fixed_payout | content_reward_payout | content_reward_return | creator_to_creator | creator_to_user | pool_top_up | team_member_payout | user_to_creator | user_to_user | wadmin_transferred_funds */,

	// The fee that the client thinks it is being charged for the transfer. Used to verify the fee.
	transferFee: 10,
});

```

### Example output

```typescript
const result = true;

```


# Create Promo Code
Source: https://docs.whop.com/sdk/api/promo-codes/create-promo-code



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `promo_code:create`
* *`access_pass:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.promoCodes.createPromoCode({
	// The access pass to lock the promo code to, if any.
	accessPassId: "prod_XXXXXXXX",

	// The amount off (% or flat amount) for the promo.
	amountOff: "some string" /* Required! */,

	// The monetary currency of the promo code.
	baseCurrency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */ /* Required! */,

	// Restricts promo use to only users who have churned from the company before.
	churnedUsersOnly: true,

	// The specific code used to apply the promo at checkout.
	code: "some string" /* Required! */,

	// Whether this promo code is for existing memberships only (cancelations)
	existingMembershipsOnly: true,

	// The date/time of when the promo expires.
	expirationDatetime: 1716931200,

	// Restricts promo use to only users who have never purchased from the company before.
	newUsersOnly: true /* Required! */,

	// The number of billing cycles the promo is applied for.
	numberOfIntervals: 10 /* Required! */,

	// Restricts promo use to only be applied once per customer.
	onePerCustomer: true,

	// The IDs of the plans that the affiliate can refer.
	planIds: ["xxxxxxxxxxx"],

	// The type (% or flat amount) of the promo.
	promoType:
		"flat_amount" /* Valid values: flat_amount | percentage */ /* Required! */,

	// The quantity limit on the number of uses.
	stock: 10,

	// Whether or not the promo code should have unlimited stock.
	unlimitedStock: true,
});

```

### Example output

```typescript
const result = {
	// The ID of the promo.
	id: "xxxxxxxxxxx",

	// The specific code used to apply the promo at checkout.
	code: "some string",

	// The type (% or flat amount) of the promo.
	promoType: "flat_amount" /* Valid values: flat_amount | percentage */,

	// The duration of the promo.
	duration: "forever" /* Valid values: forever | once | repeating */,

	// The timestamp of when the promo was created.
	createdAt: 1716931200,

	// The date/time of when the promo expires.
	expirationDatetime: 1716931200,

	// The monetary currency of the promo code.
	baseCurrency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

	// The amount off (% or flat amount) for the promo.
	amountOff: 10,

	// The amount off formatted for display.
	discountOff: "some string",

	// Restricts promo use to only be applied to already purchased memberships.
	existingMembershipsOnly: true,

	// The number of billing cycles the promo is applied for.
	numberOfIntervals: 10,

	// Indicates if the promo code is live or disabled.
	status: "active" /* Valid values: active | archived | inactive */,

	// The quantity limit on the number of uses.
	stock: 10,

	// Whether or not the promo code has unlimited stock.
	unlimitedStock: true,

	// The amount of times the promo codes has been used.
	uses: 10,

	// Restricts promo use to only be applied once per customer.
	onePerCustomer: true,

	// Restricts promo use to only users who have churned from the company before.
	churnedUsersOnly: true,

	// Restricts promo use to only users who have never purchased from the company before.
	newUsersOnly: true,

	// The access pass associated with the promo code.
	accessPass: {
		// The internal ID of the public access pass.
		id: "xxxxxxxxxxx",

		// The title of the access pass. Use for Whop 4.0.
		title: "some string",
	},
};

```


# Delete Promo Code
Source: https://docs.whop.com/sdk/api/promo-codes/delete-promo-code



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `promo_code:delete`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.promoCodes.deletePromoCode({
	// The internal ID of the promo code to archive.
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Promo Code
Source: https://docs.whop.com/sdk/api/promo-codes/get-promo-code

Fetches a promo code based on the provided code and plan

<Note>This operation is only available on the server.</Note>

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.promoCodes.getPromoCode({
	// The code of the promo code
	code: "some string" /* Required! */,

	// The ID of the plan to fetch the promo code for
	planId: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the promo.
	id: "xxxxxxxxxxx",

	// The specific code used to apply the promo at checkout.
	code: "some string",

	// The timestamp of when the promo was created.
	createdAt: 1716931200,

	// The type (% or flat amount) of the promo.
	promoType: "flat_amount" /* Valid values: flat_amount | percentage */,

	// The monetary currency of the promo code.
	baseCurrency:
		"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

	// The duration of the promo.
	duration: "forever" /* Valid values: forever | once | repeating */,

	// The amount off (% or flat amount) for the promo.
	amountOff: 10,

	// The amount off formatted for display.
	discountOff: "some string",

	// Restricts promo use to only be applied to already purchased memberships.
	existingMembershipsOnly: true,

	// The number of billing cycles the promo is applied for.
	numberOfIntervals: 10,

	// Whether or not the promo is a popup promo.
	isPopupPromo: true,
};

```


# List Promo Codes
Source: https://docs.whop.com/sdk/api/promo-codes/list-promo-codes

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `promo_code:basic:read`
* *`access_pass:basic:read` (optional)*

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.promoCodes.listPromoCodes({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,

	after: "pageInfo.endCursor",

	before: "pageInfo.startCursor",

	first: 10,

	last: 10,

	filters: {
		// How to order the results.
		direction: "asc" /* Valid values: asc | desc */,

		// Filter whether to return active or expired (archived and inactive).
		newStatus: "active" /* Valid values: active | expired */,

		// What to order the results by.
		order: "code" /* Valid values: code | created_at */,

		// The text that is being searched.
		query: "some string",

		// The state of promo code.
		status: "active" /* Valid values: active | archived | inactive */,
	},
});

```

### Example output

```typescript
const result = {
	// All of a company's promo codes, with searching capabilities.
	promoCodes: {
		// The total number of items in this connection.
		totalCount: 10,

		// Information to aid in pagination.
		pageInfo: {
			// When paginating backwards, the cursor to continue.
			startCursor: "some string",

			// When paginating backwards, are there more items?
			hasPreviousPage: true,

			// When paginating forwards, are there more items?
			hasNextPage: true,

			// When paginating forwards, the cursor to continue.
			endCursor: "some string",
		},

		// A list of nodes.
		nodes: [
			{
				// The ID of the promo.
				id: "xxxxxxxxxxx",

				// The specific code used to apply the promo at checkout.
				code: "some string",

				// The type (% or flat amount) of the promo.
				promoType: "flat_amount" /* Valid values: flat_amount | percentage */,

				// The duration of the promo.
				duration: "forever" /* Valid values: forever | once | repeating */,

				// The timestamp of when the promo was created.
				createdAt: 1716931200,

				// The date/time of when the promo expires.
				expirationDatetime: 1716931200,

				// The monetary currency of the promo code.
				baseCurrency:
					"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,

				// The amount off (% or flat amount) for the promo.
				amountOff: 10,

				// The amount off formatted for display.
				discountOff: "some string",

				// Restricts promo use to only be applied to already purchased memberships.
				existingMembershipsOnly: true,

				// The number of billing cycles the promo is applied for.
				numberOfIntervals: 10,

				// Indicates if the promo code is live or disabled.
				status: "active" /* Valid values: active | archived | inactive */,

				// The quantity limit on the number of uses.
				stock: 10,

				// Whether or not the promo code has unlimited stock.
				unlimitedStock: true,

				// The amount of times the promo codes has been used.
				uses: 10,

				// Restricts promo use to only be applied once per customer.
				onePerCustomer: true,

				// Restricts promo use to only users who have churned from the company before.
				churnedUsersOnly: true,

				// Restricts promo use to only users who have never purchased from the company before.
				newUsersOnly: true,

				// The access pass associated with the promo code.
				accessPass: {
					// The internal ID of the public access pass.
					id: "xxxxxxxxxxx",

					// The title of the access pass. Use for Whop 4.0.
					title: "some string",
				},
			},
		],
	},
};

```


# Ban User
Source: https://docs.whop.com/sdk/api/users/ban-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `member:moderate`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.banUser({
	// The ID of the access pass to ban the user from
	accessPassId: "prod_XXXXXXXX",

	// The custom reason for banning the user
	customReason: "some string",

	// The ID of the feed to delete messages from
	deleteMessagesInFeedId: "xxxxxxxxxxx",

	// The reason for banning the user
	reason:
		"botting_content_rewards" /* Valid values: botting_content_rewards | botting_negative_reviews | control_center_blocked_country | harassment | other | spamming */,

	// The ID of the user to ban
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Current User
Source: https://docs.whop.com/sdk/api/users/get-current-user

Returns the current user and company.

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.getCurrentUser();

```

### Example output

```typescript
const result = {
	// The user the viewer is in scope of.
	user: {
		// The internal ID of the user
		id: "xxxxxxxxxxx",

		// The email address of the user
		email: "some string",

		// The name of the user
		name: "some string",

		// The Whop username for this user
		username: "some string",

		// The user's profile picture
		profilePicture: {
			// The original URL of the attachment, such as a direct link to S3. This should
			// never be displayed on the client and always passed to an Imgproxy transformer.
			sourceUrl: "some string",
		},

		// The user's bio
		bio: "some string",

		// Whether or not the user's phone is verified
		phoneVerified: true,

		// The user's banner image
		bannerImage: "some string",

		// The timestamp of when the user was created
		createdAt: 1716931200,

		// The day of the user's date of birth
		dateOfBirthDay: 10,

		// The month of the user's date of birth
		dateOfBirthMonth: 10,

		// The year of the user's date of birth
		dateOfBirthYear: 10,

		// The user's ledger account.
		ledgerAccount: {
			// The ID of the LedgerAccount.
			id: "xxxxxxxxxxx",

			// The fee for transfers, if applicable.
			transferFee: 10,

			// The balances associated with the account.
			balanceCaches: {
				// A list of nodes.
				nodes: [
					{
						// The amount of the balance.
						balance: 10,

						// The amount of the balance that is pending.
						pendingBalance: 10,

						// The currency of the balance.
						currency:
							"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,
					},
				],
			},
		},
	},
};

```


# Get User
Source: https://docs.whop.com/sdk/api/users/get-user

Fetch a specific user.

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.getUser({
	// ID of the user by tag or the username.
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The internal ID of the user.
	id: "xxxxxxxxxxx",

	// The name of the user from their Whop account.
	name: "some string",

	// The username of the user from their Whop account.
	username: "some string",

	// The user's profile picture
	profilePicture: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// The city the user is from.
	city: "some string",

	// The country the user is from.
	country: "some string",

	// The user's bio
	bio: "some string",

	// Whether or not the user's phone is verified
	phoneVerified: true,

	// The user's banner image
	banner: {
		// The original URL of the attachment, such as a direct link to S3. This should
		// never be displayed on the client and always passed to an Imgproxy transformer.
		sourceUrl: "some string",
	},

	// When the user was created.
	createdAt: 1716931200,

	// Earning statistics for this user.
	userStat: {
		// How much the user has earned in the last 24 hours.
		moneyEarned24Hours: 10,

		// How much the user has earned in the last 30 days.
		moneyEarned30Days: 10,

		// How much the user has earned in the last 7 days.
		moneyEarned7Days: 10,

		// How much the user has earned all time.
		moneyEarnedLifetime: 10,
	},
};

```


# Get User Ledger Account
Source: https://docs.whop.com/sdk/api/users/get-user-ledger-account

Returns the current user and company.

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.getUserLedgerAccount();

```

### Example output

```typescript
const result = {
	// The user the viewer is in scope of.
	user: {
		// The user's ledger account.
		ledgerAccount: {
			// The ID of the LedgerAccount.
			id: "xxxxxxxxxxx",

			// The fee for transfers, if applicable.
			transferFee: 10,

			// The balances associated with the account.
			balanceCaches: {
				// A list of nodes.
				nodes: [
					{
						// The amount of the balance.
						balance: 10,

						// The amount of the balance that is pending.
						pendingBalance: 10,

						// The currency of the balance.
						currency:
							"aed" /* Valid values: aed | all | amd | ape | ars | aud | bam | bgn | bhd | bob | brl | bsd | btc | cad | chf | clp | cop | crc | czk | dkk | dop | dzd | egp | etb | eth | eur | gbp | ghs | gmd | gtq | gyd | hkd | huf | idr | ils | inr | jmd | jod | jpy | kes | khr | krw | kwd | lkr | mad | mdl | mga | mkd | mnt | mop | mur | mxn | myr | nad | ngn | nok | nzd | omr | pen | php | pkr | pln | pyg | qar | ron | rsd | rub | rwf | sar | sek | sgd | thb | tnd | try | ttd | twd | tzs | usd | uyu | uzs | vnd | xcd | xof | zar */,
					},
				],
			},
		},
	},
};

```


# Mute User
Source: https://docs.whop.com/sdk/api/users/mute-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `chat:moderate`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.muteUser({
	// The time the user is muted until, in milliseconds. If not provided, the user will be muted indefinitely
	mutedUntil: 1716931200,

	// The ID of the user to mute
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Unban User
Source: https://docs.whop.com/sdk/api/users/unban-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `member:moderate`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.unbanUser({
	// The ID of the user to unban
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Unmute User
Source: https://docs.whop.com/sdk/api/users/unmute-user



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `chat:moderate`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.users.unmuteUser({
	// The ID of the user to unmute
	userId: "user_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Create Webhook
Source: https://docs.whop.com/sdk/api/webhooks/create-webhook



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.createWebhook({
	// The API version for this webhook
	apiVersion: "v2" /* Valid values: v2 | v5 */,

	// Whether or not the webhook is enabled.
	enabled: true,

	// The events to send the webhook for.
	events: [
		"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
	],

	// The resource to create the webhook for. By default this will use current company
	resourceId: "xxxxxxxxxxx",

	// The URL to send the webhook to.
	url: "some string" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The ID of the webhook
	id: "xxxxxxxxxxx",

	// The URL the webhook events will be sent to
	url: "some string",

	// The API version for this webhook
	apiVersion: "v2" /* Valid values: v2 | v5 */,

	// The timestamp of when the webhook was created
	createdAt: 1716931200,

	// Whether or not this webhook is turned on or not
	enabled: true,

	// The number of events this webhooks is configured to receive
	events: [
		"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
	],

	// The resource ID
	resourceId: "xxxxxxxxxxx",

	// A unique secret key that will be sent with each webhook event
	webhookSecret: "some string",
};

```


# Delete Webhook
Source: https://docs.whop.com/sdk/api/webhooks/delete-webhook



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.deleteWebhook({
	// The ID of the webhook to delete.
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = true;

```


# Get Webhook
Source: https://docs.whop.com/sdk/api/webhooks/get-webhook

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.getWebhook({
	webhookId: "xxxxxxxxxxx" /* Required! */,

	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The webhook that has been set by a company
	webhook: {
		// The ID of the webhook
		id: "xxxxxxxxxxx",

		// The URL the webhook events will be sent to
		url: "some string",

		// The API version for this webhook
		apiVersion: "v2" /* Valid values: v2 | v5 */,

		// The timestamp of when the webhook was created
		createdAt: 1716931200,

		// Whether or not this webhook is turned on or not
		enabled: true,

		// The number of events this webhooks is configured to receive
		events: [
			"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
		],

		// The resource ID
		resourceId: "xxxxxxxxxxx",

		// A unique secret key that will be sent with each webhook event
		webhookSecret: "some string",
	},
};

```


# List Webhooks
Source: https://docs.whop.com/sdk/api/webhooks/list-webhooks

Fetch a company

<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.listWebhooks({
	// ID of the company, either the tag (biz_xxx) or the page route (whop-dev)
	companyId: "biz_XXXXXXXX" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The webhooks that have been set by a company.
	// Roles: owner
	webhooks: [
		{
			// The ID of the webhook
			id: "xxxxxxxxxxx",

			// The URL the webhook events will be sent to
			url: "some string",

			// The API version for this webhook
			apiVersion: "v2" /* Valid values: v2 | v5 */,

			// The timestamp of when the webhook was created
			createdAt: 1716931200,

			// Whether or not this webhook is turned on or not
			enabled: true,

			// The number of events this webhooks is configured to receive
			events: [
				"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
			],

			// The resource ID
			resourceId: "xxxxxxxxxxx",

			// A unique secret key that will be sent with each webhook event
			webhookSecret: "some string",
		},
	],
};

```


# Test Webhook
Source: https://docs.whop.com/sdk/api/webhooks/test-webhook



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.testWebhook({
	// The event to test the webhook for.
	event:
		"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */ /* Required! */,

	// The ID of the webhook to test.
	id: "xxxxxxxxxxx" /* Required! */,
});

```

### Example output

```typescript
const result = {
	// The body of the webhook response
	body: { any: "json" },

	// The HTTP response code of this request
	status: 10,

	// Whether or not the webhook test was successful
	success: true,
};

```


# Update Webhook
Source: https://docs.whop.com/sdk/api/webhooks/update-webhook



<Note>This operation is only available on the server.</Note>

### Required Permissions

* `developer:manage_webhook`

### Usage

```typescript
import { whopSdk } from "@/lib/whop-sdk";

const result = await whopSdk.webhooks.updateWebhook({
	// The API version for this webhook
	apiVersion: "v2" /* Valid values: v2 | v5 */,

	// Whether or not the webhook is enabled.
	enabled: true,

	// The events to send the webhook for.
	events: [
		"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
	],

	// The ID of the Webhook to update
	id: "xxxxxxxxxxx" /* Required! */,

	// The URL to send the webhook to.
	url: "some string",
});

```

### Example output

```typescript
const result = {
	// The ID of the webhook
	id: "xxxxxxxxxxx",

	// The URL the webhook events will be sent to
	url: "some string",

	// The API version for this webhook
	apiVersion: "v2" /* Valid values: v2 | v5 */,

	// The timestamp of when the webhook was created
	createdAt: 1716931200,

	// Whether or not this webhook is turned on or not
	enabled: true,

	// The number of events this webhooks is configured to receive
	events: [
		"app_membership_cancel_at_period_end_changed" /* Valid values: app_membership_cancel_at_period_end_changed | app_membership_went_invalid | app_membership_went_valid | app_payment_failed | app_payment_pending | app_payment_succeeded | dispute_alert_created | dispute_created | dispute_updated | membership_cancel_at_period_end_changed | membership_experience_claimed | membership_metadata_updated | membership_went_invalid | membership_went_valid | payment_affiliate_reward_created | payment_failed | payment_pending | payment_succeeded | refund_created | refund_updated | resolution_created | resolution_decided | resolution_updated */,
	],

	// The resource ID
	resourceId: "xxxxxxxxxxx",

	// A unique secret key that will be sent with each webhook event
	webhookSecret: "some string",
};

```


# Open External Links
Source: https://docs.whop.com/sdk/external-url

Open external links from within the iFrame

If you want to open external links from within the iFrame, you can use the `openExternalLinks` function. This will close your app and move to a new website.

## Usage

<Warning>
  This function requires the iFrame SDK to be initialized. See [**iFrame
  Overview**](/sdk/iframe-setup) for more information.
</Warning>

<CodeGroup>
  ```javascript React
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function Home() {
  	const iframeSdk = useIframeSdk();

  	function openLink() {
  		iframeSdk.openExternalUrl({ url: "https://google.com" });
  	}

  	return <button onClick={openLink}>Click me to open Google</button>;
  }
  ```

  ```javascript Vanilla JS
  import { iframeSdk } from "@/lib/iframe-sdk";

  const navigationButtonElement = document.querySelector("button");

  if (navigationButtonElement) {
    navigationButtonElement.addEventListener("click", () => {
      iframeSdk.openExternalUrl({ url: "https://google.com" });
    });
  }
  ```
</CodeGroup>

## User Profiles

If you want to display a whop user profile, you can use the `openExternalUrl` method
and pass their profile page link which looks like `https://whop.com/@username`.

The whop app will intercept this and instead display a modal containing their user profile.

<CodeGroup>
  ```javascript React
  "use client";
  import { useIframeSdk } from "@whop/react";

  export default function Home() {
  	const iframeSdk = useIframeSdk();

  	function openLink() {
  		iframeSdk.openExternalUrl({ url: "https://whop.com/@j" });
  	}

  	return <button onClick={openLink}>Click me to open Google</button>;
  }
  ```

  ```javascript Vanilla JS
  import { iframeSdk } from "@/lib/iframe-sdk";

  const navigationButtonElement = document.querySelector("button");

  if (navigationButtonElement) {
    navigationButtonElement.addEventListener("click", () => {
      iframeSdk.openExternalUrl({ url: "https://whop.com/@j" });
    });
  }
  ```
</CodeGroup>

<Info>
  You can also use a user ID instead of username. The final link should look
  like this: `https://whop.com/@user_XXXXXXXX`
</Info>


# Getting Started
Source: https://docs.whop.com/sdk/iframe-setup

Getting started with the Whop iFrame SDK

Whop apps are embedded into the site using iFrames. This SDK provides a type-safe way for you to communicate with the Whop application using a request/response style API powered by `window.postMessage`.

Since this package relies on `window.postMessage`, it only works in **Client Components**.

### Relevant Packages

* `@whop/iframe` - The main package for the iframe SDK.
* `@whop/react` - A React wrapper for Whop Apps including helpers for the iframe SDK.

***

## Setup

The main function exported from the `@whop/iframe` package is the `createSdk` function. When called, this function sets up a listener for messages from the main Whop site, using `window.on('message', ...)`. It is also exposed through the `WhopIframeSdkProvider` component from `@whop/react`.

### React

If you're using React, it is recommended to use the `WhopIframeSdkProvider` component from `@whop/react` to provide the iframe SDK to all child components.

<CodeGroup>
  ```javascript Step 1: Mount provider in root layout
  // app/layout.tsx
  import { WhopIframeSdkProvider } from "@whop/react";

  export default function RootLayout({
    children,
  }: {
    children: React.ReactNode,
  }) {
    return (
      <html lang="en">
        <body>
          <WhopIframeSdkProvider>{children}</WhopIframeSdkProvider>
        </body>
      </html>
    );
  }
  ```

  ```javascript Step 2: Consume the iframe SDK in a component
  // components/example.tsx
  import { useIframeSdk } from "@whop/react";

  export const Example = () => {
    const iframeSdk = useIframeSdk();

    return (
      <button
        onClick={() => iframeSdk.openExternalUrl({ url: "https://example.com" })}
      >
        Open External URL
      </button>
    );
  };
  ```
</CodeGroup>

### Other Frameworks

For other frameworks, you can use the `createSdk` function from `@whop/iframe` to create an instance of the iframe SDK.

<CodeGroup>
  ```javascript Step 1: Create the iframe SDK instance
  // lib/iframe-sdk.ts
  import { createSdk } from "@whop/iframe";

  export const iframeSdk = createSdk({
    appId: process.env.NEXT_PUBLIC_WHOP_APP_ID,
  });
  ```

  ```javascript Step 2: Use the iframe SDK instance
  // index.ts
  import { iframeSdk } from "@/lib/iframe-sdk";

  const navigationButtonElement = document.querySelector("button");

  if (navigationButtonElement) {
    navigationButtonElement.addEventListener("click", () => {
      iframeSdk.openExternalUrl({ url: "https://example.com" });
    });
  }
  ```
</CodeGroup>

***

<Check>We have now setup the SDK and iFrame.</Check>
